#!/bin/bash

# By Rainman
# V20220112
# 0.2.6.9

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1

# shellcheck disable=SC2034  # Unused variables left for readability

### timeline ###################################################################

function timeline_stats() {
  # random start number
  TIMELINE_RANDOM=$((((RANDOM % 20) + 1)))

  if [[ -z "$TIMELINE_RANDOM" ]] &>/dev/null; then
    # non responsive, go with difficulty
    TIMELINE_RANDOM="1"
  fi

  # difficulty
  if [ "$TIMELINE_RANDOM" -eq "1" ] &>/dev/null; then
    TIMELINE_DIFF=$(cat "${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>/dev/null | tail -1 2>&1 | awk -F. '{ print $1 }' 2>&1)
    TIMELINE="Difficulty ${TIMELINE_DIFF:?}"

    # masternodes
  elif [ "$TIMELINE_RANDOM" -eq "2" ] &>/dev/null; then
    if [[ -f "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount ]] &>/dev/null; then
      # get wallet masternodes total, stable, enabled, inqueue
      TIMELINE_WALLET_NODES_TOTAL=$(grep "total" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
      TIMELINE_WALLET_NODES_STABLE=$(grep "stable" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
      TIMELINE_WALLET_NODES_ENABLED=$(grep "enabled" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
      TIMELINE_WALLET_NODES_INQUEUE=$(grep "inqueue" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
    fi

    if [[ -z "$TIMELINE_WALLET_NODES_TOTAL" ]] &>/dev/null; then
      TIMELINE_WALLET_NODES_TOTAL="0"
    fi
    if [[ -z "$TIMELINE_WALLET_NODES_STABLE" ]] &>/dev/null; then
      TIMELINE_WALLET_NODES_STABLE="0"
    fi
    if [[ -z "$TIMELINE_WALLET_NODES_ENABLED" ]] &>/dev/null; then
      TIMELINE_WALLET_NODES_ENABLED="0"
    fi
    if [[ -z "$TIMELINE_WALLET_NODES_INQUEUE" ]] &>/dev/null; then
      TIMELINE_WALLET_NODES_INQUEUE="0"
    fi
    TIMELINE="Masternodes ${N0:?}${TIMELINE_WALLET_NODES_STABLE:?}${N0:?}/${G1:?}${TIMELINE_WALLET_NODES_TOTAL:?}${N0:?}/${G0:?}${TIMELINE_WALLET_NODES_ENABLED:?}${N0:?}/${GR:?}${TIMELINE_WALLET_NODES_INQUEUE:?}${N0:?}"

  # moneysupply
  elif [ "$TIMELINE_RANDOM" -eq "3" ] &>/dev/null; then
    TIMELINE_SUPPLY=$(grep "moneysupply" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1 | rev 2>&1 | sed "s#[[:digit:]]\{3\}#&,#g" 2>&1 | rev 2>&1 | sed 's/^,//g' 2>&1)
    TIMELINE="Moneysupply $TIMELINE_SUPPLY${N0:?}"

  # unconfirmed_balance
  elif [ "$TIMELINE_RANDOM" -eq "4" ] &>/dev/null; then
    TIMELINE_WALLET_UNCONFIRMED=$(grep "unconfirmed_balance" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE_WALLET_UNCONFIRMED_VALUE=$(echo "$TIMELINE_WALLET_UNCONFIRMED*$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/price 2>&1)" 2>&1 | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1 | tail -1 2>&1)
    TIMELINE="Unconfirmed $TIMELINE_WALLET_UNCONFIRMED ${GR:?}$TIMELINE_WALLET_UNCONFIRMED_VALUE USD${N0:?}"

  # immature_balance
  elif [ "$TIMELINE_RANDOM" -eq "5" ] &>/dev/null; then
    TIMELINE_WALLET_IMMATURE=$(grep "immature_balance" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE_WALLET_IMMATURE_VALUE=$(echo "$TIMELINE_WALLET_IMMATURE*$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/price 2>&1)" 2>&1 | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1 | tail -1 2>&1)
    TIMELINE="Immature $TIMELINE_WALLET_IMMATURE ${GR:?}$TIMELINE_WALLET_IMMATURE_VALUE USD${N0:?}"

    # lowest confirmation
  elif [ "$TIMELINE_RANDOM" -eq "6" ] &>/dev/null; then
    TIMELINE_CONF=$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_CONF*60" 2>&1 | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    # calculate seconds into age
    if [[ -f "${LOG_DIR:?}"/node_data/wallet/client/listunspent ]] &>/dev/null; then
      TIMELINE_INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
      TIMELINE_INPUT_AGE_D=$(echo "$(echo "$TIMELINE_INPUT_AGE" 2>&1 | egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
    fi
    if [[ -z "$TIMELINE_CONF" ]] &>/dev/null; then
      # non responsive
      TIMELINE_CONF="${GR:?}0${N0:?}"
    fi
    TIMELINE="New Input $TIMELINE_CONF (${TIMELINE_INPUT_AGE_D:?}d) ${GR:?}$TIMELINE_INPUT_AGE${N0:?}"

    # highest confirmation
  elif [ "$TIMELINE_RANDOM" -eq "7" ] &>/dev/null; then
    TIMELINE_CONF=$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_CONF*60" 2>&1 | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    # calculate seconds into age
    if [[ -f "${LOG_DIR:?}"/node_data/wallet/client/listunspent ]] &>/dev/null; then
      TIMELINE_INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
      TIMELINE_INPUT_AGE_D=$(echo "$(echo "$TIMELINE_INPUT_AGE" 2>&1 | egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
    fi
    if [[ -z "$TIMELINE_CONF" ]] &>/dev/null; then
      # non responsive
      TIMELINE_CONF="${GR:?}0${N0:?}"
    fi
    TIMELINE="Old Input $TIMELINE_CONF (${TIMELINE_INPUT_AGE_D:?}d) ${GR:?}$TIMELINE_INPUT_AGE${N0:?}"

    # average confirmation
  elif [ "$TIMELINE_RANDOM" -eq "8" ] &>/dev/null; then
    TIMELINE_UNSPENT_COUNT=$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    TIMELINE_CONF=$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    # average calculated
    TIMELINE_AVG=$(echo "$TIMELINE_CONF/$TIMELINE_UNSPENT_COUNT" 2>&1 | bc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
    if [[ -z "$TIMELINE_AVG" ]] &>/dev/null; then
      # non responsive
      TIMELINE_AVG="${GR:?}0${N0:?}"
    fi
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_AVG*60" 2>&1 | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    # calculate seconds into age
    TIMELINE_INPUT_AGE=$(printf '%dh:%dm' $(("${TIMELINE_SEC:?}/3600")) $(("${TIMELINE_SEC:?}%3600/60")))
    # save the value
    echo "${TIMELINE_INPUT_AGE:?}" >"${LOG_DIR:?}"/node_data/wallet/data/avg_confirmations
    TIMELINE_INPUT_AGE_D=$(echo "$(echo "$TIMELINE_INPUT_AGE" 2>&1 | egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
    TIMELINE="Average ${TIMELINE_AVG:?} (${TIMELINE_INPUT_AGE_D:?}d) ${GR:?}$TIMELINE_INPUT_AGE${N0:?}"

    # wallet value
  elif [ "$TIMELINE_RANDOM" -eq "9" ] &>/dev/null; then
    TIMELINE_WALLET_VALUE=$(echo "$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/price 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)*$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>/dev/null)" 2>&1 | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1 | tail -1 2>&1)
    TIMELINE_WALLET_TICKER=$(cat "${LOG_DIR:?}"/node_data/wallet/data/price 2>/dev/null | tail -1 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)
    TIMELINE="Value ${TIMELINE_WALLET_VALUE:?} USD ${GR:?}${TIMELINE_WALLET_TICKER:?}${N0:?}"

    # highest input amount
  elif [ "$TIMELINE_RANDOM" -eq "10" ] &>/dev/null; then
    TIMELINE_HIGH_INPUT=$(grep "amount" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)
    if [[ -z "$TIMELINE_HIGH_INPUT" ]] &>/dev/null; then
      # non responsive
      TIMELINE_HIGH_INPUT="${GR:?}0${N0:?}"
    fi
    TIMELINE="Highest Input $TIMELINE_HIGH_INPUT"

    # lowest input amount
  elif [ "$TIMELINE_RANDOM" -eq "11" ] &>/dev/null; then
    TIMELINE_LOW_INPUT=$(grep "amount" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)
    if [[ -z "$TIMELINE_LOW_INPUT" ]] &>/dev/null; then
      # non responsive
      TIMELINE_LOW_INPUT="${GR:?}0${N0:?}"
    fi
    TIMELINE="Lowest Input ${TIMELINE_LOW_INPUT:?}"

    # wallet (daemon) uptime
  elif [ "$TIMELINE_RANDOM" -eq "12" ] &>/dev/null; then
    TIMELINE_DAEMON_UPTIME="$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)"
    TIMELINE_UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(echo "${TIMELINE_DAEMON_UPTIME:?}" 2>&1)/3600")) $(("$(echo "${TIMELINE_DAEMON_UPTIME:?}" 2>&1)%3600/60")) $(("$(echo "${TIMELINE_DAEMON_UPTIME:?}" 2>&1)%60")))
    TIMELINE_DAYS=$(echo "$(echo "${TIMELINE_DAEMON_UPTIME:?}" 2>&1)/86400" 2>&1 | bc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
    TIMELINE="Wallet (${TIMELINE_DAYS:?}d) ${GR:?}${TIMELINE_UPTIME:?}${N0:?}"

    # peer 2 peer
  elif [ "$TIMELINE_RANDOM" -eq "13" ] &>/dev/null; then
    # highest peer count
    TIMELINE_HIGH_P2P=$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | egrep "[0-9]+" 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # lowest peer count
    TIMELINE_LOWS_P2P=$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | egrep "[0-9]+" 2>&1 | sort -n 2>&1 | head -1 2>&1)
    TIMELINE="Low/High P2P ${TIMELINE_LOWS_P2P:?}/${TIMELINE_HIGH_P2P:?}"

    # mempool activity
  elif [ "$TIMELINE_RANDOM" -eq "14" ] &>/dev/null; then
    TIMELINE="${N0:?}Alive $(cat "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>/dev/null | awk '{ print $2 }' 2>&1) Dead $(cat "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>/dev/null | awk '{ print $4 }' 2>&1)${N0:?}"

  # network interface and speed
  elif [ "$TIMELINE_RANDOM" -eq "15" ] &>/dev/null; then
    # interface icon (top right)
    TIMELINE_INTERFACE=$(egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | grep -B1 "inet" 2>&1 | egrep -o "wlan[0-9]+|eth[0-9]+" 2>&1)
    # interface w speed
    if [[ "$(grep "wlan" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1)" ]] &>/dev/null; then
      TIMELINE_MBS="$(grep "Bit" "${LOG_DIR:?}"/node_data/system/iwconfig 2>&1 | awk '{ print $2 }' | egrep -o "[0-9]+.[0-9]+" 2>&1)"
      if [[ -z "$TIMELINE_MBS" ]] &>/dev/null; then
        TIMELINE_MBS="N/A "
      fi
      TIMELINE_SPEED="${TIMELINE_MBS:?}Mbs"
    elif [[ "$(grep "eth" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1)" ]] &>/dev/null; then
      TIMELINE_MBS="$(sudo ethtool "${TIMELINE_INTERFACE:?}" 2>&1 | grep "Speed" 2>&1 | awk '{ print $2 }' 2>&1 | tr -d '/' 2>&1)"
      TIMELINE_SPEED="${TIMELINE_MBS:?}"
    fi
    if [[ -z "$TIMELINE_MBS" ]] &>/dev/null; then
      # non responsive
      TIMELINE_MBS="${GR:?}0${N0:?}"
      TIMELINE_SPEED="${N0:?}"
    fi
    TIMELINE="Network ${TIMELINE_INTERFACE:?} ${TIMELINE_SPEED:?}"

    # cpu information
  elif [ "$TIMELINE_RANDOM" -eq "16" ] &>/dev/null; then
    TIMELINE=$(printf '%b' "$(cat "${LOG_DIR:?}"/node_data/system/cpuinfo 2>/dev/null)" 2>&1)

    # system uptime
  elif [ "$TIMELINE_RANDOM" -eq "17" ] &>/dev/null; then
    awk -F. '{print $1 }' /proc/uptime >"${LOG_DIR:?}"/node_data/system/system.uptime 2>&1
    TIMELINE_SYSTEM_UPTIME="$(cat "${LOG_DIR:?}"/node_data/system/system.uptime 2>/dev/null)"
    TIMELINE_SYS_UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(echo "${TIMELINE_SYSTEM_UPTIME:?}" 2>&1)/3600")) $(("$(echo "${TIMELINE_SYSTEM_UPTIME:?}" 2>&1)%3600/60")) $(("$(echo "${TIMELINE_SYSTEM_UPTIME:?}" 2>&1)%60")))
    TIMELINE_SYS_UPTIME_DAYS=$(echo "$(echo "${TIMELINE_SYSTEM_UPTIME:?}" 2>&1)/86400" 2>&1 | bc 2>/dev/null)
    TIMELINE_SYS_UPTIME="System (${TIMELINE_SYS_UPTIME_DAYS:?}d) ${GR:?}${TIMELINE_SYS_UPTIME:?}${N0:?}"
    TIMELINE="${TIMELINE_SYS_UPTIME:?}"

    # hardware model
  elif [ "$TIMELINE_RANDOM" -eq "18" ] &>/dev/null; then
    if [[ ! -f "${LOG_DIR:?}"/node_data/system/model ]] &>/dev/null; then
      cat /proc/device-tree/model 2>/dev/null | tr -d '\0' >"${LOG_DIR:?}"/node_data/system/model 2>&1
    fi
    TIMELINE_MODEL=$(cat "${LOG_DIR:?}"/node_data/system/model 2>/dev/null)
    if [[ -z "$TIMELINE_MODEL" ]] &>/dev/null; then
      TIMELINE="${GR:?}Unknown${N0:?}"
    fi
    TIMELINE="${TIMELINE_MODEL:?}"

  # uname - print system information
  elif [ "$TIMELINE_RANDOM" -eq "19" ] &>/dev/null; then
    TIMELINE="$(uname -a 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"

    # proof-of-stake percentage
  elif [ "$TIMELINE_RANDOM" -eq "20" ] &>/dev/null; then
    TIMELINE_CONF=$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    TIMELINE_INPUTS=$(grep -c "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent | awk '{ printf "%.0f\n", $1 }' 2>&1)
    TIMELINE="PoS $(echo "$(echo "100/$WALLET_ACTIVE*$TIMELINE_CONF" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')/$TIMELINE_INPUTS" | bc -l | awk '{ printf "%.2f\n", $1 }' 2>&1)%"
  fi
}

function timeline_quotes() {
  # wait on wallet w random quotes
  # random start number
  RANDOM_QUOTES=$((((RANDOM % 10) + 1)))
  # quotes - art of the deal
  if [ "$RANDOM_QUOTES" -eq "1" ] &>/dev/null; then
    TIMELINE="${GR}Think big${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "2" ] &>/dev/null; then
    TIMELINE="${GR}Maximize your options${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "3" ] &>/dev/null; then
    TIMELINE="${GR}Know your market${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "4" ] &>/dev/null; then
    TIMELINE="${GR}Use your leverage${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "5" ] &>/dev/null; then
    TIMELINE="${GR}Enhance your location${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "6" ] &>/dev/null; then
    TIMELINE="${GR}Get the word out${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "7" ] &>/dev/null; then
    TIMELINE="${GR}Fight back${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "8" ] &>/dev/null; then
    TIMELINE="${GR}Deliver the goods${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "9" ] &>/dev/null; then
    TIMELINE="${GR}Contain the costs${N0:?}"
  elif [ "$RANDOM_QUOTES" -eq "10" ] &>/dev/null; then
    TIMELINE="${GR}Have fun${N0:?}"
  fi
}

if [[ "$HIDE_BALANCE" -eq "0" ]] &>/dev/null; then
  if ! grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
    timeline_quotes
  else
    TIMELINE_RANDOM=$((((RANDOM % 2) + 1)))
    if [[ -z "$TIMELINE_RANDOM" ]] &>/dev/null; then
      TIMELINE="${CY}Please wait.${N0:?}"
    fi
    if [[ "$TIMELINE_RANDOM" -eq "1" ]] &>/dev/null; then
      timeline_quotes
      TIMELINE="$(echo "${TIMELINE:?}" 2>&1 | tail -1 2>&1)"
    elif [[ "$TIMELINE_RANDOM" -eq "2" ]] &>/dev/null; then
      timeline_stats
      TIMELINE="$(echo "${TIMELINE:?}" 2>&1 | tail -1 2>&1)"
    fi
  fi
else
  timeline_quotes
fi

# END
