#!/bin/bash

# By Rainman
# V20222101
# 0.1.7.4

source /home/pi/pitrump.conf
source /usr/local/bin/include/color

# date for logs
LOG_DATE=$(date '+%Y-%m-%dT%TZ' 2>&1)

# dependencies

# make sure screen is installed
if ! [ -x "$(command -v screen)" ] &>/dev/null; then
  echo "Installing screen"
  sudo apt-get install screen -y
fi

# make sure tor is installed
if ! [ -x "$(command -v tor)" ] &>/dev/null; then
  read -r -p "[YN] Using local proxy (tor)? y/n " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
    echo "Installing tor (proxy)"
    sudo apt-get install tor -y
    echo "Setup tor/wallet configurations!"
    # tor group, user configuration
    TORGROUP=$(stat -c '%G' /run/tor/control.authcookie 2>&1)
    sudo usermod -a -G "${TORGROUP:?}" "$(whoami)" 2>&1
    # check torrc configuration
    if ! grep "15110 127.0.0.1:15110" /etc/tor/torrc &>/dev/null; then
      cat >/tmp/torrc <<'EOF'
RunAsDaemon 1

ControlPort 9051
CookieAuthentication 1
CookieAuthFileGroupReadable 1

HiddenServiceDir /var/lib/tor/trumpcoin-service/
HiddenServicePort 15110 127.0.0.1:15110
EOF
      cat /tmp/torrc 2>/dev/null | sudo tee -a /etc/tor/torrc 2>&1
      # remove old files
      rm /tmp/torrc &>/dev/null
      # restart tor after configuration
      sudo service tor restart 2>&1
    fi
  fi
else
  echo "Installing tor (proxy)"
  sudo apt-get install tor -y
  # tor group, user configuration
  TORGROUP=$(stat -c '%G' /run/tor/control.authcookie 2>&1)
  sudo usermod -a -G "${TORGROUP:?}" "$(whoami)" 2>&1
  # restart tor after configuration
  sudo service tor restart 2>&1
fi

# make sure grepcidr is installed
if ! [ -x "$(command -v grepcidr)" ] &>/dev/null; then
  echo "Installing grepcidr"
  sudo apt-get install grepcidr -y
  echo
  read -r -p "[Ok] Press Enter to continue" </dev/tty
  echo
fi

# make sure uncomplicated firewall (ufw) is installed
if ! [ -x "$(command -v ufw)" ] &>/dev/null; then
  echo "Installing uncomplicated firewall (ufw)"
  # setup ufw with node ports 15110, 80, 22
  sudo apt-get install ufw -y
  sudo ufw allow 15110 comment "TrumpCoin mainnet"
  sudo ufw allow 80 comment "TrumpCoin Graphs"
  sudo ufw allow 22 comment "SSH"
  sudo ufw status
  echo "Using different ports?"
  echo "sudo ufw status & sudo ufw --help"
  echo
  read -r -p "[Ok] Press Enter to continue" </dev/tty
  echo
fi

if [[ -f /home/"$(whoami)"/pitrump.conf ]] &>/dev/null; then

  # install trumpcoin.conf, do this once
  if [[ ! -f "${WALLET_DIR:?}"/trumpcoin.conf ]] &>/dev/null; then

    # create random rpcuser & rpcpassword
    RANDOM_RPCN=$((((RANDOM % 9) + 1)))
    RANDOM_RPCL=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 8 2>&1 | rev 2>&1)

    echo "## trumpcoin.conf configuration file.
# Network-related settings:

# Run on the test network instead of the real trumpcoin network.
#testnet=1

# RPC credentials
rpcuser=${RANDOM_RPCL:?}${RANDOM_RPCN:?}
rpcpassword=${RANDOM_RPCN:?}${RANDOM_RPCL:?}
rpcallowip=${RPC_IP:?}
rpcbind=${RPC_IP:?}

# Connect via a SOCKS5 proxy (default: 127.0.0.1:9050)
proxy=${PROXY:?}

# Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)
onion=${PROXY:?}

# Tor control port to use if onion listening enabled (default: 127.0.0.1:9051)
torcontrol=${TOR_CONTROL:?}

# Tor onion externalip
externalip=${EXTERNALIP:?}

# Listening mode, enabled by default except when 'connect' is being used
listen=1
discover=1

# Maximum number of inbound+outbound connections. (default: 125)
maxconnections=1024

# can be commented out if you use the service script
daemon=1" >"${WALLET_DIR:?}"/trumpcoin.conf.tmp 2>&1
    mv "${WALLET_DIR:?}"/trumpcoin.conf.tmp "${WALLET_DIR:?}"/trumpcoin.conf 2>&1
    echo "Installed new wallet configuration! -> ${WALLET_DIR:?}/trumpcoin.conf"
  fi
else
  echo "Please run Install one more time!"
fi
clear

# look for screen session, if found, killall
if screen -list 2>&1 |
  grep -q "add_peers" &>/dev/null; then
  killall screen &>/dev/null
fi

# install/update
if [ ! -d "${LOG_DIR:?}"/node_data ] &>/dev/null; then
  mkdir "${LOG_DIR:?}"/node_data &>/dev/null
fi
if [ ! -d /usr/local/bin/include ] &>/dev/null; then
  sudo mkdir /usr/local/bin/include &>/dev/null
fi
# pitrump.conf, do this once
if [[ ! -f /home/"$(whoami)"/pitrump.conf ]] &>/dev/null; then
  cp /home/"$(whoami)"/trump-node/pitrump.conf ../
  echo "Please edit pitrump.conf"
fi
sudo cp -R /home/"$(whoami)"/trump-node/include/* /usr/local/bin/include/ 2>&1
sudo cp -R /home/"$(whoami)"/trump-node/pitrump /usr/local/bin/ 2>&1
sudo cp -R /home/"$(whoami)"/trump-node/include/update /usr/local/bin/ 2>&1
sudo cp -R /home/"$(whoami)"/trump-node/include/menu /usr/local/bin/ 2>&1
sudo chmod +x /usr/local/bin/update 2>&1
sudo chmod +x /usr/local/bin/menu 2>&1
rm "${LOG_DIR:?}"/add_peers &>/dev/null
sudo chown -R "$(whoami)":"$(whoami)" /usr/local/bin/pitrump /usr/local/bin/update /usr/local/bin/include /usr/local/bin/include/* 2>&1
sudo chown -R "$(whoami)":"$(whoami)" "${LOG_DIR:?}"/node_data 2>&1
LATEST_DATE=$(cd /home/"$(whoami)"/trump-node || exit && git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
LATEST_HEAD=$(cd /home/"$(whoami)"/trump-node || exit && git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
OLD_HEAD=$(grep "Update.Script" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $7 }' 2>&1 | tail -1 2>&1 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" 2>&1)
if [[ -z "$OLD_HEAD" ]] &>/dev/null; then
  # non responsive
  OLD_HEAD="${GR:?}[fsociety]${N0:?}"
fi
printf '%b' "Updating! ${GR:?}${OLD_HEAD:?}${N0:?} -> [${G1:?}$LATEST_HEAD${N0:?}] ${GR:?}$LATEST_DATE${N0:?}\n"
printf '%b' "${LOG_DATE:?} Status() Update.Script: Updating! ${GR:?}${OLD_HEAD:?}${N0:?} -> [${G1:?}$LATEST_HEAD${N0:?}] $LATEST_DATE${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
ls -lSh /usr/local/bin/include/

# END
