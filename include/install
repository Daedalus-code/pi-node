#!/bin/bash

################################################################################

# colors
B0='\e[34m'   # Blue
B1='\e[94m'   # Blue light
CY='\e[36m'   # Cyan
C1='\e[96m'   # Cyan light
G0='\e[32m'   # Green
G1='\e[92m'   # Green light
GR='\e[90m'   # Grey
N0='\033[0m'  # No color
P0='\e[0;35m' # Purple
P1='\e[1;35m' # Purple light
R0='\e[31m'   # Red
R1='\e[91m'   # Red light
Y0='\e[33m'   # Yellow
Y1='\e[93m'   # Yellow light
BLD='\e[1m'   # Bold\brighter

################################################################################

clear
printf '%b' "${Y0}${BLD}
F   R   E   E   D   O   M   C   O   I   N${B1}

@${N0}@${B1}@${N0}  @${B1}@${N0}@${B1}    @${N0}@${B1}@${N0}@${B1}@${N0}@${B1}    @${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}    @${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}
${B1}@${N0}@${B1}@${N0}@${B1} @${N0}@${B1}@${N0}   @${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}
${N0}@${B1}@${N0}!${B1}@${N0}!${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}!  ${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}!  ${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}!
!@!!@!@!   !@!  @!@   !@!  @!@   !@!${R1}
@!@ !!@!   @!@  !@!   @!@  !@!   @!!!:!${N0}
!@!  !!!   !@!  !!!   !@!  !!!   !!!!!:${R1}
!!:  !!!   !!:  !!!   !!:  !!!   !!:${N0}
:!:  !:!   :!:  !:!   :!:  !:!   :!:${R1}
::   ::    :::: ::    :::: ::    :: ::::${N0}
::    :     : :  :    :: :  :    : :: ::${R1}

${GR}The original TrumpCoin!${N0}

Spin up a Freedom node! ${GR}Version 1${N0}
\n"

################################################################################

printf '%b' "[${N0}!!${N0}] Check   : Installing..\n" && sleep 1
printf '%b' "[${N0}!!${N0}] Github  : Updating pi-node repository!\n"
printf '%b' "[${G1}OK${N0}] Github  : $(cd || exit && cd pi-node && git pull)\n"

################################################################################

# create install directory
printf '%b' "[${G1}OK${N0}] mkdir   : Creating install directory as root!\n"
sudo mkdir /etc/pi-node &>/dev/null
printf '%b' "[${G1}OK${N0}] chown   : Updating ownership as root for $(whoami)!\n"
sudo chown "$(whoami)":"$(whoami)" /etc/pi-node 2>/dev/null
printf '%b' "[${G1}OK${N0}] cp      : Installing pi-node dashbord as root!\n"
cd || exit && sudo cp pi-node/dash /usr/local/bin
printf '%b' "[${G1}OK${N0}] chmod   : Executable as root for $(whoami)!\n"
sudo chmod +x "$(whoami)":"$(whoami)" /usr/local/bin/dash 2>/dev/null
printf '%b' "[${G1}OK${N0}] chown   : Updating ownership as root for $(whoami)!\n"
sudo chown "$(whoami)":"$(whoami)" /usr/local/bin/dash 2>/dev/null
printf '%b' "[${G1}OK${N0}] cp -rf  : Installing directories as $(whoami)!\n"
cd || exit && cp -rf pi-node/include /etc/pi-node
# create configuration
printf '%b' "[${G1}OK${N0}] echo    : Creating configuration..\n"
echo "# pi-node Configuration #
  " >/etc/pi-node/config

################################################################################

VER_FOUND="$(uname -v)"
REL_FOUND="$(uname -r)"
MOD_FOUND="$(grep "Model" /proc/cpuinfo | awk -F: '{ print $2 }' | xargs)"

# if zero
if [[ -z "$MOD_FOUND" ]] &>/dev/null; then
  MOD_FOUND="$(grep "vendor_id" /proc/cpuinfo | awk -F: '{ print $2 }' | head -1 | xargs)"
fi

################################################################################

CPU_FOUND="$(grep "model name" /proc/cpuinfo | head -1 | awk -F: '{ print $2 }' | xargs)"

# if zero
if [[ -z "$CPU_FOUND" ]] &>/dev/null; then
  CPU_FOUND="$(lscpu | grep "Model name" | awk -F: '{ print $2 }' | xargs)"
fi

################################################################################

BOG_FOUND="$(egrep "bogomips|BogoMIPS" /proc/cpuinfo | awk '{ print $NF }' | head -1)"
COR_FOUND="$(egrep -c "bogomips|BogoMIPS" /proc/cpuinfo)"
MEM_FOUND="$(echo "$(echo "$(grep "MemTotal" /proc/meminfo | awk '{ print $2 }')+"$(grep "SwapTotal" /proc/meminfo | awk '{ print $2 }') | bc -l 2>/dev/null)/1024" | bc 2>/dev/null) MB"
HDD_FOUND="$(df -h --total | tail -1 | xargs | tr -d '-')"
HDD_TOTAL="$(echo "$HDD_FOUND" | awk '{ print $2 }')"
HDD_FREE="$(echo "$HDD_FOUND" | awk '{ print $4 }')"

################################################################################
# bogomips
################################################################################

# if found
if [[ -n "$BOG_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Score   : BogoMIPS: ${CY}$BOG_FOUND${N0}\n"
else
  printf '%b' "[${GR}!!${N0}] Score   : Error\n" && exit
fi

################################################################################
# kernal release version
################################################################################

# if found
if [[ -n "$VER_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Version : $VER_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] System  : Error\n" && exit
fi

# if found
if [[ -n "$REL_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Release : $REL_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] System  : Error\n" && exit
fi

################################################################################
# model
################################################################################

# if found
if [[ -n "$MOD_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Model   : $MOD_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] Model   : ${GR}Not found${N0}\n"
fi

################################################################################
# cpu
################################################################################

# if found
if [[ -n "$CPU_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] CPU     : $CPU_FOUND $COR_FOUND Core(s)\n"
else
  printf '%b' "[${GR}!!${N0}] CPU     : Error\n" && exit
fi

################################################################################
# memory
################################################################################

# if found
if [[ -n "$MEM_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Memory  : $MEM_FOUND\n"
  # if not enough memory
  if [[ "$(echo "$MEM_FOUND" | awk '{ print $1 }')" -lt "2000" ]] &>/dev/null; then
    printf '%b' "[${GR}!!${N0}] Memory  : Not enough memory!\n" && sleep 1
    printf '%b' "[${G1}OK${N0}] mkswap  : Creating 2G Swap..\n"
    # create 2G swap ###########################################################
    sudo fallocate -l 2G /swapfile
    sudo chmod 600 /swapfile
    sudo mkswap /swapfile
    sudo swapon /swapfile
    ############################################################################
    # if swapfile is not already in /etc/fstab, append it
    if ! grep -q "^/swapfile swap swap defaults 0 0" /etc/fstab; then
      printf '%b' "[${G1}OK${N0}] echo    : Updating fstab..\n"
      echo "/swapfile swap swap defaults 0 0" | sudo tee -a /etc/fstab >/dev/null
    fi
    # backup fstab before modification
    sudo cp /etc/fstab /etc/fstab.bak
    # format `/etc/fstab` properly using `column -t`
    sudo column -t /etc/fstab | sudo tee /etc/fstab >/dev/null
    # output data
    printf '%b' "[${G1}OK${N0}] fstab   : Output data

  $(cat /etc/fstab 2>/dev/null | column -t)
  \n"
  fi
else
  printf '%b' "[${GR}!!${N0}] Memory  : Error\n" && exit
fi

################################################################################
# hard drive
################################################################################

# if found
if [[ -n "$HDD_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Drive   : Total $HDD_TOTAL Free $HDD_FREE\n"
  # if not enough space
  if [[ "$(echo "$HDD_FREE" | tr -d 'G')" -lt "7" ]] &>/dev/null; then
    printf '%b' "[${GR}!!${N0}] Drive   : Not enough space..\n" && exit
  fi
else
  printf '%b' "[${GR}!!${N0}] Drive   : Error\n" && exit
fi

################################################################################
# wallet files
################################################################################

bash /etc/pi-node/include/find

################################################################################
# missing wallet daemon or client
################################################################################

# if VPS already, skip this
if [[ -d "$HOME"/freed1 ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Console : This is a VPS Server already! PID: ${G1}$(pidof freedomcoind)${N0}\n"
else
  # download wallet
  bash /etc/pi-node/include/download

  ##############################################################################
  # wallet configuration
  ##############################################################################

  # old pi-node data configuration
  DATA_DIR="$(grep "DATA_DIR=" /usr/local/bin/include/pinode/pinode.conf 2>/dev/null | awk -F= '{ print $2 }' | awk '{ print $1 }' | tr -d '"')"
  if [[ -n "$DATA_DIR" ]] &>/dev/null; then
    printf '%b' "[${R1}!!${N0}] Pi-Node : Old data directory found!\n"
    printf '%b' "[${R1}!!${N0}] Console : Please install this on a fresh system, remember to backup wallet.dat!\n"
    printf '%b' "[${R1}!!${N0}] Console : Exiting..\n"
    exit
  fi

  # if zero
  if [[ -z "$DATA_DIR" ]] &>/dev/null; then
    # update configuration
    echo "DATA_DIR=/home/$(whoami)/.trumpcoin" >>/etc/pi-node/config
    echo "WALLET_LOG_DIR=/home/$(whoami)/.trumpcoin" >>/etc/pi-node/config
    echo "WALLET_CONFIG=/home/$(whoami).trumpcoin/trumpcoin.conf" >>/etc/pi-node/config
  fi

  ##############################################################################

  # not installed
  if ! [ -x "$(command -v tor)" ]; then
    printf '%b' "[${G1}OK${N0}] Proxy   : Installing tor!\n"
    sudo apt-get install tor -y
  fi

  # if missing
  if [[ "$(grep -c "FreedomCoin-service" /etc/tor/torrc)" -eq "0" ]] &>/dev/null; then
    # update tor configuration
    printf '%b' "[${G1}OK${N0}] Proxy   : Updating configuration!\n"
    echo "HiddenServiceDir /var/lib/tor/FreedomCoin-service/
HiddenServicePort 15110 127.0.0.1:15110" | sudo tee -a /etc/tor/torrc >/dev/null
    # update tor configuration
    printf '%b' "[${G1}OK${N0}] Proxy   : Restarting tor!\n"
    sudo service tor@default restart
  fi

  # if zero
  if [[ -z "$PROXY" ]] &>/dev/null; then
    PROXY="127.0.0.1:9050"
  fi

  # update configuration
  echo "PROXY=$PROXY" >>/etc/pi-node/config

  ##############################################################################

  # fetch lan from ifconfig
  ifconfig | grep "inet" | egrep -v "prefix|127" | awk '{ print $2 }' >/tmp/lanip.tmp
  printf '%b' "[${G1}OK${N0}] LAN     : ${N0}$(cat /tmp/lanip.tmp 2>/dev/null)${N0}\n"
  # fetch wan from whatismyip
  curl -s http://whatismyip.akamai.com/ >/tmp/wanip.tmp
  printf '%b' "[${G1}OK${N0}] WAN     : ${CY}$(cat /tmp/wanip.tmp 2>/dev/null)${N0}\n"
  # fetch onion from hidden service
  sudo cat /var/lib/tor/FreedomCoin-service/hostname >/etc/pi-node/hostname.onion
  printf '%b' "[${G1}OK${N0}] Proxy   : ${P1}$(cat /etc/pi-node/hostname.onion 2>/dev/null)${N0}\n"

  ##############################################################################
  # bootstrap
  ##############################################################################

  bash /etc/pi-node/include/bootstrap

  ##############################################################################
  # start wallet daemon
  ##############################################################################

  bash /etc/pi-node/include/start
fi

# END
