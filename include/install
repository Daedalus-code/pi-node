#!/bin/bash

# By Rainman
# V20220603
# 0.3.2.3

# create directories, ruled by configuration
if [ ! -d /usr/local/bin/include ] &>/dev/null; then
  sudo mkdir /usr/local/bin/include &>/dev/null
fi

if [[ ! -f /usr/local/bin/include/color ]] &>/dev/null; then
  cp /home/"$(whoami)"/pi-node/include/color /tmp/color.tmp &>/dev/null
  sudo mv /tmp/color.tmp /usr/local/bin/include/color 2>/dev/null
fi
source /usr/local/bin/include/color 2>&1

if [[ ! -f /usr/local/bin/include/pinode.conf ]] &>/dev/null; then
  cp /home/"$(whoami)"/pi-node/pinode.conf /tmp/pinode.conf.tmp &>/dev/null
  sudo mv /tmp/pinode.conf.tmp /usr/local/bin/include/pinode.conf &>/dev/null
  printf '%b' "[${R1:?}!!${N0:?}] Please edit pinode.conf before going any further! (fresh install)\n"
  read -r -p "[Ok] Press Enter to edit pinode.conf!" </dev/tty
  clear
  sudo nano /usr/local/bin/include/pinode.conf
  echo
  read -r -p "[Ok] Press Enter to continue" </dev/tty
  echo
fi
source /usr/local/bin/include/pinode.conf

if uname -a 2>&1 | grep "Microsoft" &>/dev/null; then
  printf '%b' "${GR:?}No support for Microsoft.${N0:?}\n"
  printf '%b' "${R1:?}DELETE this from system!${N0:?}\n"
  exit
fi

if [ ! -d "${LOG_DIR:?}"/node_data ] &>/dev/null; then
  mkdir "${LOG_DIR:?}"/node_data &>/dev/null
fi
if [ ! -d "${LOG_DIR:?}"/node_data/stats ] &>/dev/null; then
  mkdir "${LOG_DIR:?}"/node_data/stats &>/dev/null
fi

# date for logs
LOG_DATE=$(LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' 2>&1)

# dependencies

# make sure screen is installed
if ! [ -x "$(command -v screen)" ] &>/dev/null; then
  echo "Installing screen"
  sudo apt-get install screen -y
  sudo /etc/init.d/screen-cleanup start
  echo
  read -r -p "[Ok] screen installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure xinput is installed
if ! [ -x "$(command -v xinput)" ] &>/dev/null; then
  echo "Installing xinput"
  sudo apt-get install xinput -y
  echo
  read -r -p "[Ok] xinput installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure zip is installed
if ! [ -x "$(command -v zip)" ] &>/dev/null; then
  echo "Installing zip"
  sudo apt-get install zip -y
  echo
  read -r -p "[Ok] zip installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure unzip is installed
if ! [ -x "$(command -v unzip)" ] &>/dev/null; then
  echo "Installing unzip"
  sudo apt-get install unzip -y
  echo
  read -r -p "[Ok] unzip installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure ethtool is installed
if ! [ -x "$(command -v ethtool)" ] &>/dev/null; then
  echo "Installing ethtool"
  sudo apt-get install ethtool -y
  echo
  read -r -p "[Ok] ethtool installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure bc is installed
if ! [ -x "$(command -v bc)" ] &>/dev/null; then
  echo "Installing bc"
  sudo apt-get install bc -y
  echo
  read -r -p "[Ok] bc installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure cron is installed
if ! [ -x "$(command -v cron)" ] &>/dev/null; then
  echo "Installing cron"
  sudo apt-get install cron -y
  echo
  read -r -p "[Ok] cron installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure git is installed
if ! [ -x "$(command -v git)" ] &>/dev/null; then
  echo "Installing git"
  sudo apt-get install git -y
  echo
  read -r -p "[Ok] git installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure torsocks is installed
if ! [ -x "$(command -v torsocks)" ] &>/dev/null; then
  echo "Installing torsocks"
  sudo apt-get install torsocks -y
  echo
  read -r -p "[Ok] torsocks installed! Press Enter to continue" </dev/tty
  echo
fi

# get wallet port, do this once
if [[ ! -f "${WALLET_DIR:?}"/wallet_port ]] &>/dev/null; then
  printf '%b' "[??] Enter wallet Port ${G1:?}> ${N0:?}"
  read -r PORT
  echo "${PORT:?}" >"${WALLET_DIR:?}"/wallet_port 2>&1
  if [[ -z "$PORT" ]] &>/dev/null; then
    # empty, exit
    printf '%b' "[${R1:?}!!${N0:?}] Empty, try again\n"
    exit
  fi
else
  PORT="$(cat "${WALLET_DIR:?}"/wallet_port 2>/dev/null)"
fi

# make sure tor is installed
if ! [ -x "$(command -v tor)" ] &>/dev/null; then

  echo "Installing tor (proxy)"
  sudo apt-get install tor -y
  echo "Setup tor/wallet configurations!"
  # tor group, user configuration
  TORGROUP=$(stat -c '%G' /run/tor/control.authcookie 2>/dev/null)
  sudo usermod -a -G "${TORGROUP:?}" "$(whoami)" 2>/dev/null
  read -r -p "[YN] Public .onion web server? y/n " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
    HIDDEN_SERVICE="HiddenServicePort 80 127.0.0.1:80"
  else
    HIDDEN_SERVICE="#HiddenServicePort 80 127.0.0.1:80"
  fi

  # check torrc configuration for service
  if ! grep "${WALLET_NAME:?}-service" /etc/tor/torrc &>/dev/null; then
    echo "RunAsDaemon 1

ControlPort 9051
CookieAuthentication 1
CookieAuthFileGroupReadable 1

HiddenServiceDir /var/lib/tor/${WALLET_NAME:?}-service/
HiddenServicePort ${PORT:?} 127.0.0.1:${PORT:?}
${HIDDEN_SERVICE:?}
" >/tmp/torrc 2>&1
    cat /tmp/torrc 2>/dev/null | sudo tee -a /etc/tor/torrc 2>&1
    # remove old files
    rm /tmp/torrc &>/dev/null
    # restart tor after configuration
    sudo service tor restart 2>&1
  fi
  echo
  read -r -p "[Ok] tor installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure grepcidr is installed
if ! [ -x "$(command -v grepcidr)" ] &>/dev/null; then
  echo "Installing grepcidr"
  sudo apt-get install grepcidr -y
  echo
  read -r -p "[Ok] grepcidr installed! Press Enter to continue" </dev/tty
  echo
fi

# make sure uncomplicated firewall (ufw) is installed
if ! [ -x "$(command -v ufw)" ] &>/dev/null; then
  echo "Installing uncomplicated firewall (ufw)"
  # setup ufw with node ports ${port:?}, 80, 22
  sudo apt-get install ufw -y
  sudo ufw allow "${PORT:?}" comment "${WALLET_NAME:?} mainnet"
  sudo ufw allow 80 comment "${WALLET_NAME:?} Graphs"
  sudo ufw allow 22 comment "SSH"
  sudo ufw status
  echo "Using different ports?"
  echo "sudo ufw status & sudo ufw --help"
  echo
  read -r -p "[Ok] ufw installed! Press Enter to continue" </dev/tty
  echo
fi

if ! grep "configuration" "${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" &>/dev/null; then
  # wrong config
  rm "${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" &>/dev/null
fi

# install wallet configuration, do this once
if [[ ! -f "${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" ]] &>/dev/null; then

  mkdir "${WALLET_DIR:?}" &>/dev/null

  # create random rpcuser & rpcpassword
  RANDOM_RPCL=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 4 2>&1 | rev 2>&1)
  RANDOM_RPCN=$(echo "$RANDOM_RPCL" 2>&1 | rev 2>&1)

  # get proxy (tor) hostname with root
  EXTERNALIP=$(sudo cat /var/lib/tor/"$(echo "${WALLET_DAEMON:?}" 2>&1 | sed 's/.$//' 2>&1)"-service/hostname 2>/dev/null)

  if [[ -z "$EXTERNALIP" ]] &>/dev/null; then
    # non responsive
    EXTERNALIP="#externalip=PLEASE_EDIT"
  else
    EXTERNALIP="externalip=${EXTERNALIP:?}"
  fi

  echo "## '${WALLET_NAME:?}' configuration file.
# Network-related settings:

# Run on the test network instead of the real ${WALLET_NAME:?} network.
#testnet=1

# RPC credentials
rpcuser=${RANDOM_RPCL:?}${RANDOM_RPCN:?}
rpcpassword=${RANDOM_RPCN:?}${RANDOM_RPCL:?}
rpcallowip=${RPC_IP:?}
rpcbind=${RPC_IP:?}

# Connect via a SOCKS5 proxy (default: 127.0.0.1:9050)
proxy=${PROXY:?}

# Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)
onion=${PROXY:?}

# Tor control port to use if onion listening enabled (default: 127.0.0.1:9051)
torcontrol=${TOR_CONTROL:?}

# Tor onion externalip
${EXTERNALIP:?}

# Listening mode, enabled by default except when 'connect' is being used
listen=1
discover=1

# Maximum number of inbound+outbound connections. (default: 125)
maxconnections=${MAX_P2P:?}" >"${WALLET_DIR:?}"/"${WALLET_CONFIG:?}".tmp 2>&1
  mv "${WALLET_DIR:?}"/"${WALLET_CONFIG:?}".tmp "${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" 2>&1
  printf '%b' "[${G1:?}Ok${N0:?}] Installed new wallet configuration! -> ${WALLET_DIR:?}/${WALLET_CONFIG:?}\n"
fi

# create screen list
LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/stats/screens 2>&1

# look for screen session add_peers, if found quit it
if cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "add_peers" &>/dev/null; then
  screen -X -S add_peers quit &>/dev/null
fi

sudo cp -R /home/"$(whoami)"/pi-node/include/* /usr/local/bin/include/ &>/dev/null
sudo cp -R /home/"$(whoami)"/pi-node/pinode /usr/local/bin/ &>/dev/null
sudo cp -R /home/"$(whoami)"/pi-node/include/update /usr/local/bin/ &>/dev/null
sudo cp -R /home/"$(whoami)"/pi-node/include/menu /usr/local/bin/ &>/dev/null

sudo chmod +x /usr/local/bin/pinode 2>&1
sudo chmod +x /usr/local/bin/update 2>&1
sudo chmod +x /usr/local/bin/menu 2>&1

rm "${LOG_DIR:?}"/add_peers &>/dev/null

sudo chown -R "$(whoami)":"$(whoami)" /usr/local/bin/pinode /usr/local/bin/update /usr/local/bin/include /usr/local/bin/include/* 2>&1
sudo chown -R "$(whoami)":"$(whoami)" "${LOG_DIR:?}"/node_data 2>&1

cd /home/"$(whoami)"/pi-node || exit && git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S' >"${LOG_DIR:?}"/node_data/repo 2>&1
cd /home/"$(whoami)"/pi-node || exit && git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 >>"${LOG_DIR:?}"/node_data/repo 2>&1

LATEST_DATE=$(head -1 "${LOG_DIR:?}"/node_data/repo 2>&1)
LATEST_HEAD=$(tail -1 "${LOG_DIR:?}"/node_data/repo 2>&1)

OLD_HEAD=$(grep "Update.Script" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $7 }' 2>&1 | tail -1 2>&1 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" 2>&1)

if [[ -z "$OLD_HEAD" ]] &>/dev/null; then
  # non responsive (fsociety)
  OLD_HEAD="${GR:?}[fsociety]${N0:?}"
fi

# updating repository
if [[ -f /tmp/updating ]] &>/dev/null; then
  INSTALL_UPDATE="${G1:?}Updating${N0:?}"
else # installing repository
  INSTALL_UPDATE="${CY:?}Installing${N0:?}"
fi

printf '%b' "[${Y1:?}!${C1:?}?${N0:?}] ${INSTALL_UPDATE:?} pi-node!\n"
rm /tmp/updating &>/dev/null
sleep 2

PLEASE=$(printf '%b' "[${G1:?}Ok${N0:?}] Please use ${CY:?}update${N0:?} & ${CY:?}menu${N0:?} to continue the install.\n" 2>&1)

clear
printf '%b' "[${G1:?}Ok${N0:?}] Updating! ${GR:?}${OLD_HEAD:?}${N0:?} -> [${G1:?}$LATEST_HEAD${N0:?}] ${GR:?}$LATEST_DATE${N0:?}\n"
printf '%b' "${LOG_DATE:?} Status() Update.Script: Updating! ${GR:?}${OLD_HEAD:?}${N0:?} -> [${G1:?}$LATEST_HEAD${N0:?}] $LATEST_DATE${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
ls -lSh /usr/local/bin/include/
ls -lSh /usr/local/bin/
echo "$PLEASE"

# END
