#!/bin/bash

################################################################################

# colors
B0='\e[34m'   # Blue
B1='\e[94m'   # Blue light
CY='\e[36m'   # Cyan
C1='\e[96m'   # Cyan light
G0='\e[32m'   # Green
G1='\e[92m'   # Green light
GR='\e[90m'   # Grey
N0='\033[0m'  # No color
P0='\e[0;35m' # Purple
P1='\e[1;35m' # Purple light
R0='\e[31m'   # Red
R1='\e[91m'   # Red light
Y0='\e[33m'   # Yellow
Y1='\e[93m'   # Yellow light

################################################################################

clear
printf '%b' "${Y0}
F   R   E   E   D   O   M   C   O   I   N${B1}
@${N0}@${B1}@${N0}  @${B1}@${N0}@${B1}    @${N0}@${B1}@${N0}@${B1}@${N0}@${B1}    @${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}    @${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}
${B1}@${N0}@${B1}@${N0}@${B1} @${N0}@${B1}@${N0}   @${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}@${B1}@${N0}
${N0}@${B1}@${N0}!${B1}@${N0}!${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}!  ${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}!  ${B1}@${N0}@${B1}@   ${N0}@${B1}@${N0}!
!@!!@!@!   !@!  @!@   !@!  @!@   !@!${R1}
@!@ !!@!   @!@  !@!   @!@  !@!   @!!!:!${N0}
!@!  !!!   !@!  !!!   !@!  !!!   !!!!!:${R1}
!!:  !!!   !!:  !!!   !!:  !!!   !!:${N0}
:!:  !:!   :!:  !:!   :!:  !:!   :!:${R1}
::   ::    :::: ::    :::: ::    :: ::::${N0}
::    :     : :  :    :: :  :    : :: ::${R1}
${N0}
Spin up a Freedom node! ${GR}Version 1${N0}
\n"

################################################################################

# create install directory
if [[ ! -d /etc/pi-node || ! -d /etc/pi-node/include || ! -f /etc/pi-node/dash ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Mkdir   : Creating install directory as root!\n"
  sudo mkdir /etc/pi-node &>/dev/null
  printf '%b' "[${G1}OK${N0}] Chown   : Updating ownership as $(whoami)!\n"
  sudo chown "$(whoami)":"$(whoami)" /etc/pi-node
  printf '%b' "[${G1}OK${N0}] Install : Installing pi-node dashbord!\n"
  cd || exit && cp pi-node/dash /etc/pi-node
  printf '%b' "[${G1}OK${N0}] Install : Installing directories as $(whoami)!\n"
  cd || exit && cp -rfv pi-node/include /etc/pi-node | column -t
fi

################################################################################

# if found
if [[ -f /etc/pi-node/config ]] &>/dev/null; then
  # new configuration
  printf '%b' "[${N0}!!${N0}] Config  : Reset configuration? y/n "
  read -r -p "" -n 1 -r -s
  echo
  # if yes/no
  if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
    printf '%b' "[${N0}!!${N0}] Reset   : Deleting old files and directories!\n"
    rm -r /etc/pi-node &>/dev/null
  fi
else
  # create new configuration
  printf '%b' "[${G1}OK${N0}] Echo    : Creating new configuration!\n"
  echo "# pi-node Configuration #
" >/etc/pi-node/config
fi

################################################################################

printf '%b' "[${N0}!!${N0}] Check   : Install..\n" && sleep 1
printf '%b' "[${N0}!!${N0}] Github  : Updating pi-node repository!\n"
printf '%b' "[${G1}OK${N0}] Github  : $(cd || exit && cd pi-node && git pull)\n"

################################################################################

VER_FOUND="$(uname -v)"
REL_FOUND="$(uname -r)"
MOD_FOUND="$(grep "Model" /proc/cpuinfo | awk -F: '{ print $2 }' | xargs)"
CPU_FOUND="$(grep "model name" /proc/cpuinfo | head -1 | awk -F: '{ print $2 }' | xargs)"
COR_FOUND="$(egrep -c "bogomips|BogoMIPS" /proc/cpuinfo)"
MEM_FOUND="$(echo "$(echo "$(grep "MemTotal" /proc/meminfo | awk '{ print $2 }')+"$(grep "SwapTotal" /proc/meminfo | awk '{ print $2 }') | bc -l 2>/dev/null)/1024" | bc 2>/dev/null) MB"
HDD_FOUND="$(df -h --total | tail -1 | xargs | tr -d '-')"

################################################################################

# find wallet files
bash /etc/pi-node/include/find

################################################################################
# kernal release version
################################################################################

# if found
if [[ -n "$VER_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Version : $VER_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] System  : Error\n" && exit
fi

# if found
if [[ -n "$REL_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Release : $REL_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] System  : Error\n" && exit
fi

################################################################################
# model
################################################################################

# if found
if [[ -n "$MOD_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Model   : $MOD_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] Model   : ${GR}Not found${N0}\n"
fi

################################################################################
# cpu
################################################################################

# if found
if [[ -n "$CPU_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] CPU     : $CPU_FOUND $COR_FOUND Core(s)\n"
else
  printf '%b' "[${GR}!!${N0}] CPU     : Error\n" && exit
fi

################################################################################
# memory
################################################################################

# if found
if [[ -n "$MEM_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Memory  : $MEM_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] Memory  : Error\n" && exit
fi

################################################################################
# hard drive
################################################################################

# if found
if [[ -n "$HDD_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Drive   : $HDD_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] Drive   : Error\n" && exit
fi

# END
