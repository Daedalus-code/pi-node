#!/bin/bash

# By Rainman
# V20222703
# 0.2.1.0

# create script directories
sudo mkdir /usr/local/bin/include &>/dev/null
sudo mkdir /usr/local/bin/include/pinode &>/dev/null

if [[ ! -f /usr/local/bin/include/pinode/pinode.conf ]] &>/dev/null; then
  cp /home/"$(whoami)"/pi-node/pinode.conf /tmp/pinode.conf.tmp &>/dev/null
  sudo mv /tmp/pinode.conf.tmp /usr/local/bin/include/pinode/pinode.conf &>/dev/null
fi
source /usr/local/bin/include/pinode/pinode.conf 2>&1

# create temp directories, ruled by configuration
mkdir "${LOG_DIR:?}"/node_data &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/system &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/peers &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/data &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/client &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/client/tmp &>/dev/null

if [[ ! -f /usr/local/bin/include/pinode/color ]] &>/dev/null; then
  cp /home/"$(whoami)"/pi-node/include/color /tmp/color.tmp &>/dev/null
  sudo mv /tmp/color.tmp /usr/local/bin/include/pinode/color &>/dev/null
fi
source /usr/local/bin/include/pinode/color 2>&1

LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/system/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

clear

if uname -a 2>&1 | grep "Microsoft" &>/dev/null; then
  printf '%b' "${GR:?}No support for Microsoft.${N0:?}\n"
  exit
fi

cd /home/"$(whoami)"/pi-node || exit && git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S' >"${LOG_DIR:?}"/node_data/repo 2>&1
cd /home/"$(whoami)"/pi-node || exit && git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 >>"${LOG_DIR:?}"/node_data/repo 2>&1

# updating repository
if [[ -f /tmp/updating ]] &>/dev/null; then
  INSTALL_UPDATE="${G1:?}Updating${N0:?}"
else # installing repository
  INSTALL_UPDATE="${CY:?}Installing${N0:?}"
fi

printf '%b' "[${Y1:?}!${C1:?}?${N0:?}] ${INSTALL_UPDATE:?} pi-node!\n"
rm /tmp/updating &>/dev/null
sleep 1

if [ ! -d /usr/local/bin/include/pinode ] &>/dev/null; then
  sudo mkdir /usr/local/bin/include/pinode &>/dev/null
fi

# get wallet port, do this once
if [[ ! -f "${DATA_DIR:?}"/wallet_port ]] &>/dev/null; then
  printf '%b' "[??] Enter Wallet Port ${G1:?}> ${N0:?}"
  read -r WALLET_PORT
  echo "${WALLET_PORT:?}" >"${DATA_DIR:?}"/wallet_port 2>&1
  if [[ -z "$WALLET_PORT" ]] &>/dev/null; then
    exit
  fi
fi

# get masternode collateral, do this once
if [[ ! -f "${DATA_DIR:?}"/masternode_collateral ]] &>/dev/null; then
  printf '%b' "[??] Enter Masternode Collateral ${G1:?}> ${N0:?}"
  read -r WALLET_COLLATERAL
  echo "${WALLET_COLLATERAL:?}" >"${DATA_DIR:?}"/masternode_collateral 2>&1
  if [[ -z "$WALLET_COLLATERAL" ]] &>/dev/null; then
    exit
  fi
fi

# make sure screen is installed
if ! [ -x "$(command -v screen)" ] &>/dev/null; then
  echo "Installing screen"
  sudo apt-get install screen -y
  sudo /etc/init.d/screen-cleanup start
fi

# make sure xinput is installed
if ! [ -x "$(command -v xinput)" ] &>/dev/null; then
  echo "Installing xinput"
  sudo apt-get install xinput -y
fi

# make sure zip is installed
if ! [ -x "$(command -v zip)" ] &>/dev/null; then
  echo "Installing zip"
  sudo apt-get install zip -y
fi

# make sure unzip is installed
if ! [ -x "$(command -v unzip)" ] &>/dev/null; then
  echo "Installing unzip"
  sudo apt-get install unzip -y
fi

# make sure ethtool is installed
if ! [ -x "$(command -v ethtool)" ] &>/dev/null; then
  echo "Installing ethtool"
  sudo apt-get install ethtool -y
fi

# make sure bc is installed
if ! [ -x "$(command -v bc)" ] &>/dev/null; then
  echo "Installing bc"
  sudo apt-get install bc -y
fi

# make sure cron is installed
if ! [ -x "$(command -v cron)" ] &>/dev/null; then
  echo "Installing cron"
  sudo apt-get install cron -y
fi

# make sure git is installed
if ! [ -x "$(command -v git)" ] &>/dev/null; then
  echo "Installing git"
  sudo apt-get install git -y
fi

# make sure torsocks is installed
if ! [ -x "$(command -v torsocks)" ] &>/dev/null; then
  echo "Installing torsocks"
  sudo apt-get install torsocks -y
fi

# make sure tor is installed
if ! [ -x "$(command -v tor)" ] &>/dev/null; then
  echo "Installing tor (proxy)"
  sudo apt-get install tor -y
  # tor group, user configuration
  TORGROUP=$(stat -c '%G' /run/tor/control.authcookie 2>/dev/null)
  sudo usermod -a -G "${TORGROUP:?}" "$(whoami)" 2>/dev/null
  # check torrc configuration for service
  if ! grep "${WALLET_NAME:?}-service" /etc/tor/torrc &>/dev/null; then
    echo "RunAsDaemon 1

ControlPort 9051
CookieAuthentication 1
CookieAuthFileGroupReadable 1

HiddenServiceDir /var/lib/tor/${WALLET_NAME:?}-service/
HiddenServicePort ${PORT:?} 127.0.0.1:${PORT:?}
#HiddenServicePort 80 127.0.0.1:80
" >/tmp/torrc 2>&1
    cat /tmp/torrc 2>/dev/null | sudo tee -a /etc/tor/torrc 2>&1
    # remove old files
    rm /tmp/torrc &>/dev/null
    # restart tor after configuration
    sudo service tor restart 2>&1
  fi
fi

sudo cp -R /home/"$(whoami)"/pi-node/include/* /usr/local/bin/include/pinode &>/dev/null
sudo cp -R /home/"$(whoami)"/pi-node/pinode /usr/local/bin/ &>/dev/null
sudo cp -R /home/"$(whoami)"/pi-node/include/update /usr/local/bin/ &>/dev/null
sudo cp -R /home/"$(whoami)"/pi-node/include/helpme /usr/local/bin/ &>/dev/null
sudo cp -R /home/"$(whoami)"/pi-node/include/menu /usr/local/bin/ &>/dev/null
echo "# wait on node (daemon) to start
until pidof ${WALLET_DAEMON:?} 2>&1 | wc -w 2>&1 | egrep 1 &>/dev/null; do
  RANDOM_ID=$((((RANDOM % 9999) + 1)))
  RANDOM_PID=$((((RANDOM % ${RANDOM_ID:?}) + 1)))
  clear
  printf '%b' waiting on wallet (${GR:?}${RANDOM_PID:?}${N0:?}) daemon..${N0:?}
  sleep 2
done
clear && tail -f ${WALLET_LOG_DIR:?}/debug.log" >/tmp/log.tmp 2>/dev/null
sudo mv /tmp/log.tmp /usr/local/bin/log &>/dev/null

sudo chmod +x /usr/local/bin/pinode /usr/local/bin/update /usr/local/bin/helpme /usr/local/bin/menu /usr/local/bin/log 2>&1

sudo chown -R "$(whoami)":"$(whoami)" /usr/local/bin/pinode /usr/local/bin/update /usr/local/bin/include /usr/local/bin/include/pinode 2>&1
sudo chown -R "$(whoami)":"$(whoami)" "${LOG_DIR:?}"/node_data 2>&1

LATEST_DATE=$(head -1 "${LOG_DIR:?}"/node_data/repo 2>&1)
LATEST_HEAD=$(tail -1 "${LOG_DIR:?}"/node_data/repo 2>&1)
OLD_HEAD=$(grep "Update.Script" "${WALLET_LOG_DIR:?}"/debug.log 2>/dev/null | awk '{ print $7 }' 2>&1 | tail -1 2>&1 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" 2>&1)

if [[ -z "$OLD_HEAD" ]] &>/dev/null; then
  # non responsive (fsociety)
  OLD_HEAD="${GR:?}[fsociety]${N0:?}"
fi

LATEST_DATE=$(head -1 "${LOG_DIR:?}"/node_data/repo 2>&1)
LATEST_HEAD=$(tail -1 "${LOG_DIR:?}"/node_data/repo 2>&1)

PLEASE=$(printf '%b' "[${G1:?}Ok${N0:?}] Please use ${CY:?}update${N0:?} | ${Y1:?}helpme${N0:?} | ${CY:?}menu${N0:?} to continue the install.\n" 2>&1)
printf '%b' "[${G1:?}Ok${N0:?}] Updating! ${GR:?}${OLD_HEAD:?}${N0:?} -> [${G1:?}$LATEST_HEAD${N0:?}] ${GR:?}$LATEST_DATE${N0:?}\n"
printf '%b' "${LOG_DATE:?} Status() Update.Script: Updating! ${GR:?}${OLD_HEAD:?}${N0:?} -> [${G1:?}$LATEST_HEAD${N0:?}] $LATEST_DATE${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

ls -lSh /usr/local/bin/include/pinode 2>&1
ls -lSh /usr/local/bin/include/ 2>&1
ls -lSh /usr/local/bin/ 2>&1 | egrep -o ".* pinode|.* update|total [0-9]+[Aa-Zz]+" 2>/dev/null
rm "${LOG_DIR:?}"/node_data/wallet/data/screens &>/dev/null
rm "${LOG_DIR:?}"/read_* &>/dev/null
rm "${LOG_DIR:?}"/add_* &>/dev/null
screen -X -S read_mempool quit &>/dev/null
screen -X -S run_data quit &>/dev/null
screen -X -S add_peers quit &>/dev/null
echo "${PLEASE:?}"

# END
