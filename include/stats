#!/bin/bash

# By Rainman
# V20222601
# 0.4.6.0

source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

if [ ! -d /home/"$(whoami)"/stats ] &>/dev/null; then
  # node_stats directory
  mkdir /home/"$(whoami)"/stats &>/dev/null
fi

### install needed packages ####################################################

# rrdtool setup (graphs, round robin database)
if ! [ -x "$(command -v rrdtool)" ] &>/dev/null; then
  sudo mkdir /var/lib/rrd &>/dev/null
  sudo chown -R "$(whoami)":"$(whoami)" /var/lib/rrd
  sudo apt-get install librrds-perl rrdtool -y 2>&1
fi

# apache2 setup (webserver, php)
if ! [ -x "$(command -v apache2)" ] &>/dev/null; then
  sudo apt-get install apache2 php libapache2-mod-php -y 2>&1
  sudo chown -R "$(whoami)":"$(whoami)" /var/www/html
  rm /var/www/html/index.html &>/dev/null
  printf '%b' "[${G1:?}OK${N0:?}] Restarting Apache\n"
  sudo systemctl restart apache2 &>/dev/null
  LOCAL=$(ifconfig 2>&1 | grep "inet" 2>&1 | head -1 2>&1 | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' 2>&1)
  # installing on a osmc, openelec, kodi system, with port 80 already in use
  uname -a >"${LOG_DIR:?}"/node_data/uname 2>&1
  if egrep -o "osmc" "${LOG_DIR:?}"/node_data/uname &>/dev/null; then
    # apache2 port already used
    echo "Port 80 already in use, using Port 8080 instead."
    PORT="8080"
    echo "<VirtualHost *:8080>
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>" >"${LOG_DIR:?}"/000-default.conf.tmp
    sudo mv "${LOG_DIR:?}"/000-default.conf.tmp /etc/apache2/sites-enabled/000-default.conf 2>&1
    echo "Listen 8080
<IfModule ssl_module>
        Listen 443
</IfModule>
<IfModule mod_gnutls.c>
        Listen 443
</IfModule>" >"${LOG_DIR:?}"/ports.conf.tmp
    sudo mv "${LOG_DIR:?}"/ports.conf.tmp /etc/apache2/sites-enabled/ports.conf 2>&1
    # make sure ufw opens up port 8080
    sudo ufw allow 8080 comment "TrumpCoin Graphs"
    sudo ufw status
    printf '%b' "[${G1:?}OK${N0:?}] Restarting Apache\n"
    sudo systemctl restart apache2 2>&1
  else # port free for use
    PORT="80"
  fi
  echo "[!!] Try your ${LOCAL:?}:${PORT:?} IP Address"
  echo "Will continue in 10 seconds."
  sleep 10
fi

### create round robin databases for system (rrdtool) ##########################

# load 1
if [ ! -f "/home/$(whoami)/stats/load.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating load.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/load.rrd \
    --step=60 \
    DS:load:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# load 5
if [ ! -f "/home/$(whoami)/stats/load5.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating load5.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/load5.rrd \
    --step=60 \
    DS:load5:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# load 15
if [ ! -f "/home/$(whoami)/stats/load15.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating load15.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/load15.rrd \
    --step=60 \
    DS:load15:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# temp
if [ ! -f "/home/$(whoami)/stats/temp.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating temp.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/temp.rrd \
    --step=60 \
    DS:temp:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# memory available
if [ ! -f "/home/$(whoami)/stats/memory_total.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating memory_total.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/memory_total.rrd \
    --step=60 \
    DS:memory_total:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# memory free
if [ ! -f "/home/$(whoami)/stats/memory_free.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating memory_free.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/memory_free.rrd \
    --step=60 \
    DS:memory_free:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# hdd
if [ ! -f "/home/$(whoami)/stats/hdd.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating hdd.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/hdd.rrd \
    --step=60 \
    DS:hdd:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# hdd total
if [ ! -f "/home/$(whoami)/stats/hdd_total.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating hdd_total.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/hdd_total.rrd \
    --step=60 \
    DS:hdd_total:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# network
if [ ! -f "/home/$(whoami)/stats/network.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating network.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/network.rrd \
    --step=60 \
    DS:rxbytes:DERIVE:300:U:U \
    DS:txbytes:DERIVE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi

### create round robin databases for wallet (rrdtool) ##########################

# balance
if [ ! -f "/home/$(whoami)/stats/balance.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating balance.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/balance.rrd \
    --step=60 \
    DS:balance:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# balance value
if [ ! -f "/home/$(whoami)/stats/value.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating value.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/value.rrd \
    --step=60 \
    DS:value:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# balance volume
if [ ! -f "/home/$(whoami)/stats/volume.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating volume.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/volume.rrd \
    --step=60 \
    DS:volume:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# stakes
if [ ! -f "/home/$(whoami)/stats/stakes.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating stakes.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/stakes.rrd \
    --step=60 \
    DS:stakes:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# inputs
if [ ! -f "/home/$(whoami)/stats/inputs.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating inputs.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/inputs.rrd \
    --step=60 \
    DS:inputs:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# peers
if [ ! -f "/home/$(whoami)/stats/peers.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating peers.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/peers.rrd \
    --step=60 \
    DS:peers:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# banned peers
if [ ! -f "/home/$(whoami)/stats/banned_peers.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating banned_peers.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/banned_peers.rrd \
    --step=60 \
    DS:banned_peers:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# difficulty
if [ ! -f "/home/$(whoami)/stats/difficulty.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating difficulty.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/difficulty.rrd \
    --step=60 \
    DS:difficulty:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# set auto pos (difficulty)
if [ ! -f "/home/$(whoami)/stats/set_auto_pos.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating set_auto_pos.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/set_auto_pos.rrd \
    --step=60 \
    DS:set_auto_pos:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# set auto con (confirmation)
if [ ! -f "/home/$(whoami)/stats/set_auto_con.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating set_auto_con.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/set_auto_con.rrd \
    --step=60 \
    DS:set_auto_con:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# total confirmations
if [ ! -f "/home/$(whoami)/stats/total_tx.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating total_tx.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/total_tx.rrd \
    --step=60 \
    DS:total_tx:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# total confirmations q
if [ ! -f "/home/$(whoami)/stats/total_tx_q.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating total_tx_q.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/total_tx_q.rrd \
    --step=60 \
    DS:total_tx_q:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi

### update rrdtool databases ###################################################

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "300" ]] &>/dev/null; then

  rrdtool update /home/"$(whoami)"/stats/load.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/load 2>/dev/null | tr -d ',' 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/load5.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/load 2>/dev/null | tr -d ',' 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/load15.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/load 2>/dev/null | tr -d ',' 2>&1 | awk '{ print $3 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/temp.rrd N:"$(echo "$(</sys/class/thermal/thermal_zone0/temp) / 100 * 0.1" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/memory_total.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/memtotal 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/memory_free.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/memfree 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/hdd.rrd N:"$(echo "$(df 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $3 }' 2>&1)/1024/1024" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/hdd_total.rrd N:"$(echo "$(df 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $2 }' 2>&1)/1024/1024" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/network.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/rxbytes 2>/dev/null)":"$(cat "${LOG_DIR:?}"/node_data/stats/txbytes 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/balance.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/total_balance 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/volume.rrd N:"$(echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/stats/volume.avg)/$(wc -l "${LOG_DIR:?}"/node_data/stats/volume.avg 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }')" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/value.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/balance_value 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/stakes.rrd N:"$(grep -c "BitcoinMiner" "${WALLET_DIR:?}"/staking 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/inputs.rrd N:"$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/peers.rrd N:"$(grep "connections" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/banned_peers.rrd N:"$(cat "${LOG_DIR:?}"/node_data/stats/bans 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/difficulty.rrd N:"$(grep "difficulty" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null

  ### auto pos grinding #################################################### ###

  if [[ "${AUTO_POS:?}" -gt "0" ]] &>/dev/null; then
    # get average difficulty value with auto pos config
    rrdtool info /home/"$(whoami)"/stats/difficulty.rrd 2>&1 | grep last_ds 2>&1 | awk '{ print $3 }' 2>&1 | tr -d '"' 2>&1 | awk -F. '{ print $1 }' | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/difficulty_avg 2>&1
  else
    # get average difficulty value normally
    echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/stats/difficulty 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/stats/difficulty 2>&1 | awk '{ print $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/difficulty_avg 2>&1
  fi

  # greater than n seconds, continue
  if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "600" ]] &>/dev/null; then

    if [[ "${AUTO_POS:?}" -gt "0" ]] &>/dev/null; then

      # get total average confirmations
      CONF_AVG=$(rrdtool info /home/"$(whoami)"/stats/total_tx.rrd 2>&1 | grep last_ds 2>&1 | awk '{ print $3 }' 2>&1 | tr -d '"' 2>&1 | awk '{ printf "%.0f\n", $1 }')
      # get autocombine threshold (apc)
      CON_DIFF=$(grep "autocombine_threshold" "${LOG_DIR:?}"/node_data/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }')
      # get difficulty average
      DIFF_AVG=$(cat "${LOG_DIR:?}"/node_data/stats/difficulty_avg 2>/dev/null | awk '{ printf "%.0f\n", $1 }')
      # get total confirmations from inputs that are below the con_diff var (with not_post_input var)
      TOTAL_CONF_BELOW=$(egrep "amount.*" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | awk -F: '{if($2<'"${CON_DIFF:?}"')print$2}' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)

      function save_auto_pos_values() {
        # save auto proof-of-stake values
        echo "$(date +%s 2>&1)$(date +%s 2>&1 | rev 2>&1)
Auto PoS Configuration
ConfirmationsAVG.: $CONF_AVG
ConfigThreshold..: $CON_DIFF
DifficultyAVG....: $DIFF_AVG
$(date +%s 2>&1)$(date +%s 2>&1 | rev 2>&1)" >"${WALLET_DIR:?}"/auto_pos 2>&1
      }

      if [[ ! -f "${WALLET_DIR:?}"/auto_pos ]] &>/dev/null; then
        # make sure auto_pos exist
        save_auto_pos_values
      fi

      # interval reading with date:time
      if [[ "$(date '+%H%M' 2>&1 | grep -Eo "0001" 2>&1)" ]] &>/dev/null; then
        save_auto_pos_values
      fi

      if [[ -z "$TOTAL_CONF_BELOW" ]] &>/dev/null; then
        # no inputs below config
        TOTAL_CONF_BELOW="0"
      fi

      echo "${POS_LIMIT:?}" >"${LOG_DIR:?}"/node_data/client/pos_limit 2>&1
      # continue if lock is missing
      if [ ! -f "${WALLET_DIR:?}"/diff.lock ] &>/dev/null; then

        printf '%b' "${LOG_DATE:?} Status() Staking.Script ${GR:?}::${N0:?} Auto PoS Grinding! ${GR:?}::${N0:?} Config ${GR:?}$CON_DIFF <${N0:?} Now ${DIFF_AVG:?} <${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

        # calculate an indicater for var pos_limit
        echo "$(cat "${LOG_DIR:?}"/node_data/stats/total_balance 2>/dev/null)/${DIFF_AVG:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/ind_pos 2>&1

        if [[ "$(cat "${LOG_DIR:?}"/node_data/stats/ind_pos 2>/dev/null | awk -F. '{ print $1 }' 2>&1)" -gt "1" ]] &>/dev/null; then
          # got inputs (high enough to make several)
          # get new pos limit (apl)
          # ruled by configuration (default 1440)
          POS_LIMIT="${POS_LIMIT:?}"
        else
          # got input (too low to make several)
          # get new pos limit (apl)
          # ruled by input size + average difficulty (disregard configuration)
          echo "$(cat "${LOG_DIR:?}"/node_data/stats/ind_pos 2>/dev/null)/${DIFF_AVG:?}" | bc -l >"${LOG_DIR:?}"/node_data/stats/ind_pos.tmp
          # do
          echo "1/$(cat "${LOG_DIR:?}"/node_data/stats/ind_pos.tmp 2>/dev/null)" 2>&1 | bc -l >"${LOG_DIR:?}"/node_data/stats/lim_pos.tmp
          # some
          echo "$(cat "${LOG_DIR:?}"/node_data/stats/lim_pos.tmp 2>/dev/null)*${POS_LIMIT:?}" 2>&1 | bc -l >"${LOG_DIR:?}"/node_data/stats/lim_pos
          # mental gymnastics (calculations)
          # get new pos limit that works better for the small solo input
          # will be higher than 1440 (1day) if average difficulty is bigger than the input itself
          POS_LIMIT=$(cat "${LOG_DIR:?}"/node_data/stats/lim_pos 2>/dev/null)
          # remove old files
          rm "${LOG_DIR:?}"/node_data/stats/*.tmp &>/dev/null
        fi

        # total average confirmations greater than limit set, continue
        if [[ "${CONF_AVG:?}" -gt "${POS_LIMIT:?}" ]] &>/dev/null; then

          printf '%b' "${LOG_DATE:?} Status() Staking.Script Average confirmations between inputs -> ${R1:?}High!${N0:?} (${CONF_AVG:?} -> ${POS_LIMIT:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
          printf '%b' "${LOG_DATE:?} Status() Staking.Script New Input count with new config -> ${G1:?}$(cat "${LOG_DIR:?}"/node_data/stats/ind_pos 2>/dev/null | awk -F. '{ print $1 }' 2>&1) ${CY:?}>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
          sleep 1
          # set setautocombinethreshold & setstakesplitthreshold values automatically ruled by var diff_avg
          "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf setautocombinethreshold true "${DIFF_AVG:?}" 2>&1
          "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf setstakesplitthreshold "$(echo "${DIFF_AVG:?}-100" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)"
          sleep 1
          printf '%b' "${LOG_DATE:?} Status() Staking.Script Set New auto combine threshold -> ${G1:?}${DIFF_AVG:?} ${CY:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
          printf '%b' "${LOG_DATE:?} Status() Staking.Script Set New stake split threshold -> ${G1:?}$(echo "$DIFF_AVG-100" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1) ${CY:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
        else
          printf '%b' "${LOG_DATE:?} Status() Staking.Script Average confirmations between inputs -> ${G1:?}OK!${N0:?} (${CONF_AVG:?} -> ${POS_LIMIT:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
        fi
        # create lock file
        echo "${CON_DIFF:?}" >"${WALLET_DIR:?}"/diff.lock
      fi
    fi
  else # non responsive, use backup values
    if [[ -f "${WALLET_DIR:?}"/auto_pos ]] &>/dev/null; then
      CONF_AVG="$(grep "ConfirmAVG" "${WALLET_DIR:?}"/auto_pos 2>&1 | awk '{ print $2 }' 2>&1)"
      CON_DIFF="$(grep "ConfigThreshold" "${WALLET_DIR:?}"/auto_pos 2>&1 | awk '{ print $2 }' 2>&1)"
      DIFF_AVG="$(grep "DifficultyAVG" "${WALLET_DIR:?}"/auto_pos 2>&1 | awk '{ print $2 }' 2>&1)"
      TOTAL_CONF_BELOW="0"
    else # non responsive
      CONF_AVG="0"
      CON_DIFF="0"
      DIFF_AVG="0"
      TOTAL_CONF_BELOW="0"
    fi
  fi

  # auto pos config
  if [[ "$AUTO_POS" -eq "2" ]] &>/dev/null; then

    if [[ "$(echo "$(cat "${LOG_DIR:?}"/node_data/stats/total_balance 2>/dev/null)/$(cat "${LOG_DIR:?}"/node_data/stats/difficulty_avg 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)" -gt "1" ]] &>/dev/null; then
      POS_LIMIT="$(cat "${LOG_DIR:?}"/node_data/client/pos_limit 2>/dev/null)"
    else
      POS_LIMIT=$(cat "${LOG_DIR:?}"/node_data/stats/lim_pos 2>/dev/null)
    fi

    # get amount of inputs with lower value than var con_diff
    grep "amount" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk -F. '{ print $1 }' 2>&1 | sort -n 2>&1 | awk '$1 < '"${CON_DIFF:?}"' { print }' 2>&1 | wc -l >"${LOG_DIR:?}"/node_data/stats/not_pos 2>&1
    NOT_POS_INPUT=$(cat "${LOG_DIR:?}"/node_data/stats/not_pos 2>/dev/null)

    # get amount of inputs, disregard with var not_pos_input value, disregard negative symbol
    rrdtool update /home/"$(whoami)"/stats/total_tx.rrd N:"$(echo "$(echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)-${TOTAL_CONF_BELOW:?}" 2>&1 | bc 2>&1)/$(echo "$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1)+${NOT_POS_INPUT:?}" 2>&1 | bc 2>&1)" 2>&1 | bc 2>&1 | tr -d '-' 2>&1)" 2>/dev/null
    rrdtool update /home/"$(whoami)"/stats/total_tx_q.rrd N:"$(echo "$(echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)-${TOTAL_CONF_BELOW:?}" 2>&1 | bc 2>&1)/$(echo "$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1)" 2>&1 | bc 2>&1)" 2>&1 | bc 2>&1 | tr -d '-' 2>&1)" 2>/dev/null
    rrdtool update /home/"$(whoami)"/stats/set_auto_con.rrd N:"${POS_LIMIT:?}" 2>/dev/null
  else
    if [[ "$AUTO_POS" -eq "1" ]] &>/dev/null; then

      if [[ "$(echo "$(cat "${LOG_DIR:?}"/node_data/stats/total_balance 2>/dev/null)/$(cat "${LOG_DIR:?}"/node_data/stats/difficulty_avg 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)" -gt "1" ]] &>/dev/null; then
        POS_LIMIT="$(cat "${LOG_DIR:?}"/node_data/client/pos_limit 2>/dev/null)"
      else
        POS_LIMIT=$(cat "${LOG_DIR:?}"/node_data/stats/lim_pos 2>/dev/null)
      fi

      # get total confirmations from inputs that are below the con_diff var (without not_post_input var)
      TOTAL_CONF_BELOW=$(egrep "amount.*" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | awk -F: '{if($2<'"${CON_DIFF:?}"')print$2}' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk -F. '{ print $1 }' 2>&1)

      rrdtool update /home/"$(whoami)"/stats/total_tx.rrd N:"$(echo "$(echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)-${TOTAL_CONF_BELOW:?}" 2>&1 | bc 2>&1)/$(echo "$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1)" 2>&1 | bc 2>&1)" 2>&1 | bc 2>&1)" 2>/dev/null
    else
      # original normal values
      rrdtool update /home/"$(whoami)"/stats/total_tx.rrd N:"$(echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)/$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1)" 2>&1 | bc 2>&1)" 2>/dev/null
    fi
  fi
  rrdtool update /home/"$(whoami)"/stats/set_auto_pos.rrd N:"$(grep "threshold" "${LOG_DIR:?}"/node_data/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk -F. '{ print $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/set_auto_con.rrd N:"${POS_LIMIT:?}" 2>/dev/null
fi

#### create index.php ##########################################################

cat >/var/www/html/index.php <<'EOF'
<div id="content" align="center">
<?php
  header("refresh: 120;");
?>
<?php
  // background color (dark blue)
  echo "<body style='background-color:2D3037'>";
  // graphs
  echo "<img src='load_graph.png' alt='Load' />";
  echo "<img src='temp_graph.png' alt='CPUTemp' />";
  echo "<img src='memory_graph.png' alt='Memory' />";
  echo "<img src='hdd_graph.png' alt='Drive' />";
  echo "<img src='network_graph.png' alt='Network' />";
  echo "<img src='balance_graph.png' alt='Balance' />";
  echo "<img src='stakes_graph.png' alt='Stakes' />";
  echo "<img src='inputs_graph.png' alt='Inputs' />";
  echo "<img src='peers_graph.png' alt='Peers' />";
  echo "<img src='total_tx_graph.png' alt='Total TX' />";
  echo "<img src='difficulty_graph.png' alt='Difficulty' />";
EOF

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then

  # note: heavy reading, do interval reading with date:time
  if [[ "$(date '+%T' 2>&1 | egrep "[0-9]+:[0-9]+0:[0-9]+" 2>&1)" ]] &>/dev/null; then
    if [[ ! -f "${LOG_DIR:?}"/node_data/graph.lock ]] &>/dev/null; then
      # run graphs script
      printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating graphs.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      bash /usr/local/bin/include/graphs &>/dev/null && clear
    else
      printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Skipping graphs! (already running!)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  else
    printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Saving data.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# END
