#!/bin/bash

# By Rainman
# V20221308
# 0.5.5.3

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)
if [[ -z "$LOG_DATE" ]] &>/dev/null; then
  LOG_DATE=$(LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' 2>&1)
fi

if [ ! -d /home/"$(whoami)"/stats ] &>/dev/null; then
  # node_stats directory
  mkdir /home/"$(whoami)"/stats &>/dev/null
fi

### install needed packages ####################################################

# rrdtool setup (graphs, round robin database)
if ! [ -x "$(command -v rrdtool)" ] &>/dev/null; then
  sudo mkdir /var/lib/rrd &>/dev/null
  sudo chown -R "$(whoami)":"$(whoami)" /var/lib/rrd
  sudo apt-get install librrds-perl rrdtool -y 2>&1
fi

# apache2 setup (webserver, php)
if ! [ -x "$(command -v apache2)" ] &>/dev/null; then
  sudo apt-get install apache2 php libapache2-mod-php -y 2>&1
  sudo chown -R "$(whoami)":"$(whoami)" /var/www/html
  rm /var/www/html/index.html &>/dev/null
  printf '%b' "[${G1:?}OK${N0:?}] Restarting Apache\n"
  sudo systemctl restart apache2 &>/dev/null
  LOCAL=$(ifconfig 2>&1 | grep "inet" 2>&1 | head -1 2>&1 | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' 2>&1)
  # installing on a osmc, openelec, kodi system, with port 80 already in use
  uname -a >"${LOG_DIR:?}"/node_data/uname 2>&1
  if egrep -o "osmc" "${LOG_DIR:?}"/node_data/uname &>/dev/null; then
    # apache2 port already used
    echo "Port 80 already in use, using Port 8080 instead."
    PORT="8080"
    echo "<VirtualHost *:8080>
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>" >"${LOG_DIR:?}"/000-default.conf.tmp
    sudo mv "${LOG_DIR:?}"/000-default.conf.tmp /etc/apache2/sites-enabled/000-default.conf 2>&1
    echo "Listen 8080
<IfModule ssl_module>
        Listen 443
</IfModule>
<IfModule mod_gnutls.c>
        Listen 443
</IfModule>" >"${LOG_DIR:?}"/ports.conf.tmp
    sudo mv "${LOG_DIR:?}"/ports.conf.tmp /etc/apache2/sites-enabled/ports.conf 2>&1
    # make sure ufw opens up port 8080
    sudo ufw allow 8080 comment "${WALLET_NAME:?} Graphs"
    sudo ufw status
    printf '%b' "[${G1:?}OK${N0:?}] Restarting Apache\n"
    sudo systemctl restart apache2 2>&1
  else # port free for use
    PORT="80"
  fi
  echo "[!!] Try your ${LOCAL:?}:${PORT:?} IP Address"
  echo "Will continue in 10 seconds."
  sleep 10
fi

### create round robin databases for system (rrdtool) ##########################

# load 1
if [ ! -f "/home/$(whoami)/stats/load.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating load.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/load.rrd \
    --step=60 \
    DS:load:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# load 5
if [ ! -f "/home/$(whoami)/stats/load5.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating load5.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/load5.rrd \
    --step=60 \
    DS:load5:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# load 15
if [ ! -f "/home/$(whoami)/stats/load15.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating load15.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/load15.rrd \
    --step=60 \
    DS:load15:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# cpu temperature
if [ ! -f "/home/$(whoami)/stats/temp.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating temp.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/temp.rrd \
    --step=60 \
    DS:temp:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# memory available
if [ ! -f "/home/$(whoami)/stats/memory_total.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating memory_total.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/memory_total.rrd \
    --step=60 \
    DS:memory_total:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# memory free
if [ ! -f "/home/$(whoami)/stats/memory_free.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating memory_free.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/memory_free.rrd \
    --step=60 \
    DS:memory_free:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# hdd
if [ ! -f "/home/$(whoami)/stats/hdd.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating hdd.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/hdd.rrd \
    --step=60 \
    DS:hdd:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# hdd total
if [ ! -f "/home/$(whoami)/stats/hdd_total.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating hdd_total.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/hdd_total.rrd \
    --step=60 \
    DS:hdd_total:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# network
if [ ! -f "/home/$(whoami)/stats/network.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating network.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/network.rrd \
    --step=60 \
    DS:rxbytes:DERIVE:300:U:U \
    DS:txbytes:DERIVE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi

### create round robin databases for wallet (rrdtool) ##########################

# balance
if [ ! -f "/home/$(whoami)/stats/balance.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating balance.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/balance.rrd \
    --step=60 \
    DS:balance:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# balance value
if [ ! -f "/home/$(whoami)/stats/value.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating value.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/value.rrd \
    --step=60 \
    DS:value:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# stakes
if [ ! -f "/home/$(whoami)/stats/stakes.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating stakes.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/stakes.rrd \
    --step=60 \
    DS:stakes:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# inputs
if [ ! -f "/home/$(whoami)/stats/inputs.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating inputs.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/inputs.rrd \
    --step=60 \
    DS:inputs:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# peers
if [ ! -f "/home/$(whoami)/stats/peers.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating peers.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/peers.rrd \
    --step=60 \
    DS:peers:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# peers protocol
if [ ! -f "/home/$(whoami)/stats/peers_proto.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating peers_proto.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/peers_proto.rrd \
    --step=60 \
    DS:peers_ipv4:GAUGE:300:U:U \
    DS:peers_ipv6:GAUGE:300:U:U \
    DS:peers_dns:GAUGE:300:U:U \
    DS:peers_onion:GAUGE:300:U:U \
    DS:peers_proxy:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# banned peers
if [ ! -f "/home/$(whoami)/stats/banned_peers.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating banned_peers.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/banned_peers.rrd \
    --step=60 \
    DS:banned_peers:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# masternode count
if [ ! -f "/home/$(whoami)/stats/masternodes.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating masternodes.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/masternodes.rrd \
    --step=60 \
    DS:total:GAUGE:300:U:U \
    DS:stable:GAUGE:300:U:U \
    DS:enabled:GAUGE:300:U:U \
    DS:inqueue:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# masternode pay, value
if [ ! -f "/home/$(whoami)/stats/masternode_pay.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating masternode_pay.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/masternode_pay.rrd \
    --step=60 \
    DS:paycount:GAUGE:300:U:U \
    DS:payout:GAUGE:300:U:U \
    DS:payvalue:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# difficulty
if [ ! -f "/home/$(whoami)/stats/difficulty.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating difficulty.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/difficulty.rrd \
    --step=60 \
    DS:difficulty:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# set auto pos (difficulty)
if [ ! -f "/home/$(whoami)/stats/set_auto_pos.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating set_auto_pos.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/set_auto_pos.rrd \
    --step=60 \
    DS:set_auto_pos:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# set auto con (confirmation)
if [ ! -f "/home/$(whoami)/stats/set_auto_con.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating set_auto_con.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/set_auto_con.rrd \
    --step=60 \
    DS:set_auto_con:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# total confirmations
if [ ! -f "/home/$(whoami)/stats/total_tx.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating total_tx.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/total_tx.rrd \
    --step=60 \
    DS:total_tx:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# blockchain activity
if [ ! -f "/home/$(whoami)/stats/block_activity.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating block_activity.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/block_activity.rrd \
    --step=60 \
    DS:activity:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# blockchain coin supply
if [ ! -f "/home/$(whoami)/stats/coin_supply.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating coin_supply.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/coin_supply.rrd \
    --step=60 \
    DS:activity:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi

### create round robin databases for api (rrdtool) #############################

# rank coinmarketcap
if [ ! -f "/home/$(whoami)/stats/rank.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating rank.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/rank.rrd \
    --step=60 \
    DS:rank:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# watchlist coinmarketcap
if [ ! -f "/home/$(whoami)/stats/watchlist.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating watchlist.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/watchlist.rrd \
    --step=60 \
    DS:watchlist:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# price and volume coingecko
if [ ! -f "/home/$(whoami)/stats/coingecko.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating coingecko.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/coingecko.rrd \
    --step=60 \
    DS:price_cg:GAUGE:300:U:U \
    DS:volume_cg:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# price and volume coinmarketcap
if [ ! -f "/home/$(whoami)/stats/coinmarketcap.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating coinmarketcap.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/coinmarketcap.rrd \
    --step=60 \
    DS:price_cmc:GAUGE:300:U:U \
    DS:volume_cmc:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# price avg
if [ ! -f "/home/$(whoami)/stats/price_avg.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating price_avg.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/price_avg.rrd \
    --step=60 \
    DS:price_avg:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi
# volume avg
if [ ! -f "/home/$(whoami)/stats/volume_avg.rrd" ] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating volume_avg.rrd! ${CY:?}<>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  rrdtool create /home/"$(whoami)"/stats/volume_avg.rrd \
    --step=60 \
    DS:volume_avg:GAUGE:300:U:U \
    RRA:AVERAGE:0.5:1:315360
fi

### update rrdtool databases ###################################################

if [[ "$(grep "version" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo)" ]] &>/dev/null; then

  rrdtool update /home/"$(whoami)"/stats/load.rrd N:"$(cat "${LOG_DIR:?}"/node_data/system/load 2>/dev/null | sed 's/\,/./' 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/load5.rrd N:"$(cat "${LOG_DIR:?}"/node_data/system/load 2>/dev/null | awk '{ print $2 }' 2>&1 | sed 's/\,/./' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/load15.rrd N:"$(cat "${LOG_DIR:?}"/node_data/system/load 2>/dev/null | awk '{ print $3 }' 2>&1 | sed 's/\,/./' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/temp.rrd N:"$(echo "$(</sys/class/thermal/thermal_zone0/temp) / 100 * 0.1" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/memory_free.rrd N:"$(echo "$(cat "${LOG_DIR:?}"/node_data/system/mem_free 2>/dev/null)+$(cat "${LOG_DIR:?}"/node_data/system/swap_free 2>/dev/null)" | bc)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/memory_total.rrd N:"$(echo "$(cat "${LOG_DIR:?}"/node_data/system/mem_total 2>/dev/null)+$(cat "${LOG_DIR:?}"/node_data/system/swap_total 2>/dev/null)" | bc)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/hdd.rrd N:"$(echo "$(df 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $3 }' 2>&1)/1024/1024" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/hdd_total.rrd N:"$(echo "$(df 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $2 }' 2>&1)/1024/1024" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/network.rrd N:"$(cat "${LOG_DIR:?}"/node_data/system/rxbytes 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)":"$(cat "${LOG_DIR:?}"/node_data/system/txbytes 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/balance.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>/dev/null)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/rank.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/watchlist.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/value.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/balance_value 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/stakes.rrd N:"$(cat "${DATA_DIR:?}"/staking 2>&1 | grep "BitcoinMiner" 2>&1 | awk '!a[$0]++' | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/inputs.rrd N:"$(grep "address" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | wc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/peers.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | tail -1 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/peers_proto.rrd N:"$(grep "addr:" "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo 2>&1 | egrep -v "getaddr|onion|127" 2>&1 | awk '{ print $2 }' 2>&1 | egrep -v "[a-z]+" 2>&1 | wc -l 2>&1)":"$(egrep -o '([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4}' "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo 2>&1 | sed -r '/^.{,8}$/d' 2>&1 | wc -l 2>&1)":"$(grep -oiE '([a-zA-Z0-9][a-zA-Z0-9-]{1,61}\.){1,}(\.?[a-zA-Z]{2,}){1,}' "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo 2>&1 | grep -v ".onion" 2>&1 | wc -l 2>&1)":"$(egrep -o "[a0-z9]+.onion" "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo 2>&1 | wc -l 2>&1)":"$(grep "127.0.0.1" "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo 2>&1 | wc -l 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/banned_peers.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/banlist 2>/dev/null | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/masternodes.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>/dev/null | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)":"$(cat "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>/dev/null | grep "stable" 2>&1 | awk '{ print $2 }' 2>&1)":"$(cat "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>/dev/null | grep "enabled" 2>&1 | awk '{ print $2 }' 2>&1)":"$(cat "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>/dev/null | grep "inqueue" 2>&1 | awk '{ print $2 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/masternode_pay.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount 2>/dev/null)":"$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_payout 2>/dev/null)":"$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_payvalue 2>/dev/null)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/difficulty.rrd N:"$(grep "difficulty" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/coingecko.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)":"$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/coinmarketcap.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)":"$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/price_avg.rrd N:"$(echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/price.* 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | xargs 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/price.* 2>&1 | grep "total" 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" | bc -l 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/volume_avg.rrd N:"$(echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/volume.* 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | xargs 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/volume.* 2>&1 | grep "total" 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" | bc -l 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/block_activity.rrd N:"$(cat "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>/dev/null | awk '{ print $2 }' 2>&1 | tr -d '%' 2>&1 | tail -1 2>&1)" 2>/dev/null
  rrdtool update /home/"$(whoami)"/stats/coin_supply.rrd N:"$(grep "moneysupply" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1)" 2>/dev/null

  ### auto pos grinding #################################################### ###

  if [[ "$AUTO_POS" -eq "1" ]] &>/dev/null; then

    WALLET_BALANCE=$(grep "balance" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    if [[ "$(echo "${WALLET_BALANCE:?}" 2>&1 | awk -F. '{ print $1 }' 2>&1)" -gt "0" ]] &>/dev/null; then

      if [[ "$(LC_ALL=de_US.utf8 date '+%H%M' 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then
        rm "${DATA_DIR:?}"/diff.lock &>/dev/null
      fi

      # greater than n seconds, continue
      if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)" -gt "600" ]] &>/dev/null; then
        # get difficulty average
        DIFF_AVG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/difficulty_avg 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)

        # calculate an indicater for var pos_limit
        echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>/dev/null)/$(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/ind_pos 2>&1

        if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/data/ind_pos 2>/dev/null | awk -F. '{ print $1 }' 2>&1)" -ge "1" ]] &>/dev/null; then
          rm "${LOG_DIR:?}"/node_data/wallet/data/lim_pos &>/dev/null
          # got inputs (high enough to make several)
          # get new pos limit (apl)
          # ruled by configuration (default 1440)
          POS_LIMIT="${POS_LIMIT:?}"
        else
          # got input (too low to make several)
          # get new pos limit (apl)
          # ruled by input size + average difficulty (disregard configuration)
          echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/ind_pos 2>/dev/null)/$(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1)" 2>&1 | bc -l >"${LOG_DIR:?}"/node_data/wallet/data/ind_pos.tmp 2>&1
          # do
          echo "1/$(cat "${LOG_DIR:?}"/node_data/wallet/data/ind_pos.tmp 2>/dev/null)" 2>&1 | bc -l >"${LOG_DIR:?}"/node_data/wallet/data/lim_pos.tmp
          # some
          echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/lim_pos.tmp 2>/dev/null)*${POS_LIMIT:?}" 2>&1 | bc -l >"${LOG_DIR:?}"/node_data/wallet/data/lim_pos
          # mental gymnastics (calculations)
          # get new pos limit that works better for the small solo input
          # will be higher than 1440 (1day) if average difficulty is bigger than the input itself
          POS_LIMIT=$(cat "${LOG_DIR:?}"/node_data/wallet/data/lim_pos 2>/dev/null)
          # remove old files
          rm "${LOG_DIR:?}"/node_data/wallet/data/*.tmp &>/dev/null
        fi

        if [[ "$(echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>/dev/null)/$(cat "${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>/dev/null | tail -1 2>&1)" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)" -ge "1" ]] &>/dev/null; then
          POS_LIMIT="$(cat "${LOG_DIR:?}"/node_data/wallet/data/pos_limit 2>/dev/null | awk -F. '{ print $1 }' 2>&1)"
        else
          POS_LIMIT=$(cat "${LOG_DIR:?}"/node_data/wallet/data/lim_pos 2>/dev/null | awk -F. '{ print $1 }' 2>&1)
        fi

        if [[ -z "$POS_LIMIT" ]] &>/dev/null; then
          # non responsive
          POS_LIMIT="1440"
        fi

        # update proof-of-stake threshold
        rrdtool update /home/"$(whoami)"/stats/set_auto_pos.rrd N:"$(grep "threshold" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk -F. '{ print $1 }' 2>&1)" 2>/dev/null
        # update proof-of-stake limit
        rrdtool update /home/"$(whoami)"/stats/set_auto_con.rrd N:"${POS_LIMIT:?}" 2>/dev/null

        # save pos_limit
        echo "${POS_LIMIT:?}" >"${LOG_DIR:?}"/node_data/wallet/data/pos_limit 2>&1

        # get autocombine threshold (apc)
        CON_DIFF=$(grep "autocombine_threshold" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }')
        # get total confirmations from inputs that are above the con_diff
        TOTAL_CONF_ABOVE=$(egrep -A1 "$(egrep -A1 -o "amount: [0-9]+.[0-9]+" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk -F: '$2>='"${CON_DIFF:?}"'' 2>&1)" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | grep "confirmations" 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)
        # calculate total average confirmations between inputs
        TOTAL_CONF_ABOVE_CALC="$(echo "${TOTAL_CONF_ABOVE:?}/$(egrep -A1 "$(egrep -A1 -o "amount: [0-9]+.[0-9]+" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk -F: '$2>='"${CON_DIFF:?}"'' 2>&1)" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | grep "confirmations" | wc -l 2>&1)" | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)"

        # continue if lock is found
        if [ -f "${DATA_DIR:?}"/diff.lock ] &>/dev/null; then
          # save value total average confirmations between inputs
          echo "${TOTAL_CONF_ABOVE_CALC:?}" >"${LOG_DIR:?}"/node_data/wallet/data/pos_confirmations 2>&1
        fi

        TOTAL_CONF_ABOVE="$(cat "${LOG_DIR:?}"/node_data/wallet/data/pos_confirmations 2>/dev/null)"

        if [[ -z "$TOTAL_CONF_ABOVE" ]] &>/dev/null; then
          # no inputs below config
          TOTAL_CONF_ABOVE="0"
        fi

        # update total confirmations above threshold
        rrdtool update /home/"$(whoami)"/stats/total_tx.rrd N:"${TOTAL_CONF_ABOVE:?}" 2>/dev/null
        # get total average confirmations
        CONF_AVG=$(rrdtool info /home/"$(whoami)"/stats/total_tx.rrd 2>&1 | grep "last_ds" 2>&1 | awk '{ print $3 }' 2>&1 | tr -d '"' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

        if [[ -z "$DIFF_AVG" ]] &>/dev/null; then
          DIFF_AVG="0"
        fi

        # continue if lock is missing
        if [ ! -f "${DATA_DIR:?}"/diff.lock ] &>/dev/null; then

          printf '%b' "${LOG_DATE:?} Status() Staking.Script ${GR:?}::${N0:?} Auto PoS Grinding! ${GR:?}::${N0:?} Config ${GR:?}$CON_DIFF <${N0:?} Now ${DIFF_AVG:?} <${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

          # total average confirmations greater than limit set, continue
          if [[ "${CONF_AVG:?}" -gt "${POS_LIMIT:?}" ]] &>/dev/null; then

            printf '%b' "${LOG_DATE:?} Status() Staking.Script Average confirmations between inputs -> ${N0:?}High!${N0:?} (${CONF_AVG:?} -> ${POS_LIMIT:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
            printf '%b' "${LOG_DATE:?} Status() Staking.Script New Input count with new config -> ${G1:?}$(cat "${LOG_DIR:?}"/node_data/wallet/data/ind_pos 2>/dev/null | awk -F. '{ print $1 }' 2>&1) ${CY:?}>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
            sleep 1

            # set when synced 100%
            if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
              # set setautocombinethreshold & setstakesplitthreshold values automatically ruled by var diff_avg
              "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" setautocombinethreshold true "$(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)" &>/dev/null
              "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" setstakesplitthreshold "$(echo "$(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)/2" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)" &>/dev/null
            fi

            sleep 1
            printf '%b' "${LOG_DATE:?} Status() Staking.Script Set New auto combine threshold -> ${G1:?}$(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1) ${CY:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
            printf '%b' "${LOG_DATE:?} Status() Staking.Script Set New stake split threshold -> ${G1:?}$(echo "$(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)/2" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1) ${CY:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
          else
            printf '%b' "${LOG_DATE:?} Status() Staking.Script Average confirmations between inputs -> ${G1:?}OK!${N0:?} (${CONF_AVG:?} -> ${POS_LIMIT:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
          fi
          # save data to file
          echo "$(date)

Auto combine threshold.: $(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
Stake split threshold..: $(echo "$(echo "${DIFF_AVG:?}*${AUTO_RULE:?}" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)/2" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)

$(date)" >"${DATA_DIR:?}"/auto_pos
          # create lock file
          echo "${CON_DIFF:?}" >"${DATA_DIR:?}"/diff.lock
        fi
      fi
    fi
  fi
fi

#### create index.php ##########################################################

cat >/var/www/html/index.php <<'EOF'
<div id="content" align="center">
<?php
  header("refresh: 120;");
?>
<?php
  // background color (dark blue)
  echo "<body style='background-color:2D3037'>";
  // graphs
  echo "<img src='load_graph.png' alt='Load' />";
  echo "<img src='temp_graph.png' alt='CPUTemp' />";
  echo "<img src='memory_graph.png' alt='Memory' />";
  echo "<img src='hdd_graph.png' alt='Drive' />";
  echo "<img src='network_graph.png' alt='Network' />";
  echo "<img src='balance_graph.png' alt='Balance' />";
  echo "<img src='stakes_and_rewards_graph.png' alt='Stakes' />";
  echo "<img src='inputs_graph.png' alt='Inputs' />";
  echo "<img src='peers_graph.png' alt='Peers' />";
  echo "<img src='rank_graph.png' alt='Rank' />";
  echo "<img src='total_tx_graph.png' alt='Total TX' />";
  echo "<img src='difficulty_graph.png' alt='Difficulty' />";
  echo "<img src='watchlist_graph.png' alt='Watchlist' />";
  echo "<img src='market_price_graph.png' alt='Market Price' />";
  echo "<img src='market_volume_graph.png' alt='Market Volume' />";
  echo "<img src='masternode_count_graph.png' alt='Masternodes' />";
  echo "<img src='masternode_pay_graph.png' alt='Masternodes' />";
  echo "<img src='blockchain_activity.png' alt='Block Activity' />";
  echo "<img src='coin_supply.png' alt='Blockchain Coin Supply' />";

EOF

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then

  # note: heavy reading, do interval reading with date:time
  if [[ "$(LC_ALL=de_US.utf8 date '+%T' 2>&1 | egrep "[0-9]+:[0-9]+0:[0-9]+" 2>&1)" ]] &>/dev/null; then
    if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/graph.lock ]] &>/dev/null; then
      touch "${LOG_DIR:?}"/node_data/wallet/graph.lock &>/dev/null
      # run graphs script
      printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Creating graphs.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      source /usr/local/bin/include/pinode/graphs &>/dev/null && clear
    else
      printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() Skipping graphs! (already running!)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
    rm "${LOG_DIR:?}"/node_data/wallet/graph.lock &>/dev/null
  else
    if tail -4 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "Saving data" &>/dev/null; then
      # data feed overlapping (happens when pinode takes over the data feed, too close to warden data feed)
      SAVING_DATA="${CY:?}Saving data.${N0:?}"
    else # normal data feed, no overlapping
      SAVING_DATA="${N0:?}Saving data.${N0:?}"
    fi
    printf '%b' "${LOG_DATE:?} Status() rrdtoolStats() ${SAVING_DATA:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# END
