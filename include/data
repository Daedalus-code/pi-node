#!/bin/bash

# By Rainman
# V20211912
# 0.1.1.6

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}

### addnodes ###################################################################

if [[ "$(uptime_daemon)" -gt "300" ]]; then

  # save original value, make sure file exist before the fact
  touch "$LOG_DIR"/node_data/nodes.api.value &>/dev/null
  egrep -c "[0-9]+" "$LOG_DIR"/node_data/nodes.api >"$LOG_DIR"/node_data/nodes.api.value 2>&1

  # if zero, make it so
  if [ ! -s "$LOG_DIR"/node_data/nodes.api.value ] &>/dev/null; then
    echo "0" >"$LOG_DIR"/node_data/nodes.api.value 2>&1
  fi

  # add node address (api) internet
  curl -sf https://chainz.cryptoid.info/trump/api.dws?q=nodes 2>&1 |
    # clean up the file above (ipv4) no ports on these
    egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 |
    awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes.api 2>&1

  # count api nodes
  API_COUNT=$(cat "$LOG_DIR"/node_data/nodes.api.value 2>&1)
  # get new count
  API_NEW=$(cat "$LOG_DIR"/node_data/nodes.api 2>/dev/null | wc -l 2>&1)
  # calculate api values
  API_DIFF=$(echo "$API_COUNT-$API_NEW" 2>&1 | bc 2>&1)

  # setup api file
  cat "$LOG_DIR"/node_data/nodes.api 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes
  printf '%b' "${LOG_DATE:?} Status() Chainz.C.API() Found ${G1:?}${API_COUNT:?}${N0:?} possible new peers! (${API_DIFF:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  ### token price ##############################################################

  # ticker (api price)
  curl -sf https://api.coingecko.com/api/v3/coins/trumpcoin >"$LOG_DIR"/node_data/ticker 2>&1

  # clean up ticker
  cat "$LOG_DIR"/node_data/ticker 2>&1 | tr -d '"|,' 2>&1 |
    egrep -o "[a0-z9]+-[0-9]+usd:[0-9]+.[0-9]+" 2>&1 |
    egrep -o "usd:[0-9]+.[0-9]+" 2>&1 | tr -d 'usd:' >/tmp/ticker 2>&1

  # count ticker lines, create average
  TICKER_TOTAL=$(cat /tmp/ticker 2>&1 |
    awk '{ SUM += $1} END { print SUM }' 2>&1)
  TICKER_LINES=$(cat /tmp/ticker 2>&1 | wc -l 2>&1)
  echo "${TICKER_TOTAL:?}/${TICKER_LINES:?}" 2>&1 |
    bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >/tmp/ticker 2>&1
  # remove old file
  rm "$LOG_DIR"/node_data/ticker &>/dev/null
  # move new file into place
  mv /tmp/ticker "$LOG_DIR"/node_data/ticker 2>&1
  # api value
  API_VALUE=$(cat "$LOG_DIR"/node_data/ticker 2>&1 | tail -1 2>&1)
  printf '%b' "${LOG_DATE:?} Status() C.Gecko.API(): Found ${G1:?}${API_VALUE:?}${N0:?} average coingecko price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  ### arp -a intranet ##########################################################

  # save original value, make sure file exist before the fact
  touch "$LOG_DIR"/node_data/nodes.arp.value &>/dev/null
  egrep -c "[0-9]+" "$LOG_DIR"/node_data/nodes.arp >"$LOG_DIR"/node_data/nodes.arp.value 2>&1

  # if zero, make it so
  if [ ! -s "$LOG_DIR"/node_data/nodes.arp.value ] &>/dev/null; then
    echo "0" >"$LOG_DIR"/node_data/nodes.arp.value 2>&1
  fi

  # add local address (arp) intranet, no ports on these
  arp -a 2>&1 |
    # ignore common default router IP address
    grep -vwE "(127.0.0.1|192.168.1.1|192.168.0.1|192.168.1.10.1|192.168.2.1|192.168.1.254|192.168.0.30|192.168.0.50|10.0.0.2|10.1.1.1|10.0.1.1|10.0.0.1|10.0.0.138|10.10.1.1)" 2>&1 |
    egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 |
    awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes.arp 2>&1

  # get interface and then ip address
  IFCONFIG=$(ifconfig 2>&1 | egrep "wlan*|eth*" 2>&1)
  IP_ADDRESS=$(echo "$IFCONFIG" 2>&1 | egrep "inet " 2>&1 |
    grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1 |
    egrep "[0-9]+.[0-9]+.[0-9]+" 2>&1)
  # just ping it all
  printf '%b' "${LOG_DATE:?} Status() Intranet.Ping: Pinging network!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  function arp_ping() {
    for ip in "${IP_ADDRESS:?}".{1..254}; do
      ping -c 1 -W 1 $ip | grep "64 bytes" | awk '{ print $4 }' | tr -d ':' &
    done >"$LOG_DIR"/node_data/nodes.ping
  }
  printf '%b' "${LOG_DATE:?} Status() Intranet.Ping: Found $(cat "$LOG_DIR"/node_data/nodes.ping 2>/dev/null | wc -l 2>&1) possible peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  # feed ping list to nodes.arp list
  cat "$LOG_DIR"/node_data/nodes.ping >>"$LOG_DIR"/node_data/nodes.arp

  # count arp nodes
  ARP_COUNT=$(cat "$LOG_DIR"/node_data/nodes.arp.value 2>&1)
  # get new.arp count
  ARP_NEW=$(cat "$LOG_DIR"/node_data/nodes.arp 2>/dev/null | wc -l 2>&1)
  # calculate arp values
  ARP_DIFF=$(echo "$ARP_COUNT-$ARP_NEW" 2>&1 | bc 2>&1)

  # setup arp file
  cat /tmp/nodes.arp 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >>"$LOG_DIR"/node_data/nodes 2>&1
  printf '%b' "${LOG_DATE:?} Status() Intranet.ARP() Found ${G1:?}${ARP_COUNT:?}${N0:?} possible new peers! (${ARP_DIFF:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# END
