#!/bin/bash

# By Rainman
# V20220401
# 0.0.7.6

source /home/pi/pitrump.conf
source /usr/local/bin/include/color

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

echo "$(uptime_daemon)" >"${LOG_DIR:?}"/node_data/uptime 2>&1

### addnodes ###################################################################

if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then

  # add node address (api) internet, (ipv4) no ports on these
  curl -sf https://chainz.cryptoid.info/trump/api.dws?q=nodes 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes.api 2>&1

  # get new count
  API_NEW=$(wc -l "$LOG_DIR"/node_data/nodes.api 2>&1 | awk '{ print $1 }' 2>&1)

  # setup api file
  cat "$LOG_DIR"/node_data/nodes.api 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes.all 2>&1
  printf '%b' "${LOG_DATE:?} Status() Chainz.C.API() Found ${G1:?}${API_NEW:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  ### arp -a intranet ##########################################################

  # add local address (arp) intranet, no ports on these, ignore common default router ip address
  arp -a 2>&1 | grep -v "?" 2>&1 | grep -vwE "(127.0.0.1|192.168.1.1|192.168.0.1|192.168.1.10.1|192.168.2.1|192.168.1.254|192.168.0.30|192.168.0.50|10.0.0.2|10.1.1.1|10.0.1.1|10.0.0.1|10.0.0.138|10.10.1.1)" 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes.arp 2>&1

  # get new.arp count
  ARP_NEW=$(wc -l "$LOG_DIR"/node_data/nodes.arp 2>&1 | awk '{ print $1 }' 2>&1)

  # setup arp file
  cat "$LOG_DIR"/node_data/nodes.arp 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >>"$LOG_DIR"/node_data/nodes.all 2>&1
  printf '%b' "${LOG_DATE:?} Status() Intranet.ARP() Found ${G1:?}${ARP_NEW:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# remove duplicates and create peers.tmp
# disregard invalid pattern address (cidr - classless inter-domain routing)
grepcidr -f "$LOG_DIR"/node_data/nodes.all "$LOG_DIR"/node_data/nodes.all | sort -n 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/peers.tmp 2>"${LOG_DIR:?}"/node_data/peers.cidr
TOTAL_NODES=$(echo "$API_NEW+$ARP_NEW" 2>&1 | bc 2>&1)
printf '%b' "${LOG_DATE:?} Status() Addnode.Script Total ${G1:?}${TOTAL_NODES:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

### token price ################################################################

# ticker (api price)
curl -sf https://api.coingecko.com/api/v3/coins/trumpcoin >"$LOG_DIR"/node_data/ticker 2>&1

# clean up ticker
cat "$LOG_DIR"/node_data/ticker 2>/dev/null | tr -d '"|,' 2>&1 | egrep -o "[a0-z9]+-[0-9]+usd:[0-9]+.[0-9]+" 2>&1 | egrep -o "usd:[0-9]+.[0-9]+" 2>&1 | tr -d 'usd:' >/tmp/ticker 2>&1

# count ticker lines, create average
TICKER_TOTAL=$(cat /tmp/ticker 2>/dev/null | awk '{ SUM += $1} END { print SUM }' 2>&1)
TICKER_LINES=$(wc -l /tmp/ticker 2>&1 | awk '{ print $1 }' 2>&1)
echo "${TICKER_TOTAL:?}/${TICKER_LINES:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >/tmp/ticker 2>&1

# setup ticker file
mv /tmp/ticker "$LOG_DIR"/node_data/ticker 2>&1
# api value
API_VALUE=$(cat "$LOG_DIR"/node_data/ticker 2>/dev/null | tail -1 2>&1)
printf '%b' "${LOG_DATE:?} Status() C.Gecko.API(): Found ${G1:?}${API_VALUE:?}${N0:?} average coingecko price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# END
