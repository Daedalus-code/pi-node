#!/bin/bash

# By Rainman
# V20222401
# 0.1.0.0

# shellcheck disable=SC2154

source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

### addnodes ###################################################################

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "300" ]] &>/dev/null; then

  RANDOM_WAIT=$((((RANDOM % 3) + 1)))

  # add node address (api) internet, (ipv4) no ports on these
  sleep "${RANDOM_WAIT:?}" && curl -s https://chainz.cryptoid.info/trump/api.dws?q=nodes 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/nodes.api 2>&1

  # get new count
  API_NEW=$(wc -l "${LOG_DIR:?}"/node_data/nodes.api 2>&1 | awk '{ print $1 }' 2>&1)

  # setup api file
  cat "${LOG_DIR:?}"/node_data/nodes.api 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/nodes.all 2>&1
  printf '%b' "${LOG_DATE:?} Status() Chainz.C.API() Found ${G1:?}${API_NEW:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  ### arp -a intranet ##########################################################

  # add local address (arp) intranet, no ports on these, ignore common default router ip address
  arp -a 2>&1 | grep -vwE "(127.0.0.1|192.168.1.1|192.168.0.1|192.168.1.10.1|192.168.2.1|192.168.1.254|192.168.0.30|192.168.0.50|10.0.0.2|10.1.1.1|10.0.1.1|10.0.0.1|10.0.0.138|10.10.1.1)" 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/nodes.arp 2>&1

  # get new.arp count
  ARP_NEW=$(wc -l "${LOG_DIR:?}"/node_data/nodes.arp 2>&1 | awk '{ print $1 }' 2>&1)

  # setup arp file
  cat "${LOG_DIR:?}"/node_data/nodes.arp 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >>"${LOG_DIR:?}"/node_data/nodes.all 2>&1
  printf '%b' "${LOG_DATE:?} Status() Intranet.ARP() Found ${G1:?}${ARP_NEW:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# remove duplicates and create peers.tmp
# disregard invalid pattern address (cidr - classless inter-domain routing)
grepcidr -f "${LOG_DIR:?}"/node_data/nodes.all "${LOG_DIR:?}"/node_data/nodes.all | sort -n 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/peers.tmp 2>"${LOG_DIR:?}"/node_data/peers.cidr
TOTAL_NODES=$(echo "$API_NEW+$ARP_NEW" 2>&1 | bc 2>&1)
printf '%b' "${LOG_DATE:?} Status() Addnode.Script Total ${G1:?}${TOTAL_NODES:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

### token price, volume ########################################################

# make sure curl, html2text and rrdtool exist
if ! [ -x "$(command -v curl)" ] &>/dev/null; then
  sudo apt-get install curl -y
fi
if ! [ -x "$(command -v rrdtool)" ] &>/dev/null; then
  sudo apt-get install rrdtool -y
fi
if ! [ -x "$(command -v html2text)" ] &>/dev/null; then
  sudo apt-get install html2text -y
fi

COIN_API="trumpcoin"
CURRENCY_API="usd"

curl -o "${LOG_DIR:?}"/node_data/stats/ticker.api -X 'GET' 'https://api.coingecko.com/api/v3/coins/'$COIN_API'/market_chart?vs_currency='$CURRENCY_API'&days='$days'' -H 'accept: application/json' &>/dev/null

# get token price
grep -o -P '(?<=,).*(?=]],"m)' "${LOG_DIR:?}"/node_data/stats/ticker.api >"${LOG_DIR:?}"/node_data/stats/price 2>&1
# get token volume
cat "${LOG_DIR:?}"/node_data/stats/ticker.api 2>&1 | tr -d '"|:' 2>&1 | egrep -o "volumes.*" 2>&1 | awk -F, '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/volume 2>&1

# keep last n of ticker price and volume
echo "$(tail -111 "${LOG_DIR:?}"/node_data/stats/price.avg 2>&1)" 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/price.avg.tmp 2>&1
mv "${LOG_DIR:?}"/node_data/stats/price.avg.tmp "${LOG_DIR:?}"/node_data/stats/price.avg 2>&1
echo "$(tail -111 "${LOG_DIR:?}"/node_data/stats/volume.avg 2>&1)" 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/volume.avg.tmp 2>&1
mv "${LOG_DIR:?}"/node_data/stats/volume.avg.tmp "${LOG_DIR:?}"/node_data/stats/volume.avg 2>&1

# api values
API_PRICE=$(cat "${LOG_DIR:?}"/node_data/stats/price 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)
API_VOLUME=$(cat "${LOG_DIR:?}"/node_data/stats/volume 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)

if [[ -z "$API_PRICE" ]] &>/dev/null; then
  # make sure ticker exist, use rrdtool database, if available
  rrdtool info /home/"$(whoami)"/stats/value.rrd 2>&1 | grep "last_ds" 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/price 2>&1
  # non responsive
  API_PRICE=$(cat "${LOG_DIR:?}"/node_data/stats/price 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)
fi

if [[ -z "$API_VOLUME" ]] &>/dev/null; then
  # make sure volume exist, use rrdtool database, if available
  rrdtool info /home/"$(whoami)"/stats/volume.rrd 2>&1 | grep "last_ds" 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/volume 2>&1
  # non responsive
  API_VOLUME=$(cat "${LOG_DIR:?}"/node_data/stats/volume 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)
fi

printf '%b' "${LOG_DATE:?} Status() Coingcko.Api() Found ${G1:?}${API_PRICE:?}${N0:?} price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
printf '%b' "${LOG_DATE:?} Status() Coingcko.Api() Found ${G1:?}${API_VOLUME:?}${N0:?} volume!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# END
