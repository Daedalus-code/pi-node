#!/bin/bash

# By Rainman
# V20222301
# 0.0.8.0

source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

### addnodes ###################################################################

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "300" ]] &>/dev/null; then

  # add node address (api) internet, (ipv4) no ports on these
  curl -sf https://chainz.cryptoid.info/trump/api.dws?q=nodes 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/nodes.api 2>&1

  # get new count
  API_NEW=$(wc -l "${LOG_DIR:?}"/node_data/nodes.api 2>&1 | awk '{ print $1 }' 2>&1)

  # setup api file
  cat "${LOG_DIR:?}"/node_data/nodes.api 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/nodes.all 2>&1
  printf '%b' "${LOG_DATE:?} Status() Chainz.C.API() Found ${G1:?}${API_NEW:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  ### arp -a intranet ##########################################################

  # add local address (arp) intranet, no ports on these, ignore common default router ip address
  arp -a 2>&1 | grep -vwE "(127.0.0.1|192.168.1.1|192.168.0.1|192.168.1.10.1|192.168.2.1|192.168.1.254|192.168.0.30|192.168.0.50|10.0.0.2|10.1.1.1|10.0.1.1|10.0.0.1|10.0.0.138|10.10.1.1)" 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/nodes.arp 2>&1

  # get new.arp count
  ARP_NEW=$(wc -l "${LOG_DIR:?}"/node_data/nodes.arp 2>&1 | awk '{ print $1 }' 2>&1)

  # setup arp file
  cat "${LOG_DIR:?}"/node_data/nodes.arp 2>/dev/null | sort -n 2>&1 | awk '!a[$0]++' >>"${LOG_DIR:?}"/node_data/nodes.all 2>&1
  printf '%b' "${LOG_DATE:?} Status() Intranet.ARP() Found ${G1:?}${ARP_NEW:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# remove duplicates and create peers.tmp
# disregard invalid pattern address (cidr - classless inter-domain routing)
grepcidr -f "${LOG_DIR:?}"/node_data/nodes.all "${LOG_DIR:?}"/node_data/nodes.all | sort -n 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/peers.tmp 2>"${LOG_DIR:?}"/node_data/peers.cidr
TOTAL_NODES=$(echo "$API_NEW+$ARP_NEW" 2>&1 | bc 2>&1)
printf '%b' "${LOG_DATE:?} Status() Addnode.Script Total ${G1:?}${TOTAL_NODES:?}${N0:?} Peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

### token price ################################################################

# need curl, html2text for this
if ! [ -x "$(command -v curl)" ] &>/dev/null; then
  sudo apt-get install curl -y
fi
if ! [ -x "$(command -v html2text)" ] &>/dev/null; then
  sudo apt-get install html2text -y
fi

# fetch price from coinmarketcap (api price)
URL_TOKEN="https://coinmarketcap.com/currencies/trumpcoin/"
curl -sf "$URL_TOKEN" >"${LOG_DIR:?}"/node_data/stats/ticker.cmc 2>&1

# clean up file with html2text
cat "${LOG_DIR:?}"/node_data/stats/ticker.cmc 2>/dev/null | html2text >"${LOG_DIR:?}"/node_data/stats/ticker.tmp 2>&1
# get token price
grep -A1 "Trumpcoin Price Today" "${LOG_DIR:?}"/node_data/stats/ticker.tmp 2>&1 | tail -1 2>&1 | awk '{ print $3 }' 2>&1 | tr -d '$' 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/stats/ticker 2>&1
# get token volume, remove old file
grep "Trading Volume24h" "${LOG_DIR:?}"/node_data/stats/ticker.tmp 2>&1 | awk '{ print $3 }' 2>&1 | tr -d '$|,' >"${LOG_DIR:?}"/node_data/stats/volume 2>&1 && rm "${LOG_DIR:?}"/node_data/stats/ticker.tmp &>/dev/null

# keep last n of ticker price
echo "$(tail -11 "${LOG_DIR:?}"/node_data/stats/ticker.avg 2>&1)" >"${LOG_DIR:?}"/node_data/stats/ticker.avg.tmp 2>&1
mv "${LOG_DIR:?}"/node_data/stats/ticker.avg.tmp "${LOG_DIR:?}"/node_data/stats/ticker.avg 2>&1

# api value
API_VALUE=$(cat "${LOG_DIR:?}"/node_data/stats/ticker 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)
if [[ -z "$API_VALUE" ]]; then
  # non responsive
  API_VALUE="0"
fi

printf '%b' "${LOG_DATE:?} Status() C.Market.Cap() Found ${G1:?}${API_VALUE:?}${N0:?} Coinmarketcap price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# END
