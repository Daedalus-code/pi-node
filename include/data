#!/bin/bash

# By Rainman
# V20212812
# 0.1.6.6

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}

source /home/pi/pitrump.conf
source /usr/local/bin/include/color

# date for logs
LOG_DATE=$(date '+%Y-%d-%mT%TZ' 2>&1)

### addnodes ###################################################################

if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then

  # save original value, make sure file exist before the fact
  touch "$LOG_DIR"/node_data/nodes.api &>/dev/null
  egrep -c "[0-9]+" "$LOG_DIR"/node_data/nodes.api >"$LOG_DIR"/node_data/nodes.api.value 2>&1

  # if zero, make it so
  if [ ! -s "$LOG_DIR"/node_data/nodes.ping ] &>/dev/null; then
    echo "0" >"$LOG_DIR"/node_data/nodes.ping 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() Intranet.Ping: Note: First Round! Need more data!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi

  printf '%b' "${LOG_DATE:?} Status() Update.Nodes() Looking for peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  # add node address (api) internet
  curl -sf https://chainz.cryptoid.info/trump/api.dws?q=nodes 2>&1 |
    # clean up the file above (ipv4) no ports on these
    egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 |
    awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes.api 2>&1

  # count api nodes
  API_COUNT=$(cat "$LOG_DIR"/node_data/nodes.api.value 2>/dev/null)
  # get new count
  API_NEW=$(cat "$LOG_DIR"/node_data/nodes.api 2>/dev/null | wc -l 2>&1)
  # calculate api values
  API_DIFF=$(echo "$API_COUNT-$API_NEW" 2>&1 | bc 2>&1)

  # setup api file
  cat "$LOG_DIR"/node_data/nodes.api 2>/dev/null |
    sort -n 2>&1 | awk '!a[$0]++' >"$LOG_DIR"/node_data/peers.tmp 2>&1
  printf '%b' "${LOG_DATE:?} Status() Chainz.C.API() Found ${G1:?}${API_COUNT:?}${N0:?} Peers! (${API_DIFF:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  ### arp -a intranet ##########################################################

  # save original value, make sure file exist before the fact
  touch "$LOG_DIR"/node_data/nodes.arp &>/dev/null
  egrep -c "[0-9]+" "$LOG_DIR"/node_data/nodes.arp >"$LOG_DIR"/node_data/nodes.arp.value 2>&1

  # if zero, make it so
  if [ ! -s "$LOG_DIR"/node_data/nodes.arp.value ] &>/dev/null; then
    echo "0" >"$LOG_DIR"/node_data/nodes.arp.value 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() Intranet.ARP() Note: First Round! Need more data!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi

  # add local address (arp) intranet, no ports on these
  arp -a 2>&1 | grep -v "?" 2>&1 |
    # ignore common default router IP address
    grep -vwE "(127.0.0.1|192.168.1.1|192.168.0.1|192.168.1.10.1|192.168.2.1|192.168.1.254|192.168.0.30|192.168.0.50|10.0.0.2|10.1.1.1|10.0.1.1|10.0.0.1|10.0.0.138|10.10.1.1)" 2>&1 |
    egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 |
    awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes.arp 2>&1

  # count arp nodes
  ARP_COUNT=$(cat "$LOG_DIR"/node_data/nodes.arp.value 2>/dev/null)
  # get new.arp count
  ARP_NEW=$(cat "$LOG_DIR"/node_data/nodes.arp 2>/dev/null | wc -l 2>&1)
  # calculate arp values
  ARP_DIFF=$(echo "$ARP_COUNT-$ARP_NEW" 2>&1 | bc 2>&1)

  # setup arp file
  cat "$LOG_DIR"/node_data/nodes.arp 2>/dev/null |
    sort -n 2>&1 | awk '!a[$0]++' >>"$LOG_DIR"/node_data/peers.tmp 2>&1
  printf '%b' "${LOG_DATE:?} Status() Intranet.ARP() Found ${G1:?}${ARP_COUNT:?}${N0:?} Peers! (${ARP_DIFF:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

### ping intranet ##############################################################

# save original value, make sure file exist before the fact
touch "$LOG_DIR"/node_data/nodes.ping &>/dev/null
egrep -c "[0-9]+" "$LOG_DIR"/node_data/nodes.ping >"$LOG_DIR"/node_data/nodes.ping.value 2>&1

# get interface and then ip address
IP_ADDRESS_PING=$(echo "$(ifconfig 2>&1 | egrep "wlan*|eth*" 2>&1)" 2>&1 |
  egrep "inet " 2>&1 |
  grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1 |
  egrep -o "[0-9]+.[0-9]+.[0-9]+" 2>&1)

# make sure  nodes.ping exist
touch "$LOG_DIR"/node_data/nodes.ping &>/dev/null
# empty the file before the fact, each round
truncate -s 0 "$LOG_DIR"/node_data/nodes.ping &>/dev/null

# ping local network using ip_address_ping var
for ip in "${IP_ADDRESS_PING:?}".{1..254}; do
  ping -c 1 -W 1 $ip 2>&1 | grep "64 bytes" 2>&1 |
    awk '{ print $4 }' 2>&1 | tr -d ':' &
done >"$LOG_DIR"/node_data/nodes.ping

if ! echo "$IP_ADDRESS_PING" | grep "192.168.1" &>/dev/null; then
  IP_ADDRESS_PING="192.168.0"
  # ping local network using ip_address_ping var
  for ip in "${IP_ADDRESS_PING:?}".{1..254}; do
    ping -c 1 -W 1 $ip 2>&1 | grep "64 bytes" 2>&1 |
      awk '{ print $4 }' 2>&1 | tr -d ':' &
  done >>"$LOG_DIR"/node_data/nodes.ping
fi

IP_ADDRESS_PING="10.0.0"
# ping local network using ip_address_ping var
for ip in "${IP_ADDRESS_PING:?}".{1..254}; do
  ping -c 1 -W 1 $ip 2>&1 | grep "64 bytes" 2>&1 |
    awk '{ print $4 }' 2>&1 | tr -d ':' &
done >>"$LOG_DIR"/node_data/nodes.ping

# count arp nodes
PING_COUNT=$(cat "$LOG_DIR"/node_data/nodes.ping.value 2>/dev/null)
# get new.arp count
PING_NEW=$(cat "$LOG_DIR"/node_data/nodes.ping 2>/dev/null | wc -l 2>&1)
# calculate arp values
PING_DIFF=$(echo "$PING_COUNT-$PING_NEW" 2>&1 | bc 2>&1)

# setup ping file
cat "$LOG_DIR"/node_data/nodes.ping 2>/dev/null |
  sort -n 2>&1 | awk '!a[$0]++' >>"$LOG_DIR"/node_data/peers.tmp 2>&1
printf '%b' "${LOG_DATE:?} Status() Intranet.Ping: Found ${G1:?}${PING_COUNT:?}${N0:?} Peers! (${PING_DIFF:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# remove duplicates
cat "$LOG_DIR"/node_data/nodes.tmp 2>/dev/null |
  sort -n 2>&1 | awk '!a[$0]++' >"$LOG_DIR"/node_data/nodes 2>&1

### token price ##############################################################

# ticker (api price)
curl -sf https://api.coingecko.com/api/v3/coins/trumpcoin >"$LOG_DIR"/node_data/ticker 2>&1

# clean up ticker
cat "$LOG_DIR"/node_data/ticker 2>/dev/null | tr -d '"|,' 2>&1 |
  egrep -o "[a0-z9]+-[0-9]+usd:[0-9]+.[0-9]+" 2>&1 |
  egrep -o "usd:[0-9]+.[0-9]+" 2>&1 | tr -d 'usd:' >/tmp/ticker 2>&1

# count ticker lines, create average
TICKER_TOTAL=$(cat /tmp/ticker 2>/dev/null |
  awk '{ SUM += $1} END { print SUM }' 2>&1)
TICKER_LINES=$(cat /tmp/ticker 2>/dev/null | wc -l 2>&1)
echo "${TICKER_TOTAL:?}/${TICKER_LINES:?}" 2>&1 |
  bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >/tmp/ticker 2>&1

# setup ticker file
mv /tmp/ticker "$LOG_DIR"/node_data/ticker 2>&1
# api value
API_VALUE=$(cat "$LOG_DIR"/node_data/ticker 2>/dev/null | tail -1 2>&1)
printf '%b' "${LOG_DATE:?} Status() C.Gecko.API(): Found ${G1:?}${API_VALUE:?}${N0:?} average coingecko price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# END
