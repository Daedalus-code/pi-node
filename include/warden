#!/bin/bash

# By Rainman
# V20222701
# 0.1.6.9

# pitrump configuration
source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

if [ ! -f "${LOG_DIR:?}"/node_data/stats/date ] &>/dev/null; then
  # create directories, ruled by configuration
  mkdir "${LOG_DIR:?}"/node_data &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/peers &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/stats &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client/tmp &>/dev/null

  date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1
fi
# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}
# create uptime
echo "$(uptime_daemon 2>&1)" >"${LOG_DIR:?}"/node_data/uptime 2>&1

# screen indicator (is it running)
if ! screen -list 2>&1 | grep -q "add_peers" &>/dev/null; then
  # below one round
  SCREEN_IND="${GR:?}N${N0:?}"
else
  NOW_TIME=$(date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME=$(screen -list 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC=$(echo "$NOW_TIME-$SCREEN_TIME" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
  if [[ -z "$SCREEN_CALC" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE="0"
  else
    SCREEN_VALUE="${SCREEN_CALC:?}"
  fi
  ADD_LINE=$(wc -l "${LOG_DIR:?}"/node_data/add_peers.check 2>&1 | awk '{ print $1 }' 2>&1)
  # kill time jump
  if [[ "$SCREEN_CALC" -gt "42" ]] &>/dev/null; then
    killall screen &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script. (time jump)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND="${GR:?}*${N0:?}"
    SCREEN_VALUE="${GR:?}0${N0:?}"
  fi
  # kill wrong list
  if [[ "$SCREEN_CALC" -gt "$(echo "$ADD_LINE/2" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    killall screen &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND="${GR:?}*${N0:?}"
    SCREEN_VALUE="${GR:?}0${N0:?}"
  fi # still running
  SCREEN_IND="${CY:?}*${N0:?}"
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  # error: couldn't connect to server
  if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/client/tmp/getinfo &>/dev/null; then
    # error with server (daemon), stopping
    printf '%b' "${R1:?}${LOG_DATE:?} Status() Wallet.Warden: PID() $(pidof trumpcoind 2>&1) Couldn't connect to server! Stopping daemon now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "[${R1:?}!!${N0:?}] "
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
    printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: ${GR:?}::${N0:?} [${R1:?}XX${N0:?}] ${GR:?}::${N0:?} Rebooting system now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    sudo reboot 2>&1
  fi
fi

# daemon uptime greater then n
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  if pgrep -x trumpcoind &>/dev/null; then
    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID() ${CY:?}$(pidof trumpcoind 2>&1)${N0:?} ${GR:?}::${N0:?} [${G1:?}Ok${N0:?}] ${GR:?}::${N0:?} Daemon Uptime ${UPTIME:?} ${SCREEN_IND:?} ${GR:?}$SCREEN_VALUE${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() System.Warden: $(cat "${LOG_DIR:?}"/node_data/stats/uptime 2>/dev/null)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  else
    # make sure debug.log exist
    touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # remove old files
    rm "${WALLET_DIR:?}"/onion &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    yes "" | "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### run with or without a display ##############################################

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "180" ]] &>/dev/null; then

  if [[ -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then

    if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.dashbord 2>&1)" -lt "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.warden 2>&1)" ]] &>/dev/null; then
      # remove old file
      rm "${LOG_DIR:?}"/node_data/stats/time.dashbord &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Removing old file! -> ${GR:?}time.dashbord${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.warden 2>&1 # save warden time

  NOGO_N="0"
  REAL_CTRL="pitrump"
  NOGO="${G1:?}Ok${N0:?}"

  # time.dashbord exist
  if [[ -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then

    PITRUMP=$(egrep "pitrump|warden" "${LOG_DIR:?}"/debug.log 2>&1 | tail -5 2>&1 | grep -c "pitrump" 2>&1)
    WARDEN=$(egrep "pitrump|warden" "${LOG_DIR:?}"/debug.log 2>&1 | tail -5 2>&1 | grep -c "warden" 2>&1)

    if [[ "${PITRUMP:?}" -gt "${WARDEN:?}" ]] &>/dev/null; then

      NOGO="${CY:?}O${G1:?}k${N0:?}"
      NOGO_N="0"
    else
      NRANDOM_0=$((((RANDOM % 4) + 1)))
      NRANDOM_1=$((((RANDOM % 3) + 1)))
      NRANDOM_3=$(echo "${NRANDOM_0:?}+${NRANDOM_1:?}" 2>&1 | bc 2>&1)
      URANDOM=$(tr -dc 'aA0-zZ9' </dev/urandom 2>&1 | head -c "${NRANDOM_3:?}" 2>&1 | rev 2>&1)
      REAL_CTRL="${GR:?}${URANDOM:?}${N0:?}" # found data, (messy data, from whom?)

      NOGO="${CY:?}Ok${N0:?}"
      NOGO_N="1"
    fi

  else # no data
    NOGO_N="0"
    REAL_CTRL="warden"
    NOGO="${G0:?}Ok${N0:?}"
  fi

  # time.dashbord is missing
  if [[ ! -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then

    function run_functions() {
      # where are we now?
      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/functions
      # get data from functions
      cd || exit && bash /usr/local/bin/include/functions
    }

    if [[ "$NOGO_N" -eq "0" ]] &>/dev/null; then

      # no double trouble when overlapping pitrump <> warden
      if ! tail -5 "${LOG_DIR:?}"/debug.log 2>&1 | grep "Starting adding nodes!" &>/dev/null; then

        run_functions
      fi
    fi

    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G1:?}${NOGO:?}${N0:?}] ${G1:?}<${N0:?} [ ${GR:?}${REAL_CTRL:?}${N0:?} ]\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  else
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G1:?}Ok${N0:?}] ${G1:?}<${N0:?} [ ${GR:?}pitrump${N0:?} ]\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# END
