#!/bin/bash

# By Rainman
# V20223101
# 0.3.0.8

# pitrump configuration
source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

if [ ! -f "${LOG_DIR:?}"/node_data/stats/date ] &>/dev/null; then

  # create directories, ruled by configuration
  mkdir "${LOG_DIR:?}"/node_data &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/peers &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/stats &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client/tmp &>/dev/null
fi

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)
if [[ -z "$LOG_DATE" ]] &>/dev/null; then
  LOG_DATE=$(date '+%Y-%m-%dT%TZ' 2>&1)
fi

### wait time based on cpu speed ###############################################

# do this once (cpu speed, wait time)
if [ ! -f "${LOG_DIR:?}"/node_data/stats/lscpu ] &>/dev/null; then
  lscpu >"${LOG_DIR:?}"/node_data/stats/lscpu 2>&1
  cat "${LOG_DIR:?}"/node_data/stats/lscpu 2>/dev/null | grep "CPU max" 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk '{ print $4 }' >"${LOG_DIR:?}"/node_data/stats/cpuspeed 2>&1
fi

if ! egrep "[0-9]+" "${WALLET_DIR:?}"/wait &>/dev/null; then

  if grep "LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=" "${LOG_DIR:?}"/debug.log &>/dev/null; then

    # 142s load = 1800 MHz average time for a default raspberry pi 400 rev 1.1
    # 360s load = 1200 MHz average time for a default raspberry pi 3 model b rev 1.2

    BOOTS=$(head -1 "${LOG_DIR:?}"/debug.log 2>&1)
    READY=$(grep "LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=" "${LOG_DIR:?}"/debug.log 2>&1 | head -1 2>&1 | awk '{ print $1 }' 2>&1)

    BOOTS=$(echo "$BOOTS" 2>&1 | egrep -o "T[0-9]+:[0-9]+:[0-9]+" 2>&1 | tr -d 'T' 2>&1)
    READY=$(echo "$READY" 2>&1 | egrep -o "T[0-9]+:[0-9]+:[0-9]+" 2>&1 | tr -d 'T' 2>&1)

    # creat wait_time
    echo "$(echo "${READY:?}" 2>&1 | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }' 2>&1)-$(echo "${BOOTS:?}" 2>&1 | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')" 2>&1 | bc -l >"${WALLET_DIR:?}"/wait 2>&1
    # create wait_time_block
    echo "$(cat "${WALLET_DIR:?}"/wait 2>/dev/null)+60" 2>&1 | bc -l >>"${WALLET_DIR:?}"/wait 2>&1

    # waiting values
    WAIT_TIME=$(head -1 "${WALLET_DIR:?}"/wait 2>&1)
    WAIT_TIME_BLOCK=$(tail -1 "${WALLET_DIR:?}"/wait 2>&1)

    printf '%b' "${LOG_DATE:?} Status() CPU.SpeedMHz() $(echo -e "\e[4m$(cat /sys/firmware/devicetree/base/model 2>/dev/null | tr -d '\0' 2>&1)\e[0m") [ ${G1:?}$(cat "${LOG_DIR:?}"/node_data/stats/cpuspeed 2>/dev/null)MHz${N0:?} ] ${G1:?}${WAIT_TIME:?}${N0:?}/${G0:?}${WAIT_TIME_BLOCK:?}${N0:?} Wait${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# waiting values
WAIT_TIME=$(head -1 "${WALLET_DIR:?}"/wait 2>&1)
WAIT_TIME_BLOCK=$(tail -1 "${WALLET_DIR:?}"/wait 2>&1)

# non responsive, use default timer
if [[ -z "$WAIT_TIME" ]] &>/dev/null; then
  WAIT_TIME="360"
  echo "${WAIT_TIME:?}" >"${WALLET_DIR:?}"/wait
fi
if [[ -z "$WAIT_TIME_BLOCK" ]] &>/dev/null; then
  WAIT_TIME_BLOCK="420"
  echo "${WAIT_TIME_BLOCK:?}" >>"${WALLET_DIR:?}"/wait
fi

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}
# create uptime
echo "$(uptime_daemon 2>&1)" >"${LOG_DIR:?}"/node_data/uptime 2>&1

# create screen list
screen -list >"${LOG_DIR:?}"/node_data/stats/screens 2>&1

# screen indicator (is add_cg running)
if ! cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "add_cg" &>/dev/null; then
  # below one round
  SCREEN_IND_CG="${GR:?}N${N0:?}"
else

  # screen add_cg
  NOW_TIME_CG=$(date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME_CG=$(cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep "add_cg" 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC_CG=$(echo "$NOW_TIME_CG-$SCREEN_TIME_CG" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

  if [[ -z "$SCREEN_CALC_CG" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE_CG="${GR:?}0${GR:?}"
  else
    SCREEN_VALUE_CG="${SCREEN_CALC_CG:?}"
  fi

  # kill old session
  if [[ "$SCREEN_CALC_CG" -gt "7" ]] &>/dev/null; then
    screen -X -S add_cg quit
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_cg script. (old)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND_CG="${GR:?}*${N0:?}"
    SCREEN_VALUE_CG="${GR:?}0${GR:?}"
  fi

  # still running
  SCREEN_IND_CG="${CY:?}*${N0:?}"
fi

# screen indicator (is add_cmc running)
if ! cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "add_cmc" &>/dev/null; then
  # below one round
  SCREEN_IND_CMC="${GR:?}N${N0:?}"
else

  # screen add_cg
  NOW_TIME_CMC=$(date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME_CMC=$(cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep "add_cmc" 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC_CMC=$(echo "$NOW_TIME_CMC-$SCREEN_TIME_CMC" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

  if [[ -z "$SCREEN_CALC_CMC" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE_CMC="${GR:?}0${GR:?}"
  else
    SCREEN_VALUE_CMC="${SCREEN_CALC_CMC:?}"
  fi

  # kill old session
  if [[ "$SCREEN_CALC_CMC" -gt "7" ]] &>/dev/null; then
    screen -X -S add_cmc quit
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_cmc script. (old)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND_CMC="${GR:?}*${N0:?}"
    SCREEN_VALUE_CMC="${GR:?}0${GR:?}"
  fi

  # still running
  SCREEN_IND_CMC="${CY:?}*${N0:?}"
fi

# screen indicator (is add_peers running)
if ! cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "add_peers" &>/dev/null; then
  # below one round
  SCREEN_IND_P2P="${GR:?}N${N0:?}"
else

  # screen add_peers
  NOW_TIME_P2P=$(date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME_P2P=$(cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep "add_peers" 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC_P2P=$(echo "$NOW_TIME_P2P-$SCREEN_TIME_P2P" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

  if [[ -z "$SCREEN_CALC_P2P" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
  else
    SCREEN_VALUE_P2P="${SCREEN_CALC_P2P:?}"
  fi

  ADD_LINE=$(wc -l "${LOG_DIR:?}"/node_data/add_peers.check 2>&1 | awk '{ print $1 }' 2>&1)

  # kill time jump
  if [[ "$SCREEN_CALC_P2P" -gt "42" ]] &>/dev/null; then
    screen -X -S add_peers quit
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script. (time jump)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND_P2P="${GR:?}*${N0:?}"
    SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
  fi

  # kill screen session being to long (max 30 seconds on average for each connection attempt)
  if [[ "$SCREEN_CALC_P2P" -gt "$(echo "${ADD_LINE:?}/2" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    screen -X -S add_peers quit
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND_P2P="${GR:?}*${N0:?}"
    SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
  fi

  # still running
  SCREEN_IND_P2P="${CY:?}*${N0:?}"
fi

if [[ -z "$SCREEN_VALUE_CG" ]] &>/dev/null; then
  # non responsive
  SCREEN_VALUE_CG="${GR:?}0${GR:?}"
fi
if [[ -z "$SCREEN_VALUE_CMC" ]] &>/dev/null; then
  # non responsive
  SCREEN_VALUE_CMC="${GR:?}0${GR:?}"
fi
if [[ -z "$SCREEN_VALUE_P2P" ]] &>/dev/null; then
  # non responsive
  SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  # error: couldn't connect to server
  if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/client/tmp/getinfo &>/dev/null; then
    # error with server (daemon), stopping
    printf '%b' "${R1:?}${LOG_DATE:?} Status() Wallet.Warden: PID() $(pidof trumpcoind 2>&1) Couldn't connect to server! Stopping daemon now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "[${R1:?}!!${N0:?}] "
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
    printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: ${GR:?}::${N0:?} [${R1:?}XX${N0:?}] ${GR:?}::${N0:?} Rebooting system now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    sudo reboot 2>&1
  fi
fi

# daemon uptime greater then n
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  if pgrep -x trumpcoind &>/dev/null; then

    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID() ${CY:?}$(pidof trumpcoind 2>&1)${N0:?} ${GR:?}::${N0:?} [${G1:?}Ok${N0:?}] ${GR:?}::${N0:?} Daemon Uptime ${UPTIME:?} ${GR:?}(${SCREEN_VALUE_P2P:?}/${SCREEN_VALUE_CG:?}/${SCREEN_VALUE_CMC:?})${N0:?} ${SCREEN_IND_P2P:?}${SCREEN_IND_CG:?}${SCREEN_IND_CMC:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() System.Warden: $(cat "${LOG_DIR:?}"/node_data/stats/uptime 2>/dev/null)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  else
    # make sure debug.log exist
    touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # remove old files
    rm "${WALLET_DIR:?}"/onion &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    yes "" | "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### run with or without a display ##############################################

function run_functions() {
  if [[ -f "${LOG_DIR:?}"/node_data/func.lock ]] &>/dev/null; then
    # no double trouble when overlapping pitrump <> warden
    if ! tail -5 "${LOG_DIR:?}"/debug.log 2>&1 | grep "Removing old file!" &>/dev/null; then
      # time.dashbord exist, don't continue
      if [[ ! -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then
        # where are we now?
        PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/functions
        # get data from functions
        cd || exit && bash /usr/local/bin/include/functions
      fi
    fi
  fi
}

# delete old time lock
if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/func.lock 2>&1)" -lt "$(date +%s 2>&1)" ]] &>/dev/null; then
  rm "${LOG_DIR:?}"/node_data/func.lock &>/dev/null
fi

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "${WAIT_TIME:?}" ]] &>/dev/null; then

  if [[ ! -f "${LOG_DIR:?}"/node_data/func.lock ]] &>/dev/null; then

    # create time lock file
    echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/func.lock 2>&1 # save lock time

    # time.dashbord exist, continue
    if [[ -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then

      DETACH="${G1:?}<${N0:?} [ ${G1:?}pitrump${N0:?} ]"

      if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.dashbord 2>&1)" -lt "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.warden 2>&1)" ]] &>/dev/null; then

        # no double trouble when overlapping pitrump <> warden
        if ! tail -5 "${LOG_DIR:?}"/debug.log 2>&1 | grep "Removing old file!" &>/dev/null; then

          DETACH="${CY:?}<<${N0:?} [ ${CY:?}Swap${N0:?} ]"

          run_functions
        fi
        # remove old file
        rm "${LOG_DIR:?}"/node_data/stats/time.dashbord &>/dev/null
        printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Removing old file! -> ${GR:?}time.dashbord${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      fi

      echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.warden 2>&1 # save warden time

      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G1:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

      # remove lock file
      rm "${LOG_DIR:?}"/node_data/func.lock &>/dev/null

    else # time.dashbord don't exist, continue with warden

      # no double trouble when overlapping pitrump <> warden
      if ! tail -5 "${LOG_DIR:?}"/debug.log 2>&1 | grep "Removing old file!" &>/dev/null; then

        DETACH="${G0:?}<${N0:?} [ ${G0:?}warden${N0:?} ]"

        run_functions
      else
        DETACH="${CY:?}<<${N0:?} [ ${CY:?}Swap${N0:?} ]"
      fi
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G0:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

      # remove lock file
      rm "${LOG_DIR:?}"/node_data/func.lock &>/dev/null
    fi
  fi
fi

# END
