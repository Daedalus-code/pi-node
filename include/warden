#!/bin/bash

# By Rainman
# V20222801
# 0.1.9.3

# pitrump configuration
source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

if [ ! -f "${LOG_DIR:?}"/node_data/stats/date ] &>/dev/null; then

  # create directories, ruled by configuration
  mkdir "${LOG_DIR:?}"/node_data &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/peers &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/stats &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client/tmp &>/dev/null
fi

date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1
uptime 2>&1 | xargs >"${LOG_DIR:?}"/node_data/stats/uptime 2>&1

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

### wait time based on cpu speed ###############################################

if [ ! -f "${LOG_DIR:?}"/node_data/stats/cpuspeed ] &>/dev/null; then

  # do this once (cpu speed, wait time)
  if [ ! -f "${LOG_DIR:?}"/node_data/stats/lscpu ] &>/dev/null; then
    lscpu >"${LOG_DIR:?}"/node_data/stats/lscpu 2>&1
    cat "${LOG_DIR:?}"/node_data/stats/lscpu 2>/dev/null | grep "CPU max" 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk '{ print $4 }' >"${LOG_DIR:?}"/node_data/stats/cpuspeed 2>&1
  fi

  # greater or equal to 1800MHz + (1.8GHz + ) -> pi4
  if [[ "$(cat "${LOG_DIR:?}"/node_data/stats/cpuspeed 2>/dev/null)" -ge "1800" ]] &>/dev/null; then
    echo "200" >"${LOG_DIR:?}"/node_data/wait && echo "240" >>"${LOG_DIR:?}"/node_data/wait
    printf '%b' "${LOG_DATE:?} Status() CPU.SpeedMHz() $(echo -e "\e[4m$(cat /sys/firmware/devicetree/base/model 2>/dev/null | tr -d '\0' 2>&1)\e[0m") [ 1800MHz+ ] ${G1:?}200${N0:?}/${G0:?}240${N0:?} Wait${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # greater or equal to 1400MHz + (1.4GHz + ) -> pi3+
  elif [[ "$(cat "${LOG_DIR:?}"/node_data/stats/cpuspeed 2>/dev/null)" -ge "1400" ]] &>/dev/null; then
    echo "260" >"${LOG_DIR:?}"/node_data/wait && echo "320" >>"${LOG_DIR:?}"/node_data/wait
    printf '%b' "${LOG_DATE:?} Status() CPU.SpeedMHz() $(echo -e "\e[4m$(cat /sys/firmware/devicetree/base/model 2>/dev/null | tr -d '\0' 2>&1)\e[0m") [ 1400 - 1800MHz ] ${G1:?}260${N0:?}/${G0:?}320${N0:?} Wait${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  # greater or equal to 1200MHz + (1.2GHz + ) -> pi3
  elif [[ "$(cat "${LOG_DIR:?}"/node_data/stats/cpuspeed 2>/dev/null)" -ge "1200" ]] &>/dev/null; then
    echo "300" >"${LOG_DIR:?}"/node_data/wait && echo "360" >>"${LOG_DIR:?}"/node_data/wait
    printf '%b' "${LOG_DATE:?} Status() CPU.SpeedMHz() $(echo -e "\e[4m$(cat /sys/firmware/devicetree/base/model 2>/dev/null | tr -d '\0' 2>&1)\e[0m") [ 1200 - 1400MHz ] ${G1:?}300${N0:?}/${G0:?}360${N0:?} Wait${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  # greater or equal to 900MHz + (0.9GHz + ) -> pi2
  elif [[ "$(cat "${LOG_DIR:?}"/node_data/stats/cpuspeed 2>/dev/null)" -ge "900" ]] &>/dev/null; then
    echo "420" >"${LOG_DIR:?}"/node_data/wait && echo "480" >>"${LOG_DIR:?}"/node_data/wait
    printf '%b' "${LOG_DATE:?} Status() CPU.SpeedMHz() $(echo -e "\e[4m$(cat /sys/firmware/devicetree/base/model 2>/dev/null | tr -d '\0' 2>&1)\e[0m") [ 900 - 1200MHz ] ${G1:?}420${N0:?}/${G0:?}480${N0:?} Wait${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # greater or equal to 600MHz + (0.6GHz + ) -> pi
  elif [[ "$(cat "${LOG_DIR:?}"/node_data/stats/cpuspeed 2>/dev/null)" -ge "600" ]] &>/dev/null; then
    echo "600" >"${LOG_DIR:?}"/node_data/wait && echo "940" >>"${LOG_DIR:?}"/node_data/wait
    printf '%b' "${LOG_DATE:?} Status() CPU.SpeedMHz() $(echo -e "\e[4m$(cat /sys/firmware/devicetree/base/model 2>/dev/null | tr -d '\0' 2>&1)\e[0m") [ 600 - 900MHz ] ${G1:?}600${N0:?}/${G0:?}940${N0:?} Wait${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# get waiting orders
WAIT_TIME=$(head -1 "${LOG_DIR:?}"/node_data/wait 2>&1)
WAIT_TIME_BLOCK=$(tail -1 "${LOG_DIR:?}"/node_data/wait 2>&1)

# non responsive, use default timer
if [[ -z "$WAIT_TIME" ]] &>/dev/null; then
  WAIT_TIME="300"
fi
if [[ -z "$WAIT_TIME_BLOCK" ]] &>/dev/null; then
  WAIT_TIME_BLOCK="360"
fi

# get waiting orders
WAIT_TIME=$(head -1 "${LOG_DIR:?}"/node_data/wait 2>&1)

# non responsive, use default timer
if [[ -z "$WAIT_TIME" ]] &>/dev/null; then
  WAIT_TIME="300"
fi

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}
# create uptime
echo "$(uptime_daemon 2>&1)" >"${LOG_DIR:?}"/node_data/uptime 2>&1

# screen indicator (is it running)
if ! screen -list 2>&1 | grep -q "add_peers" &>/dev/null; then
  # below one round
  SCREEN_IND="${GR:?}N${N0:?}"
else
  NOW_TIME=$(date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME=$(screen -list 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC=$(echo "$NOW_TIME-$SCREEN_TIME" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
  if [[ -z "$SCREEN_CALC" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE="0"
  else
    SCREEN_VALUE="${SCREEN_CALC:?}"
  fi
  ADD_LINE=$(wc -l "${LOG_DIR:?}"/node_data/add_peers.check 2>&1 | awk '{ print $1 }' 2>&1)
  # kill time jump
  if [[ "$SCREEN_CALC" -gt "42" ]] &>/dev/null; then
    killall screen &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script. (time jump)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND="${GR:?}*${N0:?}"
    SCREEN_VALUE="${GR:?}0${N0:?}"
  fi
  # kill wrong list
  if [[ "$SCREEN_CALC" -gt "$(echo "$ADD_LINE/2" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    killall screen &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND="${GR:?}*${N0:?}"
    SCREEN_VALUE="${GR:?}0${N0:?}"
  fi # still running
  SCREEN_IND="${CY:?}*${N0:?}"
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  # error: couldn't connect to server
  if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/client/tmp/getinfo &>/dev/null; then
    # error with server (daemon), stopping
    printf '%b' "${R1:?}${LOG_DATE:?} Status() Wallet.Warden: PID() $(pidof trumpcoind 2>&1) Couldn't connect to server! Stopping daemon now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "[${R1:?}!!${N0:?}] "
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
    printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: ${GR:?}::${N0:?} [${R1:?}XX${N0:?}] ${GR:?}::${N0:?} Rebooting system now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    sudo reboot 2>&1
  fi
fi

# daemon uptime greater then n
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  if pgrep -x trumpcoind &>/dev/null; then

    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID() ${CY:?}$(pidof trumpcoind 2>&1)${N0:?} ${GR:?}::${N0:?} [${G1:?}Ok${N0:?}] ${GR:?}::${N0:?} Daemon Uptime ${UPTIME:?} ${SCREEN_IND:?} ${GR:?}$SCREEN_VALUE${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() System.Warden: $(cat "${LOG_DIR:?}"/node_data/stats/uptime 2>/dev/null)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  else
    # make sure debug.log exist
    touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # remove old files
    rm "${WALLET_DIR:?}"/onion &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    yes "" | "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### run with or without a display ##############################################

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "${WAIT_TIME:?}" ]] &>/dev/null; then

  # time.dashbord exist, continue
  if [ -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ] &>/dev/null; then

    DETACH="${G1:?}<${N0:?} [ ${G1:?}pitrump${N0:?} ]"

    if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.dashbord 2>&1)" -lt "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.warden 2>&1)" ]] &>/dev/null; then

      DETACH="${CY:?}<<${N0:?} [ ${GR:?}warden${N0:?} ]"
      # where are we now?
      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/functions
      # get data from functions
      cd || exit && bash /usr/local/bin/include/functions

      # remove old file
      rm "${LOG_DIR:?}"/node_data/stats/time.dashbord &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Removing old file! -> ${GR:?}time.dashbord${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi

    echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.warden 2>&1 # save warden time

    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G1:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  else # time.dashbord don't exist, continue with warden

    DETACH="${G0:?}<${N0:?} [ ${G0:?}warden${N0:?} ]"
    # where are we now?
    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/functions
    # get data from functions
    cd || exit && bash /usr/local/bin/include/functions

    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G0:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# END
