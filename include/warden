#!/bin/bash

# By Rainman
# V20220703
# 0.5.2.5

source /usr/local/bin/include/pinode.conf 2>&1
source /usr/local/bin/include/color 2>&1

echo "$(LC_ALL=de_US.utf8 date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.warden 2>&1 # save warden time

if [ ! -f "${LOG_DIR:?}"/node_data/stats/date ] &>/dev/null; then

  # create directories, ruled by configuration
  mkdir "${LOG_DIR:?}"/node_data &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/peers &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/stats &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client &>/dev/null
  mkdir "${LOG_DIR:?}"/node_data/client/tmp &>/dev/null
fi

if [ ! -f "${WALLET_LOG_DIR:?}"/debug.log ] &>/dev/null; then
  touch "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
fi

if [[ ! -f "${LOG_DIR:?}"/node_data/stats/uptime ]] &>/dev/null; then
  # get system uptime information
  uptime 2>&1 | xargs >"${LOG_DIR:?}"/node_data/stats/uptime 2>&1
fi

# date for logs
LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)
if [[ -z "$LOG_DATE" ]] &>/dev/null; then
  LOG_DATE=$(LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' 2>&1)
fi

### clean up /var/log/ #########################################################

if [[ ! -f "${LOG_DIR:?}"/node_data/stats/log_limit ]] &>/dev/null; then

  # log configuration exist in fstab, continue
  if [[ "$(grep "/var/log" /etc/fstab 2>&1)" ]] &>/dev/null; then

    # get configuration size
    DIRS=$(grep "/var/log" /etc/fstab 2>&1 | egrep -o "ze=[0-9]+" 2>&1 | tr -d 'ze=' 2>&1)
    # get 70% of that value
    DIRS=$(echo "${DIRS:?}*0.70" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # save value
    echo "${DIRS:?}" >"${LOG_DIR:?}"/node_data/stats/log_limit 2>&1

    # greater than n, continue
    if [[ "$(sudo du -shc /var/log/* 2>&1 | grep "total" 2>&1 | awk '{ print $1 }' 2>&1 | tr -d 'M' 2>&1)" -gt "50" ]] &>/dev/null; then
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: /var/log/ directory becoming big! ${R1:?}$(sudo du -shc /var/log/* 2>&1 | grep "total" 2>&1 | awk '{ print $1 }' 2>&1 | tr -d 'M' 2>&1)MB${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi

  else # use default
    DIRS="99"
  fi
fi

DIRS=$(cat "${LOG_DIR:?}"/node_data/stats/log_limit 2>/dev/null)

# greater than limit made above, continue
if [[ "$(sudo du -shc /var/log/* 2>&1 | grep "total" 2>&1 | awk '{ print $1 }' 2>&1 | tr -d 'M' 2>&1)" -gt "${DIRS:?}" ]] &>/dev/null; then
  # truncate logs
  sudo truncate -s 0 /var/log/* &>/dev/null
  # remove compressed log files
  sudo rm /var/log/*.gz &>/dev/null
fi

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof "${WALLET_DAEMON:?}" 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}
# create uptime
echo "$(uptime_daemon 2>&1)" 2>&1 | tr -d '-' >"${LOG_DIR:?}"/node_data/uptime 2>&1

### wait time based on cpu speed ###############################################

# do this once (cpu speed, wait time)
if [ ! -f "${LOG_DIR:?}"/node_data/stats/lscpu ] &>/dev/null; then
  lscpu >"${LOG_DIR:?}"/node_data/stats/lscpu 2>&1
  cat "${LOG_DIR:?}"/node_data/stats/lscpu 2>/dev/null | grep "CPU max" 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk '{ print $4 }' 2>&1 | awk -F, '{ print $1 }' >"${LOG_DIR:?}"/node_data/stats/cpuspeed 2>&1
fi

if egrep "-" "${WALLET_DIR:?}"/wait &>/dev/null; then
  # something went wrong with wait, use default
  echo "360" >"${WALLET_DIR:?}"/wait
  echo "420" >>"${WALLET_DIR:?}"/wait
fi

if ! egrep "[0-9]+" "${WALLET_DIR:?}"/wait &>/dev/null; then

  if grep "LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=" "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null; then

    # 142s load = 1800 MHz average time for a default raspberry pi 400 rev 1.1
    # 360s load = 1200 MHz average time for a default raspberry pi 3 model b rev 1.2

    BOOTS=$(grep "(release build)" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $1 }' 2>&1)
    READY=$(grep "LoadBlockIndexDB: last block file info: CBlockFileInfo(blocks=" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | head -1 2>&1 | awk '{ print $1 }' 2>&1)

    BOOTS=$(echo "$BOOTS" 2>&1 | egrep -o "T[0-9]+:[0-9]+:[0-9]+" 2>&1 | tr -d 'T' 2>&1)
    READY=$(echo "$READY" 2>&1 | egrep -o "T[0-9]+:[0-9]+:[0-9]+" 2>&1 | tr -d 'T' 2>&1)

    # creat wait_time
    echo "$(echo "${READY:?}" 2>&1 | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }' 2>&1)-$(echo "${BOOTS:?}" 2>&1 | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')" 2>&1 | bc -l >"${WALLET_DIR:?}"/wait 2>&1
    # create wait_time_block
    echo "$(cat "${WALLET_DIR:?}"/wait 2>/dev/null)+60" 2>&1 | bc -l >>"${WALLET_DIR:?}"/wait 2>&1

    # waiting values
    WAIT_TIME=$(head -1 "${WALLET_DIR:?}"/wait 2>&1)
    WAIT_TIME_BLOCK=$(tail -1 "${WALLET_DIR:?}"/wait 2>&1)

    # get device model
    if [[ ! -f "${LOG_DIR:?}"/node_data/stats/model ]] &>/dev/null; then
      cat /proc/device-tree/model 2>/dev/null | tr -d '\0' >"${LOG_DIR:?}"/node_data/stats/model 2>&1
    fi

    if [[ ! "$(grep "CPU.SpeedMHz" "${WALLET_LOG_DIR:?}"/debug.log)" ]] &>/dev/null; then
      printf '%b' "${LOG_DATE:?} Status() CPU.SpeedMHz() $(echo -e "\e[4m$(cat "${LOG_DIR:?}"/node_data/stats/model 2>/dev/null)\e[0m") [ ${G1:?}$(cat "${LOG_DIR:?}"/node_data/stats/cpuspeed 2>/dev/null | awk -F, '{ print $1 }' 2>&1)MHz${N0:?} ] ${G1:?}${WAIT_TIME:?}${N0:?}/${G0:?}${WAIT_TIME_BLOCK:?}${N0:?} Wait${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
fi

# waiting values
WAIT_TIME=$(head -1 "${WALLET_DIR:?}"/wait 2>&1)
WAIT_TIME_BLOCK=$(tail -1 "${WALLET_DIR:?}"/wait 2>&1)

# non responsive, use default timer
if [[ -z "$WAIT_TIME" ]] &>/dev/null; then
  echo "360" >"${WALLET_DIR:?}"/wait
  echo "420" >>"${WALLET_DIR:?}"/wait
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "300" ]] &>/dev/null; then

  if [[ ! -f "${WALLET_DIR:?}"/wait ]] &>/dev/null; then
    echo "360" >"${WALLET_DIR:?}"/wait
    echo "420" >>"${WALLET_DIR:?}"/wait
  fi
fi

# create screen list
LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/stats/screens 2>&1

# kill when too many screens appears (all of them)
if [[ "$(cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -c "read_mempool" 2>&1)" -gt "1" ]] &>/dev/null; then
  # kill all running screens
  killall screen &>/dev/null
  printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Killed bunch of screens! (killall)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# screen indicator (is add_cg running)
if ! cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "add_cg" &>/dev/null; then
  # below one round
  SCREEN_IND_CG="${GR:?}N${N0:?}"
else

  # screen add_cg
  NOW_TIME_CG=$(LC_ALL=de_US.utf8 date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME_CG=$(cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep "add_cg" 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC_CG=$(echo "$NOW_TIME_CG-$SCREEN_TIME_CG" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

  if [[ -z "$SCREEN_CALC_CG" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE_CG="${GR:?}0${GR:?}"
  else
    SCREEN_VALUE_CG="${SCREEN_CALC_CG:?}"
  fi

  # kill old session, try another
  if [[ "$SCREEN_CALC_CG" -gt "2" ]] &>/dev/null; then
    screen -X -S add_cg quit &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_cg script. (old) Trying another API.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    bash "${LOG_DIR:?}"/add_cmc
    SCREEN_IND_CG="${GR:?}*${N0:?}"
    SCREEN_VALUE_CG="${GR:?}0${GR:?}"
  fi

  # still running
  SCREEN_IND_CG="${CY:?}*${N0:?}"
fi

# screen indicator (is add_cmc running)
if ! cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "add_cmc" &>/dev/null; then
  # below one round
  SCREEN_IND_CMC="${GR:?}N${N0:?}"
else

  # screen add_cmc
  NOW_TIME_CMC=$(LC_ALL=de_US.utf8 date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME_CMC=$(cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep "add_cmc" 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC_CMC=$(echo "$NOW_TIME_CMC-$SCREEN_TIME_CMC" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

  if [[ -z "$SCREEN_CALC_CMC" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE_CMC="${GR:?}0${GR:?}"
  else
    SCREEN_VALUE_CMC="${SCREEN_CALC_CMC:?}"
  fi

  # kill old session, try another
  if [[ "$SCREEN_CALC_CMC" -gt "2" ]] &>/dev/null; then
    screen -X -S add_cmc quit &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_cmc script. (old) Trying another API.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    bash "${LOG_DIR:?}"/add_cg
    SCREEN_IND_CMC="${GR:?}*${N0:?}"
    SCREEN_VALUE_CMC="${GR:?}0${GR:?}"
  fi

  # still running
  SCREEN_IND_CMC="${CY:?}*${N0:?}"
fi

# screen indicator (is add_peers running)
if ! cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "add_peers" &>/dev/null; then
  # below one round
  SCREEN_IND_P2P="${GR:?}N${N0:?}"
else

  # screen add_peers
  NOW_TIME_P2P=$(LC_ALL=de_US.utf8 date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME_P2P=$(cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep "add_peers" 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC_P2P=$(echo "$NOW_TIME_P2P-$SCREEN_TIME_P2P" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

  if [[ -z "$SCREEN_CALC_P2P" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
  else
    SCREEN_VALUE_P2P="${SCREEN_CALC_P2P:?}"
  fi

  ADD_LINE=$(wc -l "${LOG_DIR:?}"/node_data/add_peers.check 2>&1 | awk '{ print $1 }' 2>&1)

  # kill time jump
  if [[ "$SCREEN_CALC_P2P" -gt "42" ]] &>/dev/null; then
    screen -X -S add_peers quit &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script. (time jump)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND_P2P="${GR:?}*${N0:?}"
    SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
  fi

  if [[ "$(wc -l "${LOG_DIR:?}"/node_data/add_peers | awk '{ print $1 }')" -gt "2" ]] &>/dev/null; then
    # kill old screen session (max 30 seconds on average for each connection attempt)
    if [[ "$SCREEN_CALC_P2P" -gt "$(echo "${ADD_LINE:?}/2" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)" ]] &>/dev/null; then
      screen -X -S add_peers quit &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      SCREEN_IND_P2P="${GR:?}*${N0:?}"
      SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
    fi
  fi

  # still running
  SCREEN_IND_P2P="${CY:?}*${N0:?}"
fi

if [[ -z "$SCREEN_VALUE_CG" ]] &>/dev/null; then
  # non responsive
  SCREEN_VALUE_CG="${GR:?}0${GR:?}"
fi
if [[ -z "$SCREEN_VALUE_CMC" ]] &>/dev/null; then
  # non responsive
  SCREEN_VALUE_CMC="${GR:?}0${GR:?}"
fi
if [[ -z "$SCREEN_VALUE_P2P" ]] &>/dev/null; then
  # non responsive
  SCREEN_VALUE_P2P="${GR:?}0${GR:?}"
fi

if [[ -f "${LOG_DIR:?}"/node_data/client/getinfo ]] &>/dev/null; then
  P2P_NOW="$(cat "${LOG_DIR:?}"/node_data/client/getinfo | grep "connections" | awk '{ print $2 }')"
  P2P_NOW="${G1:?}$P2P_NOW${N0:?}"
else
  P2P_NOW="${GR:?}0${N0:?}"
fi

if ! grep -o "progress=1.00" "${LOG_DIR:?}"/node_data/synced &>/dev/null; then
  # get blockchain sync
  WALLET_SYNC=$(cat "${LOG_DIR:?}"/node_data/client/tmp/proc 2>/dev/null | sed 's/^0*//' 2>&1 | tr -d '.' 2>&1)
  WALLET_SYNC="${WALLET_SYNC:0:2}"
  if [[ -z "$WALLET_SYNC" ]] &>/dev/null; then
    WALLET_SYNC="0"
  fi

  if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "300" ]] &>/dev/null; then
    printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: Sync ${G1:?}${WALLET_SYNC:?}%${N0:?} $(cat "${LOG_DIR:?}"/node_data/config 2>/dev/null)${N0:?} Connections ${P2P_NOW:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi

else
  # if progress equals 1, then 100% synced
  if [[ $(grep -o "progress=1.00" "${LOG_DIR:?}"/node_data/synced 2>&1) ]] &>/dev/null; then
    WALLET_SYNC="100" # wallet blockchain is synced 100%
    if [[ -z "$WALLET_SYNC" ]] &>/dev/null; then
      WALLET_SYNC="0"
    fi

    if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "300" ]] &>/dev/null; then
      printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: Sync ${G1:?}${WALLET_SYNC:?}%${N0:?} $(cat "${LOG_DIR:?}"/node_data/config 2>/dev/null)${N0:?} Connections ${P2P_NOW:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  # error: couldn't connect to server
  if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/client/tmp/getinfo &>/dev/null; then

    # error with server (daemon), stopping
    printf '%b' "${R1:?}${LOG_DATE:?} Status() Wallet.Warden: PID() $(pidof "${WALLET_DAEMON:?}" 2>&1) Couldn't connect to server! Stopping daemon now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "[${R1:?}!!${N0:?}] "

    # stop wallet daemon
    printf '%b' "[${R1:?}!!${N0:?}] $("${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" stop && sleep 5)\n"
    killall "${WALLET_DAEMON:?}" &>/dev/null

    printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: ${GR:?}::${N0:?} [${R1:?}XX${N0:?}] ${GR:?}::${N0:?} Rebooting system now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    sudo reboot 2>&1
  fi
fi

if [[ "$(grep -c "AcceptBlock FAILED" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" -gt "50" ]] &>/dev/null; then
  # stop wallet daemon
  printf '%b' "[${R1:?}!!${N0:?}] $("${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" stop && sleep 5)\n"
  killall "${WALLET_DAEMON:?}" &>/dev/null
fi

### start wallet daemon ########################################################

# daemon uptime greater then n
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  if pgrep -x "${WALLET_DAEMON:?}" &>/dev/null; then

    # get read_mempool status
    if cat "${LOG_DIR:?}"/node_data/stats/screens 2>/dev/null | grep -q "read_mempool" &>/dev/null; then
      # mempool status
      SCREEN_IND_MPS="${G1:?}M ${GR:?}"
    else
      SCREEN_IND_MPS="${GR:?}N${GR:?}"
    fi

    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID() ${CY:?}$(pidof "${WALLET_DAEMON:?}" 2>&1)${N0:?} ${GR:?}::${N0:?} [${G1:?}Ok${N0:?}] ${GR:?}::${N0:?} Daemon Uptime ${UPTIME:?} ${GR:?}(${SCREEN_VALUE_P2P:?}/${SCREEN_VALUE_CG:?}/${SCREEN_VALUE_CMC:?})${N0:?} ${SCREEN_IND_MPS:?}${SCREEN_IND_P2P:?}${SCREEN_IND_CG:?}${SCREEN_IND_CMC:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() System.Warden: $(cat "${LOG_DIR:?}"/node_data/stats/uptime 2>/dev/null)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  else
    # make sure debug.log exist
    touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # rebuild index
    if [[ "$(grep "Do you want to rebuild the block database now?" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then
      yes "" | "${WALLET_DIR:?}"/"${WALLET_DAEMON:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" -debug=tor -proxy="${PROXY:?}" -reindex -daemon
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi

    if [[ ! -f "${WALLET_DIR:?}"/boot ]] &>/dev/null; then

      # look for bootstrap before starting/syncing, use if found
      if [[ -f "$(ls /home/"$(whoami)"/*bootstrap.zip 2>&1)" ]] &>/dev/null; then
        # create lock file
        echo "$(LC_ALL=de_US.utf8 date)" >"${WALLET_DIR:?}"/boot

        if [[ ! -f "${WALLET_DIR:?}"/bootstrap ]] &>/dev/null; then

          printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: Found bootstrap.zip, using it! Stopping daemon now.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
          # stop wallet daemon
          printf '%b' "[${R1:?}!!${N0:?}] $("${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" stop && sleep 5)\n"
          killall "${WALLET_DAEMON:?}" &>/dev/null
          # unzip bootstrap
          yes "A" 2>&1 | unzip /home/"$(whoami)"/*bootstrap.zip -d "${WALLET_DIR:?}" 2>&1
          # create bootstrap check
          echo "Bootstrap installed $(LC_ALL=de_US.utf8 date)" >"${WALLET_DIR:?}"/bootstrap 2>&1
          printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: Unzip bootstrap.zip done!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
        fi
      fi
    fi

    # remove old files
    rm "${WALLET_DIR:?}"/wait &>/dev/null
    rm "${WALLET_DIR:?}"/onion &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # report hardware model at start of log
    printf '%b' "${LOG_DATE:?} Status() SystemHardware $(cat /proc/device-tree/model 2>/dev/null | tr -d '\0' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    yes "" | "${WALLET_DIR:?}"/"${WALLET_DAEMON:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" -debug=tor -proxy="${PROXY:?}" -daemon
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

## masternode status ###########################################################

if [[ "$(cat "${WALLET_DIR:?}"/masternode_outputs 2>/dev/null | grep -c "txhash" 2>&1)" -gt "0" ]] &>/dev/null; then
  if [[ ! $(grep "successfully started" "${WALLET_LOG_DIR:?}"/debug.log) ]] &>/dev/null; then
    # make sure masternode runs
    "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" startpatriotnode all false >>"${WALLET_LOG_DIR:?}"/debug.log 2>/dev/null
    cp "${WALLET_DIR:?}"/masternode_status "${LOG_DIR:?}"/node_data/client/getmasternodestatus &>/dev/null
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    cat "${WALLET_DIR:?}"/masternode_status >>"${WALLET_LOG_DIR:?}"/debug.log 2>/dev/null
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# make sure inputs with masternode collateral is locked #################### ###

if [[ ! "$(egrep "Wallet.Warden: Locking addr with .*$(tail -1 "${WALLET_DIR:?}"/masternode_lock)" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then

  # if collateral exist in listunspent, continue
  if [[ "$(grep "$(cat "${WALLET_DIR:?}"/masternode_collateral 2>/dev/null)" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1)" -eq "$(cat "${WALLET_DIR:?}"/masternode_collateral 2>/dev/null)" ]] &>/dev/null; then

    # look for inputs with masternode collateral, get txid
    grep -B6 "$(cat "${WALLET_DIR:?}"/masternode_collateral 2>/dev/null)" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | grep "txid" 2>&1 | awk '{ print $2 }' >"${WALLET_DIR:?}"/masternode_lock 2>&1

    if [[ -f "${WALLET_DIR:?}"/masternode_lock ]] &>/dev/null; then

      # make sure masternode_check exist
      touch "${WALLET_DIR:?}"/masternode_check &>/dev/null

      if [[ ! "${WALLET_DIR:?}"/masternode_lock -eq "${WALLET_DIR:?}"/masternode_check ]] &>/dev/null; then

        while IFS= read -r LOCK; do
          # lock inputs with txid from masternode_lock list
          "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" lockunspent false "[{\"txid\":\"${LOCK:?}\",\"vout\":1}]" 2>&1
          printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Locking addr with ${CY:?}${LOCK:?}${N0:?} txid${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
        done <"${WALLET_DIR:?}"/masternode_lock 2>&1

        # listlockunspent
        "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/"${WALLET_CONFIG:?}" listlockunspent >"${LOG_DIR:?}"/node_data/client/listlockunspent 2>&1

        cp "${WALLET_DIR:?}"/masternode_lock "${WALLET_DIR:?}"/masternode_check &>/dev/null
      fi
    fi
  fi
fi

### run with or without a display ##############################################

FUNC_LIMIT="0/2"
function run_functions() {
  if [[ -f "${LOG_DIR:?}"/node_data/func.lock ]] &>/dev/null; then
    FUNC_LIMIT="1/2"
    if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.dashbord 2>&1)" -lt "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.warden 2>&1)" ]] &>/dev/null; then
      # remove old file
      rm "${LOG_DIR:?}"/node_data/stats/time.dashbord &>/dev/null
    fi
    # time.dashbord exist, don't continue
    if [[ ! -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then
      FUNC_LIMIT="2/2"
      # where are we now?
      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/functions
      # get data from functions
      cd || exit && bash /usr/local/bin/include/functions
    fi
  fi
}

# delete old time lock
if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/func.lock 2>&1)" -lt "$(LC_ALL=de_US.utf8 date +%s 2>&1)" ]] &>/dev/null; then
  rm "${LOG_DIR:?}"/node_data/func.lock &>/dev/null
fi

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "${WAIT_TIME:?}" ]] &>/dev/null; then

  if [[ ! -f "${LOG_DIR:?}"/node_data/func.lock ]] &>/dev/null; then

    # create time lock file
    echo "$(LC_ALL=de_US.utf8 date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/func.lock 2>&1 # save lock time

    # time.dashbord exist, continue
    if [[ -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then

      DETACH="${G1:?}<${N0:?} [ ${G1:?}Pinode${N0:?} ]"
      # communication port pinode
      echo "COM > PiNode" >"${LOG_DIR:?}"/node_data/com 2>&1

      if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.dashbord 2>&1)" -lt "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.warden 2>&1)" ]] &>/dev/null; then

        run_functions
        DETACH="${CY:?}<<${N0:?} [ ${CY:?}Data Swap${N0:?} ] ${GR:?}${FUNC_LIMIT:?}${N0:?}"

        # remove old file
        rm "${LOG_DIR:?}"/node_data/stats/time.dashbord &>/dev/null

        printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Removing old file! -> ${GR:?}time.dashbord${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      fi
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G1:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

      # remove lock file
      rm "${LOG_DIR:?}"/node_data/func.lock &>/dev/null

    else # time.dashbord don't exist, continue with warden

      # no double trouble when overlapping pinode <> warden
      if ! tail -5 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "Removing old file!" &>/dev/null; then

        DETACH="${G0:?}<${N0:?} [ ${G0:?}Warden${N0:?} ]"
        # communication port warden
        echo "COM > Warden" >"${LOG_DIR:?}"/node_data/com 2>&1
        run_functions
      else
        run_functions
        DETACH="${CY:?}<<${N0:?} [ ${CY:?}Data Swap${N0:?} ] ${GR:?}${FUNC_LIMIT:?}${N0:?}"
      fi
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G0:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

      # remove lock file
      rm "${LOG_DIR:?}"/node_data/func.lock &>/dev/null
    fi
  fi
fi

# END
