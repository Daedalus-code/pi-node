#!/bin/bash

# By Rainman
# V20222603
# 0.1.9.3

# shellcheck disable=SC2034  # Unused variables left for readability

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1

echo "$(LC_ALL=de_US.utf8 date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/time.warden 2>&1 # save warden time

LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/system/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

if [[ ! "$(pidof "${WALLET_DAEMON:?}" 2>&1 | wc -w 2>&1 | egrep "1")" ]] &>/dev/null; then
  mv "${WALLET_LOG_DIR:?}"/debug.log "${WALLET_LOG_DIR:?}"/debug.log.old &>/dev/null
  touch "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
  printf '%b' "${LOG_DATE:?} Status() SystemHardware $(cat /proc/device-tree/model 2>/dev/null | tr -d '\0' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  cd "${WALLET_DIR:?}" || exit && yes "y" | ./"${WALLET_DAEMON:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" -debug=tor -proxy="${PROXY:?}" -daemon
  printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

if [[ "$(grep "Do you want to rebuild the block database now?" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then
  mv "${WALLET_LOG_DIR:?}"/debug.log "${WALLET_LOG_DIR:?}"/debug.log.old &>/dev/null
  touch "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
  cd "${WALLET_DIR:?}" || exit && yes "" | ./"${WALLET_DAEMON:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" -debug=tor -proxy="${PROXY:?}" -reindex -daemon
  printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

## masternode status ###########################################################

if [[ "$(grep -c "txhash" "${DATA_DIR:?}"/masternode_outputs 2>&1)" -gt "0" ]] &>/dev/null; then
  if [[ ! "$(grep "successfully started" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then
    if [[ ! "$(grep "Masternode successfully started" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then
      cp "${LOG_DIR:?}"/node_data/wallet/client/getmasternodestatus "${DATA_DIR:?}"/masternode_status &>/dev/null
      cat "${DATA_DIR:?}"/masternode_started >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  if [[ "$(grep "started" "${DATA_DIR:?}"/masternode_status 2>&1)" ]] &>/dev/null; then
    cp "${LOG_DIR:?}"/node_data/wallet/client/getmasternodestatus "${DATA_DIR:?}"/masternode_status &>/dev/null
  fi

  if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/masternode_status)))")" -gt "369" ]] &>/dev/null; then
    if [[ ! $(grep "successfully started" "${WALLET_LOG_DIR:?}"/debug.log 2>&1) ]] &>/dev/null; then
      # make sure masternode runs
      printf '%b' "${GR:?}${LOG_DATE:?} Status() getmasternodestatus - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" startpatriotnode all false >>"${WALLET_LOG_DIR:?}"/debug.log 2>/dev/null
      printf '%b' "${GR:?}${LOG_DATE:?} Status() getmasternodestatus - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      cp "${LOG_DIR:?}"/node_data/wallet/client/getmasternodestatus "${DATA_DIR:?}"/masternode_status &>/dev/null
    fi
  fi
fi

# make sure inputs with masternode collateral is locked #################### ###

if [[ ! "$(egrep "Wallet.Warden: Locking addr with .*$(tail -1 "${DATA_DIR:?}"/masternode_lock)" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then

  # if collateral exist in listunspent, continue
  if [[ "$(grep "$(cat "${DATA_DIR:?}"/masternode_collateral 2>/dev/null)" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1)" -eq "$(cat "${DATA_DIR:?}"/masternode_collateral 2>/dev/null)" ]] &>/dev/null; then

    # look for inputs with masternode collateral, get txid
    grep -B6 "$(cat "${DATA_DIR:?}"/masternode_collateral 2>/dev/null)" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | grep "txid" 2>&1 | awk '{ print $2 }' >"${DATA_DIR:?}"/masternode_lock 2>&1

    if [[ -f "${DATA_DIR:?}"/masternode_lock ]] &>/dev/null; then

      # make sure masternode_check exist
      touch "${DATA_DIR:?}"/masternode_check &>/dev/null

      if [[ ! "${DATA_DIR:?}"/masternode_lock -eq "${DATA_DIR:?}"/masternode_check ]] &>/dev/null; then

        while IFS= read -r LOCK; do
          # lock inputs with txid from masternode_lock list
          "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" lockunspent false "[{\"txid\":\"${LOCK:?}\",\"vout\":1}]" 2>&1
          printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Locking addr with ${CY:?}${LOCK:?}${N0:?} txid${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
        done <"${DATA_DIR:?}"/masternode_lock 2>&1

        # listlockunspent
        "${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" listlockunspent >"${LOG_DIR:?}"/node_data/wallet/client/listlockunspent 2>&1

        cp "${DATA_DIR:?}"/masternode_lock "${DATA_DIR:?}"/masternode_check &>/dev/null
      fi
    fi
  fi
fi

### run with or without a display ##############################################

FUNC_LIMIT="0/2"
function run_functions() {
  if [[ -f "${LOG_DIR:?}"/node_data/wallet/data/func.lock ]] &>/dev/null; then
    FUNC_LIMIT="1/2"
    if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/wallet/data/time.dashbord 2>&1)" -lt "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/wallet/data/time.warden 2>&1)" ]] &>/dev/null; then
      # remove old file
      rm "${LOG_DIR:?}"/node_data/wallet/data/time.dashbord &>/dev/null
    fi
    # time.dashbord exist, don't continue
    if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/time.dashbord ]] &>/dev/null; then
      FUNC_LIMIT="2/2"
      # where are we now?
      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/pinode/functions
      # get data from functions
      cd || exit && source /usr/local/bin/include/pinode/functions
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: functions run by warden!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
}

# delete old time lock
if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/wallet/data/func.lock 2>&1)" -lt "$(LC_ALL=de_US.utf8 date +%s 2>&1)" ]] &>/dev/null; then
  rm "${LOG_DIR:?}"/node_data/wallet/data/func.lock &>/dev/null
fi

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/func.lock ]] &>/dev/null; then
    # create time lock file
    echo "$(LC_ALL=de_US.utf8 date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/func.lock 2>&1 # save lock time
    # time.dashbord exist, continue
    if [[ -f "${LOG_DIR:?}"/node_data/wallet/data/time.dashbord ]] &>/dev/null; then
      DETACH="${G1:?}<${N0:?} [ ${G1:?}Pinode${N0:?} ]"
      # communication port pinode
      echo "COM > PiNode" >"${LOG_DIR:?}"/node_data/com 2>&1
      if [[ "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/wallet/data/time.dashbord 2>&1)" -lt "$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/wallet/data/time.warden 2>&1)" ]] &>/dev/null; then
        run_functions
        DETACH="${CY:?}<<${N0:?} [ ${CY:?}Data Swap${N0:?} ] ${GR:?}${FUNC_LIMIT:?}${N0:?}"
        # remove old file
        rm "${LOG_DIR:?}"/node_data/wallet/data/time.dashbord &>/dev/null
        printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Removing old file! -> ${GR:?}time.dashbord${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      fi
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G1:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      # remove lock file
      rm "${LOG_DIR:?}"/node_data/wallet/data/func.lock &>/dev/null

    else # time.dashbord don't exist, continue with warden

      # no double trouble when overlapping pinode <> warden
      if ! tail -5 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "Removing old file!" &>/dev/null; then
        DETACH="${G0:?}<${N0:?} [ ${G0:?}Warden${N0:?} ]"
        # communication port warden
        echo "COM > Warden" >"${LOG_DIR:?}"/node_data/com 2>&1
        run_functions
      else
        run_functions
        DETACH="${CY:?}<<${N0:?} [ ${CY:?}Data Swap${N0:?} ] ${GR:?}${FUNC_LIMIT:?}${N0:?}"
      fi
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Data [${G0:?}Ok${N0:?}] ${DETACH:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      # remove lock file
      rm "${LOG_DIR:?}"/node_data/wallet/data/func.lock &>/dev/null
    fi
  fi
fi

### screen status ##############################################################

if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/data/screens 2>/dev/null | grep "add_peers" 2>&1)" ]] &>/dev/null; then

  # screen add_peers
  SCREEN_NOW_P2P=$(LC_ALL=de_US.utf8 date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME_P2P=$(cat "${LOG_DIR:?}"/node_data/wallet/data/screens 2>/dev/null | grep "add_peers" 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC_P2P=$(echo "${SCREEN_NOW_P2P:?}-${SCREEN_TIME_P2P:?}" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
  SCREEN_ADD_LINE=$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers.check 2>&1 | awk '{ print $1 }' 2>&1)
  SESSION_NAME="add_peers"

  # kill time jump
  if [[ "$SCREEN_CALC_P2P" -gt "42" ]] &>/dev/null; then
    screen -ls "${SESSION_NAME:?}" 2>&1 | (
      IFS=$(printf '\t' 2>&1)
      sed "s/^$IFS//" 2>&1 |
        while read -r NAME stuff &>/dev/null; do
          screen -S "${NAME:?}" -X quit &>/dev/null
        done
    )
  fi

  if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | awk '{ print $1 }' 2>&1)" -gt "2" ]] &>/dev/null; then
    # kill old screen session (max 30 seconds on average for each connection attempt)
    if [[ "$SCREEN_CALC_P2P" -gt "$(echo "${SCREEN_ADD_LINE:?}/2" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)" ]] &>/dev/null; then
      screen -ls "${SESSION_NAME:?}" 2>&1 | (
        IFS=$(printf '\t' 2>&1)
        sed "s/^$IFS//" 2>&1 |
          while read -r NAME stuff &>/dev/null; do
            screen -S "${NAME:?}" -X quit &>/dev/null
          done
      )
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
fi

# END
