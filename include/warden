#!/bin/bash

# By Rainman
# V20222601
# 0.1.7.1

# pitrump configuration
source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

if [ ! -f "${LOG_DIR:?}"/node_data/stats/date ] &>/dev/null; then
  date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1
fi
# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}
# create uptime
echo "$(uptime_daemon 2>&1)" >"${LOG_DIR:?}"/node_data/uptime 2>&1

# screen indicator (is it running)
if ! screen -list 2>&1 | grep -q "add_peers" &>/dev/null; then
  # below one round
  SCREEN_IND="${GR:?}N${N0:?}"
else
  NOW_TIME=$(date 2>&1 | awk '{ print $4 }' 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1)
  SCREEN_TIME=$(screen -list 2>&1 | egrep -o "([0-9]+:[0-9]+)" 2>&1 | tr -d ':' 2>&1 | tail -1 2>&1)
  SCREEN_CALC=$(echo "$NOW_TIME-$SCREEN_TIME" 2>&1 | bc -l 2>&1 | egrep -v "syntax|-" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
  if [[ -z "$SCREEN_CALC" ]] &>/dev/null; then
    # non responsive
    SCREEN_VALUE="0"
  else
    SCREEN_VALUE="${SCREEN_CALC:?}"
  fi
  ADD_LINE=$(wc -l "${LOG_DIR:?}"/node_data/add_peers.check 2>&1 | awk '{ print $1 }' 2>&1)
  # kill time jump
  if [[ "$SCREEN_CALC" -gt "42" ]] &>/dev/null; then
    killall screen &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script. (time jump)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND="${GR:?}*${N0:?}"
    SCREEN_VALUE="${GR:?}0${N0:?}"
  fi
  # kill wrong list
  if [[ "$SCREEN_CALC" -gt "$(echo "$ADD_LINE/2" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    killall screen &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Stopping add_peers script.${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    SCREEN_IND="${GR:?}*${N0:?}"
    SCREEN_VALUE="${GR:?}0${N0:?}"
  fi # still running
  SCREEN_IND="${CY:?}*${N0:?}"
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  # error: couldn't connect to server
  if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/client/tmp/getinfo &>/dev/null; then
    # error with server (daemon), stopping
    printf '%b' "${R1:?}${LOG_DATE:?} Status() Wallet.Warden: PID() $(pidof trumpcoind 2>&1) Couldn't connect to server! Stopping daemon now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "[${R1:?}!!${N0:?}] "
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
    printf '%b' "${N0:?}${LOG_DATE:?} Status() Wallet.Warden: ${GR:?}::${N0:?} [${R1:?}XX${N0:?}] ${GR:?}::${N0:?} Rebooting system now!${N0:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    sudo reboot 2>&1
  fi
fi

# daemon uptime greater then n
if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then
  if pgrep -x trumpcoind &>/dev/null; then
    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID() ${CY:?}$(pidof trumpcoind 2>&1)${N0:?} ${GR:?}::${N0:?} [${G1:?}Ok${N0:?}] ${GR:?}::${N0:?} Daemon Uptime ${UPTIME:?} ${SCREEN_IND:?} ${GR:?}$SCREEN_VALUE${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() System.Warden: $(cat "${LOG_DIR:?}"/node_data/stats/uptime 2>/dev/null)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  else
    # make sure debug.log exist
    touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # remove old files
    rm "${WALLET_DIR:?}"/onion &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    yes "" | "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# run with/without display (warden controls everything)
if [[ "$NO_DISPLAY" -eq "0" ]] &>/dev/null; then

  if [[ -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then

    echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.warden 2>&1 # keep time

    # get seconds since 1970-01-01 00:00:00 UTC, only first 10 characters
    TIME_DASH=$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.dashbord 2>&1)
    TIME_WARD=$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.warden 2>&1)

    # run if dashbord has stopped
    if [[ "$TIME_DASH" -lt "$TIME_WARD" ]] &>/dev/null; then
      # make sure we know where we are
      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/functions
      # create more time until reboot
      echo "1" >>"${LOG_DIR:?}"/node_data/stats/time.limit 2>&1
      # reboot when limit is met
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Crashed! (Scripts still running in the background!) ${R1:?}::${N0:?} Reboot in $(echo "11-$(wc -l "${LOG_DIR:?}"/node_data/stats/time.limit | awk '{ print $1 }' 2>&1)" 2>&1 | bc 2>&1) minutes! ${R1:?}::${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      # run script 'functions' while script 'pitrump' is down, until limit is met
      cd || exit && bash /usr/local/bin/include/functions

      if [[ "$(wc -l "${LOG_DIR:?}"/node_data/stats/time.limit 2>&1 | awk '{ print $1 }' 2>&1)" -gt "10" ]] &>/dev/null; then
        # shutdown wallet (daemon)
        printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Shutting down wallet, rebooting system!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
        "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
        # reboot system
        sudo reboot
      fi

    else

      if [[ "$(wc -l "${LOG_DIR:?}"/node_data/stats/time.limit 2>&1 | awk '{ print $1 }' 2>&1)" -gt "1" ]] &>/dev/null; then
        # reset limit
        echo "1" >"${LOG_DIR:?}"/node_data/stats/time.limit 2>&1
        printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Crash limit reset! ($(wc -l "${LOG_DIR:?}"/node_data/stats/time.limit 2>&1 | awk '{ print $1 }' 2>&1))${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      fi

      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() ${GR:?}::${N0:?} [${G1:?}Ok${N0:?}] ${GR:?}::${N0:?} Working!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
fi

if [[ "$NO_DISPLAY" -eq "1" ]] &>/dev/null; then

  # if dashbord is greater than warden in time, means it's running again
  # get seconds since 1970-01-01 00:00:00 UTC, only first 10 characters
  TIME_DASH=$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.dashbord 2>&1)
  TIME_WARD=$(sed 's/.//10g' "${LOG_DIR:?}"/node_data/stats/time.warden 2>&1)

  if [[ "${TIME_WARD:?}" -gt "${TIME_DASH:?}" ]] &>/dev/null; then
    echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.warden 2>&1 # keep time
    rm "${LOG_DIR:?}"/node_data/stats/time.lock &>/dev/null
    rm "${LOG_DIR:?}"/node_data/stats/time.dashbord &>/dev/null
  else
    if [[ -f "${LOG_DIR:?}"/node_data/stats/time.dashbord ]] &>/dev/null; then
      # create lock file
      echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.lock 2>&1
    else
      rm "${LOG_DIR:?}"/node_data/stats/time.lock &>/dev/null
    fi
    echo "$(date +%s 2>&1)" >"${LOG_DIR:?}"/node_data/stats/time.warden 2>&1 # keep time
  fi

  # no lock, continue
  if [[ ! -f "${LOG_DIR:?}"/node_data/stats/time.lock ]] &>/dev/null; then
    # make sure we know where we are
    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/include/functions
    # run script 'functions' while script 'pitrump' is down
    cd || exit && bash /usr/local/bin/include/functions
    NYD="${N0:?}" # no, yes display - run normally
    CONTROLLER="Warden"
  else
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() Display are running while NO_DISPLAY is SET!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    NYD="${G1:?}" # no, yes display - run with no_display set, and still run a display
    CONTROLLER="${G1:?}PiTrump${G1:?}"
  fi

  printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: Dashbord() ${NYD:?}No${N0:?} Display! ${CY:?}::${N0:?} ${CONTROLLER:?}${N0:?} controls everything! ${CY:?}::${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# END
