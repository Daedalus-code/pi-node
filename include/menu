#!/bin/bash

# By Rainman
# V20222301
# 0.6.9.0

# shellcheck disable=SC2034  # Unused variables left for readability

source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

# make sure dialog exist
if ! [ -x "$(command -v dialog)" ] &>/dev/null; then
  sudo apt-get install dialog -y
fi

if ! [ -x "$(command -v unzip)" ] &>/dev/null; then
  sudo apt-get install unzip -y
fi

if [[ ! -s "${LOG_DIR:?}"/node_data/client/listunspent ]] &>/dev/null; then
  # non responsive
  POS_COUNT="0"
else # get input count
  POS_COUNT=$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1)
fi

# date for logs
date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

HEIGHT=12
WIDTH=55
CHOICE_HEIGHT=5
BACKTITLE="Trump-Node"
TITLE="Node Options"
MENU="Choose one of the following options:"

OPTIONS=(1 "Node Menu        Shutdown, Restart, Update"
  2 "Keys Menu        Dump/Import keys, PoS (${POS_COUNT:?})"
  3 "UFW Menu         Uncomplicated firewall"
  4 "Information      Trump node status"
  5 "System Space     Disk space utilized")

CHOICE=$(dialog --clear \
  --backtitle "$BACKTITLE" \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in

"1")

  function start_daemon() {
    # make sure debug.log exist
    touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # remove old files
    rm "${WALLET_DIR:?}"/onion &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/client/* &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/stats/* &>/dev/null
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # start node (daemon)
    sleep 1
    "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  }

  HEIGHT=10
  WIDTH=53
  CHOICE_HEIGHT=3
  BACKTITLE="Trump-Node"
  TITLE="Node Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Shutdown         Shutdown reboot, graphs"
    2 "Restart          Restart trumpcoin daemon"
    3 "Install          Install trumpcoin wallet")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    # turn of trumpcoin daemon
    read -r -p "[YN] Turn off node, are you sure? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      if [[ "$(cat "${LOG_DIR:?}"/node_data/peers/failed 2>/dev/null)" -gt "$(cat "${WALLET_DIR:?}"/failed 2>/dev/null)" ]] &>/dev/null; then
        cp "${LOG_DIR:?}"/node_data/peers/failed "${WALLET_DIR:?}"/failed 2>&1
      fi
      read -r -p "[YN] Kill PID?, No for client stop! y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # hard shutdown, turn off crontab
        sudo service cron stop 2>&1
        kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null && sleep 1
      else # normal shutdown, turn off crontab
        sudo service cron stop 2>&1
        printf '%b' "[!!] "
        "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 1
        # wait on node (daemon) to stop
        until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
          clear
          printf '%b' "[!!] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
          printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
          sleep 5
        done
        kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null
      fi
      read -t 3 -r -p "[YN] Remove graph databases? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        rm -r /home/"$(whoami)"/stats/ &>/dev/null
      fi
      read -r -p "[YN] Reboot? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sleep 5
        sudo reboot
      else # turn crontab back on if no reboot
        sudo service cron start 2>&1
      fi
    fi
    clear

    ;;

  "2")

    read -r -p "[YN] Restart node (daemon)? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      sudo service cron stop 2>&1
      echo "[Ok] Restarting node!"
      printf '%b' "[!!] "
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 1
      # wait on node (daemon) to stop
      until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
        clear
        printf '%b' "[!!] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
        printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
        sleep 5
      done
      kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null
      echo "[Ok] $(start_daemon)"
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
      sudo service cron start 2>&1
    fi

    ;;

  "3")

    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
    # get wallet version
    WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/client/version 2>/dev/null)

    if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
      # non responsive
      WALLET_VERSION="${GR:?}vLoading${N0:?}"
    fi

    printf '%b' "Latest...: ${G1:?}v${LATEST_VERSION:?}${N0:?}\n"
    printf '%b' "Installed: ${N0:?}${WALLET_VERSION:?}${N0:?}\n"
    echo
    read -r -p "[YN] New install? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

      # create uname -a
      uname -a >"${LOG_DIR:?}"/node_data/uname

      function setup() {
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "armv7l" &>/dev/null; then
          UNAME_SYSTEM="armv7l"
          UNAME_FILE="TrumpCoin.arm-linux-gnueabihf.zip"
        fi
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "aarch64" &>/dev/null; then
          UNAME_SYSTEM="aarch64"
          UNAME_FILE="TrumpCoin.aarch64-linux-gnu.zip"
        fi
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "x86_64" &>/dev/null; then
          UNAME_SYSTEM="x86_64"
          UNAME_FILE="TrumpCoin.Linux.zip"
        fi

        # setup trumpcoin wallet
        mkdir /home/"$(whoami)"/TrumpCoin.old &>/dev/null
        mkdir /home/"$(whoami)"/TrumpCoin &>/dev/null
        cp /home/"$(whoami)"/"${UNAME_FILE:?}" /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}".zip
        unzip -j /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}".zip -d /home/"$(whoami)"/TrumpCoin/
      }

      # armv7l
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "armv7l" &>/dev/null; then
        echo "armv7l System"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.arm-linux-gnueabihf.zip ]] &>/dev/null; then
          # download arm-linux-gnueabihf.zip
          cd || exit && wget -N https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.arm-linux-gnueabihf.zip
        fi
      fi

      # aarch64
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "aarch64" &>/dev/null; then
        echo "aarch64 System"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.aarch64-linux-gnu.zip ]] &>/dev/null; then
          # download trumpcoin.aarch64-linux-gnu.zip
          cd || exit && wget -N https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.aarch64-linux-gnu.zip
        fi
      fi

      # x86_64
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "x86_64" &>/dev/null; then
        echo "x86_64 System"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.Linux.zip ]] &>/dev/null; then
          # download trumpcoin.linux.zip
          cd || exit && wget -N https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.Linux.zip
        fi
      fi
      setup
      sudo service cron stop 2>&1
      sleep 1
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 1

      # wait on node (daemon) to stop
      until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
        clear
        printf '%b' "[!!] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
        printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
        sleep 5
      done
      kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null
      sleep 1
      read -r -p "[YN] Start node (daemon)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        echo "[Ok] $(start_daemon)"
      fi
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
      sudo service cron start 2>&1
    fi

    ;;

  esac

  ;;

"2")

  HEIGHT=9
  WIDTH=52
  CHOICE_HEIGHT=2
  BACKTITLE="Trump-Node"
  TITLE="Key Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Import key       Adds a private key"
    2 "Dump key         Reveals the private key")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    # Import key
    echo "Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.

Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.
"
    printf '%b' "Enter private key ${G1:?}>${N0:?} "
    read -r IMPORT_KEY
    if [[ -z "$IMPORT_KEY" ]] &>/dev/null; then
      # non responsive
      echo "[!!] Nothing was typed!"
      sleep 1
      clear
      exit
    fi
    echo "[!?] Please wait..! This call can take minutes to complete."
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf importprivkey "${IMPORT_KEY:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    echo "Reveals the private key corresponding to 'address'.
Then the importprivkey can be used with this output
"
    printf '%b' "Enter address to dump ${G1:?}>${N0:?} "
    read -r DUMP_ADDRESS
    if [[ -z "$DUMP_ADDRESS" ]] &>/dev/null; then
      # non responsive
      echo "[!!] Nothing was typed!"
      sleep 1
      clear
      exit
    fi
    echo "[!?] Please copy this!"
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf dumpprivkey "${DUMP_ADDRESS:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"3")

  HEIGHT=14
  WIDTH=46
  CHOICE_HEIGHT=7
  BACKTITLE="Trump-Node"
  TITLE="Uncomplicated firewall Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Status       Show firewall status"
    2 "Enable       Enables the firewall"
    3 "Disable      Disables the firewall"
    4 "Allow        Add allow rule"
    5 "Deny         Add deny rule"
    6 "Delete All   Delete all rules"
    7 "Use Default  Set default rules")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    echo "Uncomplicated firewall Status"
    sudo ufw status verbose
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    read -r -p "[YN] Enable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "[Ok] Enabling the firewall"
      sudo ufw enable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "3")

    read -r -p "[YN] Disable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "[Ok] Disabling the firewall"
      sudo ufw disable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "4")

    printf '%b' "Example rules using the simple syntax:
ufw allow ${G1:?}53${N0:?}

This rule will allow tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw allow ${G1:?}25/tcp${N0:?}

This will allow tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw allow ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r ALLOW_RULE
    if [[ -z "$ALLOW_RULE" ]] &>/dev/null; then
      # empty
      echo "[!!] Empty, try again"
      exit
    fi
    sudo ufw allow "${ALLOW_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "5")

    printf '%b' "Example rules using the simple syntax:
ufw deny ${G1:?}53${N0:?}

This rule will deny tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw deny ${G1:?}25/tcp${N0:?}

This will deny tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw deny ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r DENY_RULE
    if [[ -z "$DENY_RULE" ]] &>/dev/null; then
      # empty
      echo "[!!] Empty, try again"
      exit
    fi
    sudo ufw deny "${DENY_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "6")

    # delete ufw rules
    echo "[!!] Deleting allow rules 15110, 80, 22"
    sudo ufw delete allow 15110
    sudo ufw delete allow 80
    sudo ufw delete allow 22
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "7")

    # set default ufw rules
    echo "[Ok] Set allow rules 15110, 80, 22"
    sudo ufw allow 15110 comment "TrumpCoin mainnet"
    sudo ufw allow 80 comment "TrumpCoin Graphs"
    sudo ufw allow 22 comment "SSH"
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"4")

  # greater than n seconds, continue
  if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then

    # get uptime
    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    UPTIME_DAYS=$(echo "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/86400" 2>&1 | bc 2>&1)
    UPTIME="(${UPTIME_DAYS:?}d) ${UPTIME:?}"

    # pidof daemon
    PID_DAEMON=$(pidof trumpcoind 2>&1)

    # coin supply
    NODE_COIN_SUPPLY=$(grep "moneysupply" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1 | rev 2>&1 | sed "s#[[:digit:]]\{3\}#&,#g" 2>&1 | rev 2>&1 | sed 's/^,//g' 2>&1)

    # running mainnet or testnet
    if ! "$(grep "main" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
      # mainnet
      WALLET_CHAIN="mainnet"
    else # testnet
      WALLET_CHAIN="testnet"
    fi

    # staking status
    if [[ "$(grep "Staking Active" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1)" ]] &>/dev/null; then

      # proof-of-work active
      NODE_PROOF="Active"
    else
      # proof-of-work not active
      NODE_PROOF="Not active"
    fi

    # get download from wlan(*) - eth(*)
    DOWNLOAD=$(egrep "RX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # get upload from wlan(*) - eth(*)
    UPLOAD=$(egrep "TX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # human-readable format
    DOWNLOAD=$(numfmt --to iec --format "%8.3f" "$DOWNLOAD" 2>&1 | xargs 2>&1)
    UPLOAD=$(numfmt --to iec --format "%8.3f" "$UPLOAD" 2>&1 | xargs 2>&1)

    # get blockchain headers
    WALLET_HEADS=$(grep "blocks" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)
    # get blockchain block
    WALLET_BLOCK=$(grep "headers" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)

    # total connections
    WALLET_PEERS_TOTAL=$(grep "connections" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1)
    # total banned
    WALLET_PEERS_BANNED=$("$WALLET_DIR"/trumpcoin-cli -datadir=./ listbanned 2>&1 | grep -c "address" 2>&1)

    # get total Memory
    TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)
    TOTAL_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $2 }' 2>&1)
    # get free Memory
    FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)
    FREE_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $4 }' 2>&1)
    # calculate
    TOTAL_MEM=$(echo "$TOTAL_MEM+$TOTAL_SWAP" 2>&1 | bc 2>&1)
    FREE_MEM=$(echo "$FREE_MEM+$FREE_SWAP" 2>&1 | bc 2>&1)
    # total and free memory (rrdtool, no color)
    TOTAL_MEM_RR="$TOTAL_MEM"
    FREE_MEM_RR="$FREE_MEM"

    # users online
    USER=$(users 2>&1 | wc -w 2>&1)

    # system load
    LOAD="$(cat /proc/loadavg 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"

    # get cpu temp, celcius, fahrenheit, (raspberry pi)
    CPU_CTEMP=$(</sys/class/thermal/thermal_zone0/temp)
    CPU_CTEMP=$(echo "$CPU_CTEMP / 100 * 0.1" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    CPU_FTEMP=$(echo "(1.8 * $CPU_CTEMP) + 32" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

    # get free Space, mmc block device #0, partition #2, partition #2, dev/root
    USED_HDD=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $3 }' 2>&1)
    # get bytes from kilo
    USED_HDD=$(echo "$USED_HDD*1024" 2>&1 | bc -l 2>&1)
    # human-readable format
    USED_HDD=$(numfmt --to iec --format "%8.3f" "$USED_HDD" 2>&1 | xargs 2>&1)
    # get used hdd percentage
    USED_HDD_P=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $5 }' 2>&1)

    # total swap
    TOTAL_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapTotal" 2>&1 | awk '{ print $2 }' 2>&1)
    # used swap
    USED_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapCached" 2>&1 | awk '{ print $2 }' 2>&1)
    # calculate swap kilo bytes into mega bytes
    USED_SWAP_CALC=$(echo "$USED_SWAP/1024" 2>&1 | bc 2>&1)
    TOTAL_SWAP_CALC=$(echo "$TOTAL_SWAP/1024" 2>&1 | bc 2>&1)

    if [[ ! -f "${LOG_DIR:?}"/node_data/stats/ifconfig ]]; then
      # save ifconfig values to ifconfig, do this once
      ifconfig 2>&1 | egrep -A8 "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1
    fi

    # get interface
    IFCONFIG=$(egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1)
    # get ip address from interface
    IP_ADDRESS=$(echo "$IFCONFIG" 2>&1 | egrep "inet " 2>&1 | grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1)
    # get ip address (no color)
    IP_ADDRESS_N="$IP_ADDRESS"

    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
    # get wallet version
    WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/client/version 2>/dev/null)
    # get wallet balance
    WALLET_BALANCE=$(grep "balance" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)

    # get interface
    IFCONFIG=$(egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1)
    # interface icon (top right)
    INTERFACE=$(echo "${IFCONFIG:?}" 2>&1 | egrep "wlan*|eth*" 2>&1 | awk '{ print $1 }' 2>&1 | awk -F: '{ print $1 }' 2>&1 | head -1 2>&1)

    # unique connections
    UNIQP2P=$(grep "addr:" "${LOG_DIR:?}"/node_data/client/getpeerinfo 2>&1 | grep -v "getaddr" 2>&1 | awk '{ print $2 }' 2>&1 | sed -r '/^.{,10}$/d' 2>&1 | awk -F: '{ print $1 }' 2>&1 | awk '!a[$0]++' 2>&1 | sort -n 2>&1 | wc -l 2>&1)
    # get latest repository and date
    LATEST_HEAD=$(cd /home/"$(whoami)"/trump-node || exit && git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
    LATEST_DATE=$(cd /home/"$(whoami)"/trump-node || exit && git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')

    display_result() {
      dialog --title "$1" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }

    RESULT=$(echo "
OS...........: $(uname -o 2>&1) $(uname -p 2>&1)
Kernel.......: $(uname -r 2>&1)
NodeName.....: $(uname -n 2>&1)
Load.........: ${LOAD:?}
Uptime.......: ${UPTIME:?}

FreeMemory...: ${FREE_MEM_RR:?}M/${TOTAL_MEM_RR:?}M
UsedSwap.....: ${USED_SWAP_CALC:?}M/${TOTAL_SWAP_CALC:?}M
UsedHDD......: ${USED_HDD:?} ${USED_HDD_P:?}
UserSpace....: $(du -sh /home/* 2>/dev/null | xargs 2>&1)
CPUTemp......: ${CPU_CTEMP:?}°C ${CPU_FTEMP:?}°F
Users........: ${USER:?} ($(users 2>&1 | awk '{ print $1 }' 2>&1))

Daemon.......: ${PID_DAEMON:?} (trumpcoind)
Block........: ${WALLET_HEADS:?}/${WALLET_BLOCK:?}
Network......: ${WALLET_CHAIN:?} ${INTERFACE:?}
Address......: ${IP_ADDRESS_N:?}
Download.....: ${DOWNLOAD:?}
Upload.......: ${UPLOAD:?}

Ban(s).......: ${WALLET_PEERS_BANNED:?}
Connections..: ${WALLET_PEERS_TOTAL:?} Unique ${UNIQP2P:?}
Add/Saved....: $(wc -l "${LOG_DIR:?}"/node_data/add_peers 2>&1 | awk '{ print $1 }' 2>&1)/$(wc -l "${WALLET_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)
Fail/Success.: $(wc -l "${LOG_DIR:?}"/node_data/peers/failed 2>&1 | awk '{ print $1 }' 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/peers/success 2>&1 | awk '{ print $1 }' 2>&1)
Balance......: ${WALLET_BALANCE:?}
Staking......: ${NODE_PROOF:?}
CoinSupply...: ${NODE_COIN_SUPPLY:?}

Release......: v${LATEST_VERSION:?}
Installed....: ${WALLET_VERSION:?}
Repository...: ${LATEST_HEAD:?} ${LATEST_DATE:?}
          ")
    display_result "System Information"
    clear
  else
    echo "[!!] Daemon not running!"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo
  fi

  ;;

"5")

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  RESULT=$(df -h)
  display_result "Disk Space"
  clear

  ;;

esac

# END
