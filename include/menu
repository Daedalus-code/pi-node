#!/bin/bash

# By Rainman
# V20222201
# 0.5.8.5

# shellcheck disable=SC2034  # Unused variables left for readability

source /home/pi/pitrump.conf
source /usr/local/bin/include/color

# make sure dialog exist
if ! [ -x "$(command -v dialog)" ] &>/dev/null; then
  sudo apt-get install dialog -y
fi

if [[ ! -s "${LOG_DIR:?}"/node_data/client/listunspent ]] &>/dev/null; then
  # non responsive
  POS_COUNT="0"
else # get input count
  POS_COUNT=$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1)
fi

# date for logs
date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

HEIGHT=12
WIDTH=55
CHOICE_HEIGHT=5
BACKTITLE="Trump-Node"
TITLE="Node Options"
MENU="Choose one of the following options:"

OPTIONS=(1 "Node Menu        Shutdown, Restart, Update"
  2 "Keys Menu        Dump/Import keys, PoS (${POS_COUNT:?})"
  3 "UFW Menu         Uncomplicated firewall"
  4 "Information      Trump node status"
  5 "System Space     Disk space utilized")

CHOICE=$(dialog --clear \
  --backtitle "$BACKTITLE" \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in

"1")

  function start_daemon() {
    # make sure debug.log exist
    touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # remove old files
    rm "${WALLET_DIR:?}"/onion &>/dev/null
    truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # start node (daemon)
    sleep 1
    "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
    printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  }

  HEIGHT=10
  WIDTH=53
  CHOICE_HEIGHT=3
  BACKTITLE="Trump-Node"
  TITLE="Node Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Shutdown         Shutdown trumpcoin daemon"
    2 "Restart          Restart trumpcoin daemon"
    3 "Install          Install trumpcoin wallet")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    # turn of trumpcoin daemon
    read -r -p "[YN] Turn off daemon, are you sure? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      if [[ "$(cat "${LOG_DIR:?}"/node_data/peers/failed 2>/dev/null)" -gt "$(cat "${WALLET_DIR:?}"/failed 2>/dev/null)" ]] &>/dev/null; then
        cp "${LOG_DIR:?}"/node_data/peers/failed "${WALLET_DIR:?}"/failed 2>&1
      fi
      read -r -p "[YN] Kill PID?, No for client stop! y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # hard shutdown, turn off crontab
        sudo service cron stop 2>&1
        kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null && sleep 1
      else # normal shutdown, turn off crontab
        sudo service cron stop 2>&1
        printf '%b' "[!!] "
        "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 1
        # wait on node (daemon) to stop
        until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
          clear
          printf '%b' "[!!] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
          sleep 10
          kill -9 "$(pidof trumpcoind 2>&1)"
        done
      fi
      read -r -p "[YN] Remove graph databases? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        rm -r /home/"$(whoami)"/stats/ &>/dev/null
      fi
      read -r -p "[YN] Reboot? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sleep 5
        sudo reboot
      else # turn crontab back on if no reboot
        sudo service cron start 2>&1
      fi
    fi
    clear

    ;;

  "2")

    read -r -p "[YN] Restart node (daemon)? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "Restarting node!"
      sudo service cron stop 2>&1
      printf '%b' "[!!] "
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 1
      # wait on node (daemon) to stop
      until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
        clear
        printf '%b' "[!!] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
        sleep 10
        kill -9 "$(pidof trumpcoind 2>&1)"
      done
      start_daemon
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
      sudo service cron start 2>&1
    fi

    ;;

  "3")

    # armv7l
    if uname -a 2>&1 | grep "armv7l" &>/dev/null; then
      # get latest release
      LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
      if [[ ! -f /home/"$(whoami)"/TrumpCoin.arm-linux-gnueabihf.zip ]] &>/dev/null; then
        printf '%b' "${G1:?}Downloading TrumpCoin wallet (armv7l)${N0:?}\n"
        # download arm-linux-gnueabihf.zip
        cd || exit && wget https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.arm-linux-gnueabihf.zip
      fi
      if [[ ! -f /home/"$(whoami)"/TrumpCoin/trumpcoind ]] &>/dev/null; then
        printf '%b' "${G1:?}Installing trumpcoin node (armv7l)${N0:?}\n"
        # setup trumpcoin wallet
        unzip -o /home/"$(whoami)"/TrumpCoin.arm-linux-gnueabihf.zip -d /home/"$(whoami)"/TrumpCoin
      else
        WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/client/version 2>/dev/null)
        if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
          # non responsive
          WALLET_VERSION="${GR:?}vLoading${N0:?}"
        fi
        echo "Latest...: v${LATEST_VERSION:?}"
        printf '%b' "Installed: ${G1:?}${WALLET_VERSION:?}${N0:?}\n"
      fi
      read -r -p "[YN] Force upgrade? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 1
        # wait on node (daemon) to stop
        until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
          clear
          printf '%b' "[!!] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
          sleep 10
          kill -9 "$(pidof trumpcoind 2>&1)"
        done
        cd || exit && wget https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.arm-linux-gnueabihf.zip
        # setup trumpcoin wallet
        unzip -o /home/"$(whoami)"/TrumpCoin.arm-linux-gnueabihf.zip -d /home/"$(whoami)"/TrumpCoin
        start_daemon
        echo
        read -r -p "[Ok] Press Enter to continue" </dev/tty
        echo
        sudo service cron start 2>&1
      fi
    else
      echo "This is not armv7l! (ARM)"
    fi

    ;;

  esac

  ;;

"2")

  HEIGHT=9
  WIDTH=52
  CHOICE_HEIGHT=2
  BACKTITLE="Trump-Node"
  TITLE="Key Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Import key       Adds a private key"
    2 "Dump key         Reveals the private key")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    # Import key
    echo "Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.

Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.
"
    printf '%b' "Enter private key ${G1:?}>${N0:?} "
    read -r IMPORT_KEY
    if [[ -z "$IMPORT_KEY" ]] &>/dev/null; then
      # non responsive
      echo "Nothing was typed!"
      sleep 1
      clear
      exit
    fi
    echo "Please wait..! This call can take minutes to complete."
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf importprivkey "${IMPORT_KEY:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    echo "Reveals the private key corresponding to 'address'.
Then the importprivkey can be used with this output
"
    printf '%b' "Enter address to dump ${G1:?}>${N0:?} "
    read -r DUMP_ADDRESS
    if [[ -z "$DUMP_ADDRESS" ]] &>/dev/null; then
      # non responsive
      echo "Nothing was typed!"
      sleep 1
      clear
      exit
    fi
    echo "Please copy this!"
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf dumpprivkey "${DUMP_ADDRESS:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"3")

  HEIGHT=14
  WIDTH=46
  CHOICE_HEIGHT=7
  BACKTITLE="Trump-Node"
  TITLE="Uncomplicated firewall Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Status       Show firewall status"
    2 "Enable       Enables the firewall"
    3 "Disable      Disables the firewall"
    4 "Allow        Add allow rule"
    5 "Deny         Add deny rule"
    6 "Delete All   Delete all rules"
    7 "Use Default  Set default rules")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    echo "Uncomplicated firewall Status"
    sudo ufw status verbose
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    read -r -p "[YN] Enable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "Enabling the firewall"
      sudo ufw enable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "3")

    read -r -p "[YN] Disable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "Disabling the firewall"
      sudo ufw disable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "4")

    printf '%b' "Example rules using the simple syntax:
ufw allow ${G1:?}53${N0:?}

This rule will allow tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw allow ${G1:?}25/tcp${N0:?}

This will allow tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw allow ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r ALLOW_RULE
    if [[ -z "$ALLOW_RULE" ]] &>/dev/null; then
      # empty
      echo "Empty, try again"
      exit
    fi
    sudo ufw allow "${ALLOW_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "5")

    printf '%b' "Example rules using the simple syntax:
ufw deny ${G1:?}53${N0:?}

This rule will deny tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw deny ${G1:?}25/tcp${N0:?}

This will deny tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw deny ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r DENY_RULE
    if [[ -z "$DENY_RULE" ]] &>/dev/null; then
      # empty
      echo "Empty, try again"
      exit
    fi
    sudo ufw deny "${DENY_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "6")

    # delete ufw rules
    echo "Deleting allow rules 15110, 80, 22"
    sudo ufw delete allow 15110
    sudo ufw delete allow 80
    sudo ufw delete allow 22
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "7")

    # set default ufw rules
    echo "Set allow rules 15110, 80, 22"
    sudo ufw allow 15110 comment "TrumpCoin mainnet"
    sudo ufw allow 80 comment "TrumpCoin Graphs"
    sudo ufw allow 22 comment "SSH"
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"4")

  # get uptime
  UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
  UPTIME_DAYS=$(echo "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/86400" 2>&1 | bc 2>&1)
  UPTIME="(${UPTIME_DAYS:?}d) ${UPTIME:?}"

  # pidof daemon
  PID_DAEMON=$(pidof trumpcoind 2>&1)

  # coin supply
  NODE_COIN_SUPPLY=$(grep "moneysupply" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1 | rev 2>&1 | sed "s#[[:digit:]]\{3\}#&,#g" 2>&1 | rev 2>&1 | sed 's/^,//g' 2>&1)

  # running mainnet or testnet
  if ! "$(grep "main" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
    # mainnet
    WALLET_CHAIN="mainnet"
  else # testnet
    WALLET_CHAIN="testnet"
  fi

  # staking status
  if [[ "$(grep "Staking Active" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1)" ]] &>/dev/null; then

    # proof-of-work active
    NODE_PROOF="Active"
  else
    # proof-of-work not active
    NODE_PROOF="Not active"
  fi

  # get download from wlan(*) - eth(*)
  DOWNLOAD=$(egrep "RX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
  # get upload from wlan(*) - eth(*)
  UPLOAD=$(egrep "TX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
  # human-readable format
  DOWNLOAD=$(numfmt --to iec --format "%8.3f" "$DOWNLOAD" 2>&1 | xargs 2>&1)
  UPLOAD=$(numfmt --to iec --format "%8.3f" "$UPLOAD" 2>&1 | xargs 2>&1)

  # get blockchain headers
  WALLET_HEADS=$(grep "blocks" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)
  # get blockchain block
  WALLET_BLOCK=$(grep "headers" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)

  # total connections
  WALLET_PEERS_TOTAL=$(grep "connections" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1)
  # total banned
  WALLET_PEERS_BANNED=$("$WALLET_DIR"/trumpcoin-cli -datadir=./ listbanned 2>&1 | grep -c "address" 2>&1)

  # get total Memory
  TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)
  TOTAL_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $2 }' 2>&1)
  # get free Memory
  FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)
  FREE_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $4 }' 2>&1)
  # calculate
  TOTAL_MEM=$(echo "$TOTAL_MEM+$TOTAL_SWAP" 2>&1 | bc 2>&1)
  FREE_MEM=$(echo "$FREE_MEM+$FREE_SWAP" 2>&1 | bc 2>&1)
  # total and free memory (rrdtool, no color)
  TOTAL_MEM_RR="$TOTAL_MEM"
  FREE_MEM_RR="$FREE_MEM"

  # users online
  USER=$(users 2>&1 | wc -w 2>&1)

  # system load
  LOAD="$(cat /proc/loadavg 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"

  # get cpu temp, celcius, fahrenheit, (raspberry pi)
  CPU_CTEMP=$(</sys/class/thermal/thermal_zone0/temp)
  CPU_CTEMP=$(echo "$CPU_CTEMP / 100 * 0.1" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
  CPU_FTEMP=$(echo "(1.8 * $CPU_CTEMP) + 32" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

  # get free Space, mmc block device #0, partition #2, partition #2, dev/root
  USED_HDD=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $3 }' 2>&1)
  # get bytes from kilo
  USED_HDD=$(echo "$USED_HDD*1024" 2>&1 | bc -l 2>&1)
  # human-readable format
  USED_HDD=$(numfmt --to iec --format "%8.3f" "$USED_HDD" 2>&1 | xargs 2>&1)
  # get used hdd percentage
  USED_HDD_P=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $5 }' 2>&1)

  # total swap
  TOTAL_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapTotal" 2>&1 | awk '{ print $2 }' 2>&1)
  # used swap
  USED_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapCached" 2>&1 | awk '{ print $2 }' 2>&1)
  # calculate swap kilo bytes into mega bytes
  USED_SWAP_CALC=$(echo "$USED_SWAP/1024" 2>&1 | bc 2>&1)
  TOTAL_SWAP_CALC=$(echo "$TOTAL_SWAP/1024" 2>&1 | bc 2>&1)

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  RESULT=$(echo "
OS..........: $(uname -o 2>&1) $(uname -p 2>&1)
Kernel......: $(uname -r 2>&1)
Load........: ${LOAD:?}
FreeMemory..: ${FREE_MEM_RR:?}M/${TOTAL_MEM_RR:?}M
UsedSwap....: ${USED_SWAP_CALC:?}M/${TOTAL_SWAP_CALC:?}M
Uptime......: ${UPTIME:?}
UsedHDD.....: ${USED_HDD:?} ${USED_HDD_P:?}
UserSpace...: $(du -sh /home/* 2>/dev/null | xargs 2>&1)
CPUTemp.....: ${CPU_CTEMP:?}°C ${CPU_FTEMP:?}°F
Users.......: ${USER:?}

Daemon......: ${PID_DAEMON:?}
Ban(s)......: ${WALLET_PEERS_BANNED:?}
Connections.: ${WALLET_PEERS_TOTAL:?}
Block.......: ${WALLET_HEADS:?}/${WALLET_BLOCK:?}
Network.....: ${WALLET_CHAIN:?}
CoinSupply..: ${NODE_COIN_SUPPLY:?}
Staking.....: ${NODE_PROOF:?}
Download....: ${DOWNLOAD:?}
Upload......: ${UPLOAD:?}
          ")
  display_result "System Information"
  clear
  ;;

"5")

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  RESULT=$(df -h)
  display_result "Disk Space"
  clear

  ;;

esac

# END
