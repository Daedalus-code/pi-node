#!/bin/bash

# By Rainman
# V20223101
# 1.6.2.9

# dialog, ncurses no utf8 acs
export NCURSES_NO_UTF8_ACS=1

# shellcheck disable=SC2034  # Unused variables left for readability

source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

# make sure dialog exist
if ! [ -x "$(command -v dialog)" ] &>/dev/null; then
  sudo apt-get install dialog -y
fi

if ! [ -x "$(command -v unzip)" ] &>/dev/null; then
  sudo apt-get install unzip -y
fi

if [[ ! -s "${LOG_DIR:?}"/node_data/client/listunspent ]] &>/dev/null; then
  # non responsive
  POS_COUNT="0"
else # get input count
  POS_COUNT=$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
fi

# date for logs
date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

if [[ -z "$LOG_DATE" ]] &>/dev/null; then
  LOG_DATE=$(date '+%Y-%m-%dT%TZ' 2>&1)
fi

HEIGHT=17
WIDTH=54
CHOICE_HEIGHT=10
BACKTITLE="Trump-Node"
TITLE="Node Options"
MENU="Choose one option:"

OPTIONS=(1 "Wallet Menu      Shutdown, Re/Start node"
  2 "Keys Menu        Dump/Import keys PoS (${POS_COUNT:?})"
  3 "Information      Trump node status"
  4 "System Space     Disk space utilized"
  5 "Download Menu    Download & Install"
  6 "Configuration    Node configuration(s)"
  7 "Swap Menu        Swap space options"
  8 "UFW Menu         Uncomplicated firewall"
  9 "Tor Menu         Proxy options (tor)"
  10 "Quit             Exit menu")

CHOICE=$(dialog --clear \
  --nocancel \
  --backtitle "$BACKTITLE" \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in

"1")

  HEIGHT=9
  WIDTH=55
  CHOICE_HEIGHT=2
  BACKTITLE="Trump-Node"
  TITLE="Wallet Menu"
  MENU="Choose one option:"

  OPTIONS=(1 "Shutdown         Stop daemon, reboot system"
    2 "Re/Start         Re/Start daemon ($(pidof trumpcoind 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1))")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  # stop node

  "1")

    # turn of trumpcoin daemon
    read -r -p "[YN] Stop node, are you sure? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      # turn off cron
      sudo service cron stop 2>&1
      if [[ "$(cat "${LOG_DIR:?}"/node_data/peers/failed 2>/dev/null)" -gt "$(cat "${WALLET_DIR:?}"/failed 2>/dev/null)" ]] &>/dev/null; then
        cp "${LOG_DIR:?}"/node_data/peers/failed "${WALLET_DIR:?}"/failed 2>&1
      fi # only ask if wallet is not synced
      if ! grep "Sync has finished" "${LOG_DIR:?}"/node_data/synced &>/dev/null; then
        read -r -p "[YN] Kill PID?, No for client stop! y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # hard shutdown
          kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null && sleep 1
        fi
      fi
      # normal shutdown
      printf '%b' "[${R1:?}!!${N0:?}] "
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
      # wait on node (daemon) to stop
      until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
        clear
        printf '%b' "[${R1:?}!!${N0:?}] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
        printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
        sleep 15
        kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null
      done

      read -r -p "[YN] Reboot? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sleep 5
        sudo reboot
      else # turn crontab back on if no reboot
        sudo service cron start 2>&1
      fi
    fi
    clear

    ;;

    # restart node

  "2")

    read -r -p "[YN] Re/start node (daemon)? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop &>/dev/null
      sleep 5
      sudo service cron stop 2>&1
      killall trumpcoind &>/dev/null
      echo "[Ok] Re/Starting node!"
      # make sure debug.log exist
      touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
      # remove old files
      rm "${WALLET_DIR:?}"/onion &>/dev/null
      rm "${WALLET_DIR:?}"/getwan &>/dev/null

      truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
      # start node (daemon)
      sleep 1
      "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
      sudo service cron start 2>&1
    fi

    ;;

  esac

  ;;

"2")

  HEIGHT=9
  WIDTH=52
  CHOICE_HEIGHT=2
  BACKTITLE="Trump-Node"
  TITLE="Key Menu"
  MENU="Choose one option:"

  OPTIONS=(1 "Import key       Adds a private key"
    2 "Dump key         Reveals the private key")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    # Import key
    echo "Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.

Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.
"
    printf '%b' "Enter private key ${G1:?}>${N0:?} "
    read -r IMPORT_KEY
    if [[ -z "$IMPORT_KEY" ]] &>/dev/null; then
      # non responsive
      printf '%b' "[${R1:?}!!${N0:?}] Nothing was typed!\n"
      sleep 1
      clear
      exit
    fi
    printf '%b' "[${R1:?}!!${GR:?}?${N0:?}] Please wait..! This call can take minutes to complete.\n"
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf importprivkey "${IMPORT_KEY:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    echo "Reveals the private key corresponding to 'address'.
Then the importprivkey can be used with this output
"
    printf '%b' "Enter address to dump ${G1:?}>${N0:?} "
    read -r DUMP_ADDRESS
    if [[ -z "$DUMP_ADDRESS" ]] &>/dev/null; then
      # non responsive
      printf '%b' "[${R1:?}!!${N0:?}] Nothing was typed!\n"
      sleep 1
      clear
      exit
    fi
    echo "[!?] Please copy this!"
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf dumpprivkey "${DUMP_ADDRESS:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"8")

  HEIGHT=14
  WIDTH=46
  CHOICE_HEIGHT=7
  BACKTITLE="Trump-Node"
  TITLE="Uncomplicated firewall Menu"
  MENU="Choose one option:"

  OPTIONS=(1 "Status       Show firewall status"
    2 "Enable       Enables the firewall"
    3 "Disable      Disables the firewall"
    4 "Allow        Add allow rule"
    5 "Deny         Add deny rule"
    6 "Delete All   Delete all rules"
    7 "Use Default  Set default rules")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    echo "Uncomplicated firewall Status"
    sudo ufw status verbose
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    read -r -p "[YN] Enable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "[Ok] Enabling the firewall"
      sudo ufw enable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "3")

    read -r -p "[YN] Disable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "[Ok] Disabling the firewall"
      sudo ufw disable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "4")

    printf '%b' "Example rules using the simple syntax:
ufw allow ${G1:?}53${N0:?}

This rule will allow tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw allow ${G1:?}25/tcp${N0:?}

This will allow tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw allow ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r ALLOW_RULE
    if [[ -z "$ALLOW_RULE" ]] &>/dev/null; then
      # empty
      printf '%b' "[${R1:?}!!${N0:?}] Empty, try again\n"
      exit
    fi
    sudo ufw allow "${ALLOW_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "5")

    printf '%b' "Example rules using the simple syntax:
ufw deny ${G1:?}53${N0:?}

This rule will deny tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw deny ${G1:?}25/tcp${N0:?}

This will deny tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw deny ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r DENY_RULE
    if [[ -z "$DENY_RULE" ]] &>/dev/null; then
      # empty
      printf '%b' "[${R1:?}!!${N0:?}] Empty, try again\n"
      exit
    fi
    sudo ufw deny "${DENY_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "6")

    # delete ufw rules
    printf '%b' "[${R1:?}!!${N0:?}] Deleting allow rules 15110, 80, 22\n"
    sudo ufw delete allow 15110
    sudo ufw delete allow 80
    sudo ufw delete allow 22
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "7")

    # set default ufw rules
    echo "[Ok] Set allow rules 15110, 80, 22"
    sudo ufw allow 15110 comment "TrumpCoin mainnet"
    sudo ufw allow 80 comment "TrumpCoin Graphs"
    sudo ufw allow 22 comment "SSH"
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"3")

  echo "Please wait"
  # greater than n seconds, continue
  if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then

    # get uptime
    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    UPTIME_DAYS=$(echo "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/86400" 2>&1 | bc 2>&1)
    UPTIME="(${UPTIME_DAYS:?}d) ${UPTIME:?}"

    # get system uptime
    awk -F. ' {print $1 }' /proc/uptime >"${LOG_DIR:?}"/node_data/stats/system.uptime 2>&1
    SYS_UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/stats/system.uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/stats/system.uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/stats/system.uptime 2>/dev/null)%60")))
    SYS_UPTIME_DAYS=$(echo "$(cat "${LOG_DIR:?}"/node_data/stats/system.uptime 2>/dev/null)/86400" 2>&1 | bc 2>&1)
    SYS_UPTIME="(${SYS_UPTIME_DAYS:?}d) ${SYS_UPTIME:?}"

    # pidof daemon
    PID_DAEMON=$(pidof trumpcoind 2>&1)

    # coin supply
    NODE_COIN_SUPPLY=$(grep "moneysupply" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1 | rev 2>&1 | sed "s#[[:digit:]]\{3\}#&,#g" 2>&1 | rev 2>&1 | sed 's/^,//g' 2>&1)

    # running mainnet or testnet
    if ! "$(grep "main" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
      # mainnet
      WALLET_CHAIN="mainnet"
    else # testnet
      WALLET_CHAIN="testnet"
    fi

    # staking status
    if [[ "$(grep "Staking Active" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1)" ]] &>/dev/null; then

      # proof-of-stake active
      NODE_PROOF="Active"
    else
      # proof-of-stake not active
      NODE_PROOF="Not active"
    fi

    # get download from wlan(*) - eth(*)
    DOWNLOAD=$(egrep "RX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # get upload from wlan(*) - eth(*)
    UPLOAD=$(egrep "TX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # human-readable format
    DOWNLOAD=$(numfmt --to iec --format "%8.3f" "$DOWNLOAD" 2>&1 | xargs 2>&1)
    UPLOAD=$(numfmt --to iec --format "%8.3f" "$UPLOAD" 2>&1 | xargs 2>&1)

    # get blockchain headers
    WALLET_HEADS=$(grep "blocks" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)
    # get blockchain block
    WALLET_BLOCK=$(grep "headers" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)

    # total connections
    WALLET_PEERS_TOTAL=$(grep "connections" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1)
    # total banned
    WALLET_PEERS_BANNED=$(cat "${LOG_DIR:?}"/node_data/stats/bans 2>/dev/null)

    # get total Memory
    TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)
    TOTAL_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $2 }' 2>&1)
    # get free Memory
    FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)
    FREE_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $4 }' 2>&1)
    # calculate
    TOTAL_MEM=$(echo "$TOTAL_MEM+$TOTAL_SWAP" 2>&1 | bc 2>&1)
    FREE_MEM=$(echo "$FREE_MEM+$FREE_SWAP" 2>&1 | bc 2>&1)
    # total and free memory (rrdtool, no color)
    TOTAL_MEM_RR="$TOTAL_MEM"
    FREE_MEM_RR="$FREE_MEM"

    # users online
    USER=$(users 2>&1 | wc -w 2>&1)

    # system load
    uptime 2>&1 | xargs 2>&1 | egrep -o "[0-9]+.[0-9]+, [0-9]+.[0-9]+, [0-9]+.[0-9]+" 2>&1 | tr -d ',' >"${LOG_DIR:?}"/node_data/stats/load 2>&1
    LOAD=$(cat "${LOG_DIR:?}"/node_data/stats/load 2>/dev/null)

    if [[ -z "$LOAD" ]] &>/dev/null; then
      # non responsive
      LOAD=$(uptime 2>&1 | xargs 2>&1 | egrep -o "[0-9]+.[0-9]+, [0-9]+.[0-9]+, [0-9]+.[0-9]+" 2>&1 | tr -d ',' 2>&1)
    fi

    # get cpu temp, celcius, fahrenheit, (raspberry pi)
    CPU_CTEMP=$(</sys/class/thermal/thermal_zone0/temp)
    CPU_CTEMP=$(echo "${CPU_CTEMP:?} / 100 * 0.1" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    CPU_FTEMP=$(echo "(1.8 * ${CPU_CTEMP:?}) + 32" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

    # save lscpu values to lscpu, do this once
    lscpu >"${LOG_DIR:?}"/node_data/stats/lscpu
    # get cpu count
    CPUS=$(grep "CPU(s):" "${LOG_DIR:?}"/node_data/stats/lscpu 2>&1 | awk '{ print $2 }' 2>&1)

    # get cpu count
    CPUS=$(grep "CPU(s):" "${LOG_DIR:?}"/node_data/stats/lscpu 2>&1 | awk '{ print $2 }' 2>&1)

    # get free Space, mmc block device #0, partition #2, partition #2, dev/root
    USED_HDD=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $3 }' 2>&1)
    # get bytes from kilo
    USED_HDD=$(echo "${USED_HDD:?}*1024" 2>&1 | bc -l 2>&1)
    # human-readable format
    USED_HDD=$(numfmt --to iec --format "%8.3f" "${USED_HDD:?}" 2>&1 | xargs 2>&1)
    # get used hdd percentage
    USED_HDD_P=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $5 }' 2>&1)

    # total swap
    TOTAL_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapTotal" 2>&1 | awk '{ print $2 }' 2>&1)
    # used swap
    USED_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapCached" 2>&1 | awk '{ print $2 }' 2>&1)
    # calculate swap kilo bytes into mega bytes
    USED_SWAP_CALC=$(echo "${USED_SWAP:?}/1024" 2>&1 | bc 2>&1)
    TOTAL_SWAP_CALC=$(echo "${TOTAL_SWAP:?}/1024" 2>&1 | bc 2>&1)

    if [[ ! -f "${LOG_DIR:?}"/node_data/stats/ifconfig ]] &>/dev/null; then
      # save ifconfig values to ifconfig, do this once
      ifconfig 2>&1 | egrep -A8 "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1
    fi

    # get interface
    IFCONFIG=$(egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1)
    # get ip address from interface
    IP_ADDRESS=$(echo "${IFCONFIG:?}" 2>&1 | egrep "inet " 2>&1 | grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1)
    # get ip address (no color)
    IP_ADDRESS_N="${IP_ADDRESS:?}"

    # get wallet version
    WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/client/version 2>/dev/null)
    # get wallet balance
    WALLET_BALANCE=$(cat "${LOG_DIR:?}"/node_data/stats/total_balance 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)

    # get interface
    IFCONFIG=$(egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1)
    # interface icon (top right)
    INTERFACE=$(echo "${IFCONFIG:?}" 2>&1 | egrep "wlan*|eth*" 2>&1 | awk '{ print $1 }' 2>&1 | awk -F: '{ print $1 }' 2>&1 | head -1 2>&1)

    # unique connections
    UNIQP2P=$(egrep "addr:|addrlocal:" "${LOG_DIR:?}"/node_data/client/getpeerinfo 2>&1 | grep -v "getaddr" 2>&1 | awk '{ print $2 }' 2>&1 | sed -r '/^.{,10}$/d' 2>&1 | awk -F: '{ print $1 }' 2>&1 | sort -n 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)
    # get latest repository and date
    LATEST_HEAD=$(cd /home/"$(whoami)"/trump-node || exit && git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
    LATEST_DATE=$(cd /home/"$(whoami)"/trump-node || exit && git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y')

    # Thank you! -> https://stackoverflow.com/questions/59862020

    dot_field() {
      # todo: Change implementation when field can be 2 words with a space in between
      printf "%-18.18s" "$1" | tr ' ' ' '
      # The : must be printed in a second statement when you don't want cyan dots.
      printf ' '
    }
    # todo: Change implementation when field can be 2 words with a space in between
    space_number() {
      printf "%-19.19s" "$1"
    }
    # todo: add logic when only 4 parameters are given
    printline() {
      echo "   $(dot_field "$1") $(space_number "$2")$(dot_field "$3") $(space_number "$4")$(dot_field "$5") $(space_number "$6")"
    }

    display_result() {
      dialog --title "$1" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }

    RESULT=$(
      echo
      printline "OS" "$(uname -o 2>&1) $(uname -p 2>&1)" "Kernel" "$(uname -r 2>&1)" "Node Name" "$(uname -n 2>&1)"
      printline "Load" "${LOAD:?}" "System Uptime" "${SYS_UPTIME:?}" "Wallet Uptime" "${UPTIME:?}"
      echo
      printline "Free/TotalMemory" "${FREE_MEM_RR:?}M/${TOTAL_MEM_RR:?}M" "Used/Total Swap" "${USED_SWAP_CALC:?}M/${TOTAL_SWAP_CALC:?}M" "Used HDD" "${USED_HDD:?} ${USED_HDD_P:?}"
      printline "User Space" "$(du -sh /home/* 2>/dev/null | xargs 2>&1)" "CPU temperature" "${CPU_CTEMP:?} C ${CPU_FTEMP:?} F (${CPUS:?})" "Users" "${USER:?} ($(users 2>&1 | awk '{ print $1 }' 2>&1))"
      printline "Daemon PID" "${PID_DAEMON:?} (trumpcoind)" "Headers/Blocks" "${WALLET_HEADS:?}/${WALLET_BLOCK:?}" "Network" "${WALLET_CHAIN:?} ${INTERFACE:?}"
      printline "Address" "${IP_ADDRESS_N:?}" "Download" "${DOWNLOAD:?}" "Upload" "${UPLOAD:?}"
      echo
      printline "Ban(s)" "${WALLET_PEERS_BANNED:?}" "Connections" "${WALLET_PEERS_TOTAL:?} Unique ${UNIQP2P:?}" "Add_Peers/Addnodes" "$(wc -l "${LOG_DIR:?}"/node_data/add_peers 2>&1 | awk '{ print $1 }' 2>&1)/$(wc -l "${WALLET_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)"
      printline "Failed/Success" "$(wc -l "${LOG_DIR:?}"/node_data/peers/failed 2>&1 | awk '{ print $1 }' 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/peers/success 2>&1 | awk '{ print $1 }' 2>&1)" "Wallet Balance" "${WALLET_BALANCE:?}" "Staking Status" "${NODE_PROOF:?}"
      printline "Coin Supply" "${NODE_COIN_SUPPLY:?}" "Wallet Installed" "${WALLET_VERSION:?}" "Repository" "${LATEST_HEAD:?} - ${LATEST_DATE:?}"
      printline "Wallet.dat Size" "$(du -sh "${WALLET_DIR:?}"/wallet.dat 2>&1 | awk '{ print $1 }' 2>&1)" "Backups Size" "$(du -sh "${WALLET_DIR:?}"/backups 2>&1 | awk '{ print $1 }' 2>&1)" "Wallet Size" "$(du -sh "${WALLET_DIR:?}" | awk '{ print $1 }' 2>&1)"
    )
    display_result "System Information"
    clear
  else
    printf '%b' "[${R1:?}!!${N0:?}] Daemon not running!\n"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo
  fi

  ;;

"4")

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  RESULT=$(df -h)
  display_result "Disk Space"
  clear

  ;;

"5")

  HEIGHT=10
  WIDTH=68
  CHOICE_HEIGHT=3
  BACKTITLE="Download & Install"
  TITLE="Download trumpcoin tools"
  MENU="Choose one option:"

  OPTIONS=(1 "Download         Download a specific wallet manually"
    2 "Download         Download wallet, bootstrap automatically"
    3 "Bootstrap        Download and Install bootstrap")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  # download manually

  "1")

    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")

    function setup_zip() {
      read -r -p "[YN] Install new wallet? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # setup trumpcoin wallet
        mkdir /home/"$(whoami)"/TrumpCoin.old &>/dev/null
        mkdir /home/"$(whoami)"/TrumpCoin &>/dev/null
        cp /home/"$(whoami)"/"${UNAME_FILE:?}" /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}"
        unzip -j /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}" -d /home/"$(whoami)"/TrumpCoin/
      fi
    }

    HEIGHT=16
    WIDTH=45
    CHOICE_HEIGHT=9
    BACKTITLE="Download manually"
    TITLE="Download Menu"
    MENU="Choose one option:"

    OPTIONS=(1 "libs.zip"
      2 "TrumpCoin.aarch64-linux-gnu.zip"
      3 "TrumpCoin.arm-linux-gnueabihf.zip"
      4 "TrumpCoin.Linux.zip"
      5 "TrumpCoin.Mac.dmg"
      6 "TrumpCoin.Mac.zip"
      7 "TrumpCoin.Ubuntu16.zip"
      8 "Source code (zip)"
      9 "Source code (tar.gz)")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "1")

      echo "Downloading libs.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/libs.zip
      UNAME_SYSTEM="libs.zip"
      echo
      read -r -p "[Ok] ${UNAME_SYSTEM:?} downloaded! Press Enter to continue" </dev/tty
      echo

      ;;

    "2")

      echo "Downloading TrumpCoin.aarch64-linux-gnu.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.aarch64-linux-gnu.zip
      UNAME_SYSTEM="TrumpCoin.aarch64-linux-gnu.zip"
      setup_zip

      ;;

    "3")

      echo "Downloading TrumpCoin.arm-linux-gnueabihf.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.arm-linux-gnueabihf.zip
      UNAME_SYSTEM="TrumpCoin.arm-linux-gnueabihf.zip"
      setup_zip

      ;;

    "4")

      echo "Downloading TrumpCoin.Linux.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Linux.zip
      UNAME_SYSTEM="TrumpCoin.Linux.zip"
      setup_zip

      ;;

    "5")

      echo "Downloading TrumpCoin.Mac.dmg"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Mac.dmg
      UNAME_SYSTEM="TrumpCoin.Mac.dmg"
      echo
      read -r -p "[Ok] ${UNAME_SYSTEM:?} downloaded! Press Enter to continue" </dev/tty
      echo

      ;;

    "6")

      echo "Downloading TrumpCoin.Mac.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Mac.zip
      UNAME_SYSTEM="TrumpCoin.Mac.zip"
      echo
      read -r -p "[Ok] ${UNAME_SYSTEM:?} downloaded! Press Enter to continue" </dev/tty
      echo

      ;;

    "7")

      echo "Downloading TrumpCoin.Ubuntu16.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Ubuntu16.zip
      UNAME_SYSTEM="TrumpCoin.Ubuntu16.zip"
      setup_zip

      ;;

    "8")

      echo "Downloading Source code (zip)"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/"${LATEST_VERSION:?}".zip
      UNAME_SYSTEM="${LATEST_VERSION:?}.zip"
      echo
      read -r -p "[Ok] ${UNAME_SYSTEM:?} downloaded! Press Enter to continue" </dev/tty
      echo

      ;;

    "9")

      echo "Downloading Source code (tar.gz)"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/"${LATEST_VERSION:?}".tar.gz
      UNAME_SYSTEM="${LATEST_VERSION:?}"
      echo
      read -r -p "[Ok] ${UNAME_SYSTEM:?} downloaded! Press Enter to continue" </dev/tty
      echo

      ;;

    esac

    ;;

    # install wallet & bootstrap automatically

  "2")

    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
    # get wallet version
    WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/client/version 2>/dev/null)

    if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
      # non responsive
      WALLET_VERSION="${GR:?}vLoading${N0:?}"
    fi

    printf '%b' "Latest....: ${G0:?}v${LATEST_VERSION:?}${N0:?}\n"
    printf '%b' "Installed.: ${G1:?}${WALLET_VERSION:?}${N0:?}\n"
    echo
    read -r -p "[YN] Install automatically? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

      mkdir /home/"$(whoami)"/TrumpCoin.old &>/dev/null
      mkdir /home/"$(whoami)"/TrumpCoin &>/dev/null

      # create uname -a
      uname -a >"${LOG_DIR:?}"/node_data/uname

      function bootstrap() {
        printf '%b' "[${R1:?}!!${N0:?}] Downloading bootstrap.zip!\n"
        # get latest release
        LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
        cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.bootstrap.zip
        read -r -p "[YN] Unzip bootstrap.zip? -> (${WALLET_DIR:?}) y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          printf '%b' "[${R1:?}!!${N0:?}] "
          "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
          # wait on node (daemon) to stop
          until pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "0" &>/dev/null; do
            clear
            printf '%b' "[${R1:?}!!${N0:?}] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
            sleep 1
          done
          printf '%b' "[${G1:?}!?${N0:?}] Extracting from bootstrap.zip!\n"
          unzip /home/"$(whoami)"/TrumpCoin.bootstrap.zip -d "${WALLET_DIR:?}"
          read -r -p "[YN] Remove bootstrap.zip? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            rm /home/"$(whoami)"/TrumpCoin.bootstrap.zip &>/dev/null
          else
            ls -lSh /home/"$(whoami)"/TrumpCoin.bootstrap.zip
          fi
        fi
      }

      function setup() {
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | egrep "armv7l" &>/dev/null; then
          UNAME_SYSTEM="armv7l"
          UNAME_FILE="TrumpCoin.arm-linux-gnueabihf.zip"
        fi
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "aarch64" &>/dev/null; then
          UNAME_SYSTEM="aarch64"
          UNAME_FILE="TrumpCoin.aarch64-linux-gnu.zip"
        fi
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "x86_64" &>/dev/null; then
          UNAME_SYSTEM="x86_64"
          UNAME_FILE="TrumpCoin.Linux.zip"
        fi

      }

      if [[ -z "$UNAME_FILE" ]] &>/dev/null; then
        # non responsive
        UNAME_FILE=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 8 2>&1 | rev 2>&1)
      fi
      if [[ -z "$UNAME_SYSTEM" ]] &>/dev/null; then
        # non responsive
        UNAME_SYSTEM=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 8 2>&1 | rev 2>&1)
      fi

      function setup_zip() {
        read -r -p "[YN] Install new wallet? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # setup trumpcoin wallet
          cp /home/"$(whoami)"/"${UNAME_FILE:?}" /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}".zip
          unzip -j /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}".zip -d /home/"$(whoami)"/TrumpCoin/
        fi
      }

      # armv7l
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | egrep "armv7l" &>/dev/null; then
        printf '%b' "[${G1:?}Ok${N0:?}] armv7l & aarch64 System\n"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.arm-linux-gnueabihf.zip ]] &>/dev/null; then
          # download arm-linux-gnueabihf.zip
          cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.arm-linux-gnueabihf.zip
          bootstrap # install bootstrap
        fi
      fi

      # aarch64
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "aarch64" &>/dev/null; then
        printf '%b' "[${G1:?}Ok${N0:?}] aarch64 System\n"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.aarch64-linux-gnu.zip ]] &>/dev/null; then
          # download trumpcoin.aarch64-linux-gnu.zip
          cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.aarch64-linux-gnu.zip
          bootstrap # install bootstrap
        fi
      fi

      # x86_64
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "x86_64" &>/dev/null; then
        printf '%b' "[${G1:?}Ok${N0:?}] x86_64 System\n"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.Linux.zip ]] &>/dev/null; then
          # download trumpcoin.linux.zip
          cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.Linux.zip
          bootstrap # install bootstrap
        fi
      fi

      setup
      sudo service cron stop 2>&1
      setup_zip

      echo
      read -r -p "[Ok] Wallet installed! Press Enter to continue" </dev/tty
      echo
      sudo service cron start 2>&1
    fi

    ;;

    # download/install bootstrap

  "3")

    printf '%b' "[${R1:?}!!${N0:?}] Downloading bootstrap.zip!\n"
    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
    cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.bootstrap.zip
    read -r -p "[YN] Unzip bootstrap? -> (${WALLET_DIR:?}) y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      printf '%b' "[${R1:?}!!${N0:?}] "
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
      # wait on node (daemon) to stop
      until pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "0" &>/dev/null; do
        clear
        printf '%b' "[${R1:?}!!${N0:?}] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
        sleep 1
      done
      printf '%b' "[${G1:?}!?${N0:?}] Extracting from bootstrap.zip!\n"
      unzip /home/"$(whoami)"/TrumpCoin.bootstrap.zip -d "${WALLET_DIR:?}"
      echo
      read -r -p "[Ok] Bootstrap installed! Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  esac

  ;;

"6")

  HEIGHT=17
  WIDTH=48
  CHOICE_HEIGHT=10
  BACKTITLE="Node configuration(s)"
  TITLE="Edit configuration"
  MENU="Choose one option:"

  OPTIONS=(1 "TrumpCoin        trumpcoin.conf"
    2 "PatriotNode      patriotnode.conf"
    3 "PiTrump.conf     pitrump.conf"
    4 "Config.txt       boot/config.txt"
    5 "Torrc            Tor configuration"
    6 "Crontab          Job scheduler"
    7 "Crontab (root)   Admin job scheduler"
    8 "Filesystem       /etc/fstab"
    9 "Graphs           rrdtool options"
    10 "Reset            Reset config(s)")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    nano "${WALLET_DIR:?}"/trumpcoin.conf

    ;;

  "2")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    nano "${WALLET_DIR:?}"/patriotnode.conf

    ;;

  "3")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    nano /usr/local/bin/include/pitrump.conf

    ;;

  "4")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    sudo nano /boot/config.txt

    ;;

  "5")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    sudo nano /etc/tor/torrc

    ;;

    # crontab

  "6")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    crontab -e

    ;;

  "7")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    sudo crontab -e

    ;;

    # edit fstab - filesystem table

  "8")

    printf '%b' "${GR:?}CTRL+O to save, CTRL+X to exit${N0:?}\n"
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    clear
    sudo nano /etc/fstab

    ;;

    # rrdtool options

  "9")

    HEIGHT=10
    WIDTH=27
    CHOICE_HEIGHT=3
    BACKTITLE="Graphs"
    TITLE="rrdtool (graphs) options"
    MENU="Choose one option:"

    OPTIONS=(1 "Update graphs"
      2 "Database info"
      3 "Reset databases")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "1")

      if [[ "$GRAPH_STATS" -eq "1" ]] &>/dev/null; then
        read -r -p "[YN] Update graphs? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # update graphs manually
          echo "already_doing_it" >"${LOG_DIR:?}"/node_data/graph.lock 2>&1
          printf '%b' "[${G1:?}Ok${N0:?}] Updating graphs..\n"
          echo
          bash /usr/local/bin/include/graphs
          echo
          read -r -p "[Ok] Press Enter to continue" </dev/tty
          clear
          rm "${LOG_DIR:?}"/node_data/graph.lock &>/dev/null
        fi
      fi

      ;;

    "2")

      display_result() {
        dialog --title "$1" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }

      RESULT=$(echo "$(dir -lh stats/ 2>&1)")
      display_result "rrdtool Database info"

      ;;

    "3")

      printf '%b' "[${R1:?}WARNING${N0:?}] Databases has room for 3 years of data!\n"
      echo "[!!] Space is already set ($(du -sh stats/ 2>&1 | awk '{ print $1 }' 2>&1) -> $(du -k stats/ 2>&1 | awk '{ print $1 }' 2>&1)), are you sure?"
      read -r -p "[YN] Remove graph databases? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        rm -r /home/"$(whoami)"/stats/* &>/dev/null
        echo
        read -r -p "[Ok] rrdtool graphs removed! Press Enter to continue" </dev/tty
        echo
      fi

      ;;

    esac

    ;;

  "10")

    HEIGHT=11
    WIDTH=31
    CHOICE_HEIGHT=4
    BACKTITLE="Reset configuration(s)"
    TITLE="Reset a specific config"
    MENU="Choose one option:"

    OPTIONS=(1 "Reset trumpcoin.conf"
      2 "Reset pitrump.conf"
      3 "Reset config.txt"
      4 "Reset torrc")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "1")

      read -r -p "[YN] Hard reset of trumpcoin.conf? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        mkdir "${WALLET_DIR:?}" &>/dev/null

        # create random rpcuser & rpcpassword
        RANDOM_RPCL=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 4 2>&1 | rev 2>&1)
        RANDOM_RPCN=$(echo "$RANDOM_RPCL" 2>&1 | rev 2>&1)

        # get proxy (tor) hostname with root
        EXTERNALIP=$(sudo cat /var/lib/tor/trumpcoin-service/hostname 2>/dev/null)

        if [[ -z "$EXTERNALIP" ]] &>/dev/null; then
          # non responsive
          EXTERNALIP="#externalip=PLEASE_EDIT"
        else
          EXTERNALIP="externalip=${EXTERNALIP:?}"
        fi

        echo "## trumpcoin.conf configuration file.
# Network-related settings:

# Run on the test network instead of the real trumpcoin network.
#testnet=1

# RPC credentials
rpcuser=${RANDOM_RPCL:?}${RANDOM_RPCN:?}
rpcpassword=${RANDOM_RPCN:?}${RANDOM_RPCL:?}
rpcallowip=${RPC_IP:?}
rpcbind=${RPC_IP:?}

# Connect via a SOCKS5 proxy (default: 127.0.0.1:9050)
proxy=${PROXY:?}

# Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)
onion=${PROXY:?}

# Tor control port to use if onion listening enabled (default: 127.0.0.1:9051)
torcontrol=${TOR_CONTROL:?}

# Tor onion externalip
${EXTERNALIP:?}

# Listening mode, enabled by default except when 'connect' is being used
listen=1
discover=1

# Maximum number of inbound+outbound connections. (default: 125)
maxconnections=${MAX_P2P:?}

# can be commented out if you use the service script
daemon=1" >"${WALLET_DIR:?}"/trumpcoin.conf.tmp 2>&1
        mv "${WALLET_DIR:?}"/trumpcoin.conf.tmp "${WALLET_DIR:?}"/trumpcoin.conf 2>&1
        echo "[Ok] Installed new wallet configuration! -> ${WALLET_DIR:?}/trumpcoin.conf"
        echo
        read -r -p "[Ok] Press Enter to continue" </dev/tty
        echo
      fi

      ;;

    "2")

      read -r -p "[YN] Hard reset of pitrump.conf? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        echo "Reset pitrump.conf!"
        cp /home/"$(whoami)"/trump-node/pitrump.conf /home/"$(whoami)"/
        echo
        read -r -p "[Ok] Press Enter to continue" </dev/tty
        echo
      fi

      ;;

    "3")

      read -r -p "[YN] Hard reset of config.txt? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        echo "Creating backup! (/boot/config.txt)"
        cp /boot/config.txt /home/"$(whoami)"/
        echo
        read -r -p "[Ok] Press Enter to continue" </dev/tty
        echo
      fi

      ;;

    "4")

      read -r -p "[YN] Hard reset of tor? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sudo rm -R /var/lib/tor/trumpcoin-service/ &>/dev/null
        sudo rm -R "${WALLET_DIR:?}"/onion* &>/dev/null

        # tor group, user configuration
        TORGROUP=$(stat -c '%G' /run/tor/control.authcookie 2>/dev/null)
        sudo usermod -a -G "${TORGROUP:?}" "$(whoami)" 2>/dev/null

        # if data missing, add values
        if ! grep "trumpcoin" /etc/tor/torrc &>/dev/null; then

          read -r -p "[YN] Public .onion web server? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            HIDDEN_SERVICE="HiddenServicePort 80 127.0.0.1:80"
          else
            HIDDEN_SERVICE="#HiddenServicePort 80 127.0.0.1:80"
          fi
          echo "RunAsDaemon 1

    ControlPort 9051
    CookieAuthentication 1
    CookieAuthFileGroupReadable 1

    HiddenServiceDir /var/lib/tor/trumpcoin-service/
    HiddenServicePort 15110 127.0.0.1:15110
    ${HIDDEN_SERVICE:?}
    " >"${LOG_DIR:?}"/torrc 2>&1
          cat "${LOG_DIR:?}"/torrc 2>/dev/null | sudo tee -a /etc/tor/torrc 2>&1
          # remove old files
          rm "${LOG_DIR:?}"/torrc &>/dev/null
        fi

        # restart tor after configuration
        sudo service tor restart 2>&1
        printf '%b' "[${Y1:?}!!${N0:?}] Please reset trumpcoin.conf!\n"
        echo
        read -r -p "[Ok] Hard reset of tor done! Press Enter to continue" </dev/tty
        echo
      fi

      ;;

    esac

    ;;

  esac

  ;;

  # swap options

"7")

  # get total physical system memory, do this once
  if [[ ! -f "${WALLET_DIR:?}"/swapinfo ]] &>/dev/null; then
    echo "$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)+$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $2 }' 2>&1)" 2>&1 | bc >"${WALLET_DIR:?}"/swapinfo 2>&1
  fi

  # if physical memory greater than n megabytes, don't install
  if [[ "$(cat "${WALLET_DIR:?}"/swapinfo 2>/dev/null)" -gt "1200" ]] &>/dev/null; then
    # system has enough memory
    printf '%b' "[${G1:?}Ok${N0:?}] System has enough sufficient memory ${G1:?}$(cat "${WALLET_DIR:?}"/swapinfo 2>/dev/null)MB${N0:?}\n"
    # output memory, swap info
    echo
    sudo free -h
    echo
    sudo swapon --show
    echo
    read -r -p "[Ok] No need for swap! Press Enter to continue" </dev/tty
    echo
  else
    read -r -p "[YN] Automatically setup new swap? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

      if [[ ! -f /swapfile ]]; then
        # fallocate a file that will be used for swap
        sudo fallocate -l 1G /swapfile
      else
        echo "[Ok] Already created!"
      fi

      read -r -p "[YN] chmod, mkswap, swapon? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # root user should be able to write and read the swap file
        sudo chmod 600 /swapfile
        # mkswap utility to set up the file as Linux swap area
        sudo mkswap /swapfile
        # enable the swap
        sudo swapon /swapfile
      fi

      if ! grep "swap" /etc/fstab &>/dev/null; then
        # no swap installed, continue
        echo "[Ok] No Swap installed"
        # make change permanent
        echo "/swapfile swap swap defaults 0 0" >"${LOG_DIR:?}"/fstab.tmp
        cat "${LOG_DIR:?}"/fstab.tmp 2>/dev/null | sudo tee -a "${LOG_DIR:?}"/fstab 2>&1
        # remove old file
        rm "${LOG_DIR:?}"/fstab.tmp &>/dev/null
      else
        echo "[Ok] Swap already installed! -> /etc/fstab"
      fi
    fi
  fi

  # swap menu, after the fact

  HEIGHT=11
  WIDTH=23
  CHOICE_HEIGHT=4
  BACKTITLE="Swap options"
  TITLE="Setup Swap space"
  MENU="Choose one option:"

  OPTIONS=(1 "Create Swap"
    2 "Delete Swap"
    3 "Swap status"
    4 "Data to RAM")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  # create swap

  "1")

    echo "Creating Swap manually!"
    printf '%b' "Enter Gigabyte(s) ${G1:?}>${N0:?} "
    read -r SWAPG
    if [[ -z "$SWAPG" ]] &>/dev/null; then
      echo "empty!"
      exit
    fi
    sudo fallocate -l "${SWAPG:?}"G /swapfile
    sudo chmod 600 /swapfile
    sudo mkswap /swapfile
    sudo swapon /swapfile
    if ! grep "swap" /etc/fstab &>/dev/null; then
      # no swap installed, continue
      echo "[Ok] No Swap installed"
      #To make the change permanent open the /etc/fstab file and append the following line:
      echo "/swapfile swap swap defaults 0 0" >"${LOG_DIR:?}"/fstab.tmp
      cat "${LOG_DIR:?}"/fstab.tmp 2>/dev/null | sudo tee -a "${LOG_DIR:?}"/fstab 2>&1
      # remove old file
      rm "${LOG_DIR:?}"/fstab.tmp &>/dev/null
    fi
    # output memory, swap info
    echo
    sudo free -h
    echo
    sudo swapon --show
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

    # delete swap

  "2")

    read -r -p "[YN] Remove Swap? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      sudo rm /swapfile &>/dev/null
      echo "Remove line -> '/swapfile swap swap defaults 0 0' in /etc/fstab"
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      sudo nano /etc/fstab
      read -r -p "[YN] Reboot system? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sudo reboot
      fi
    fi

    ;;

    # swap status

  "3")

    # output total memory, swap info
    printf '%b' "[${G1:?}Ok${N0:?}] Total system memory ${G1:?}$(cat "${WALLET_DIR:?}"/swapinfo 2>/dev/null)MB${N0:?}\n"
    echo
    sudo free -h
    echo
    sudo swapon --show
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

    # setup data to ram

  "4")

    function check_crontab() {
      # look for crontab setup
      if ! sudo crontab -l 2>&1 | grep "@reboot" &>/dev/null; then
        CRON_JOB="@reboot sudo mkdir /var/log/apache2"
        (# add cron job for apache2 @reboot (root)
          sudo crontab -l 2>/dev/null
          echo "${CRON_JOB:?}"
        ) | sudo crontab -
        printf '%b' "[${Y1:?}Ok${N0:?}] (sudo) Crontab installing!\n"
      else
        printf '%b' "[${G1:?}Ok${N0:?}] (sudo) Crontab installed!\n"
      fi
    }

    # look for data to ram setup
    if grep "tmpfs /tmp tmpfs defaults,noatime,nosuid,size=" /etc/fstab &>/dev/null; then
      check_crontab
      printf '%b' "[${G1:?}Ok${N0:?}] (sudo) Data to RAM installed!\n"
    else

      read -r -p "[YN] Setup data to RAM? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        check_crontab
        printf '%b' "Enter tmp size ${GR:?}Enter for default${N0:?}
${G1:?}>${N0:?} "
        read -r RAM_SIZE
        if [[ -z "$RAM_SIZE" ]] &>/dev/null; then
          printf '%b' "[${Y1:?}!!${N0:?}] Empty! Using default 128 (megabytes)\n"
          RAM_SIZE="128" # default set
          sleep 2
        else # user set
          printf '%b' "[${G1:?}!!${N0:?}] Using ${RAM_SIZE:?} (megabytes)\n"
        fi
        printf '%b' "Enter spool size ${GR:?}Enter for default${N0:?}
${G1:?}>${N0:?} "
        read -r RAM_SIZE_SPOOL
        if [[ -z "$RAM_SIZE_SPOOL" ]] &>/dev/null; then
          printf '%b' "[${Y1:?}!!${N0:?}] Empty! Using default 64 (megabytes)\n"
          RAM_SIZE_SPOOL="64" # default set
          sleep 2
        else # user set
          printf '%b' "[${G1:?}!!${N0:?}] Using ${RAM_SIZE_SPOOL:?} (megabytes)\n"
        fi
        # setup data to ram in fstab
        echo "tmpfs /tmp tmpfs defaults,noatime,nosuid,size=${RAM_SIZE:?}m 0 0
tmpfs /var/tmp tmpfs defaults,noatime,nosuid,size=${RAM_SIZE:?}m 0 0
tmpfs /var/log tmpfs defaults,noatime,nosuid,mode=0755,size=${RAM_SIZE:?}m 0 0
tmpfs /var/spool/mqueue tmpfs defaults,noatime,nosuid,mode=0700,gid=12,size=${RAM_SIZE_SPOOL:?}m 0 0" >"${LOG_DIR:?}"/fstab.tmp
        cat "${LOG_DIR:?}"/fstab.tmp 2>/dev/null | sudo tee -a /etc/fstab 2>&1
        # remove old file
        rm "${LOG_DIR:?}"/fstab.tmp &>/dev/null
        read -r -p "[YN] Reboot system? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          printf '%b' "[${R1:?}!!${N0:?}] "
          "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
          # wait on node (daemon) to stop
          until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
            clear
            printf '%b' "[${R1:?}!!${N0:?}] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
            printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
            sleep 5
          done
          kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null
          sudo reboot
        fi
      fi
    fi
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

  # proxy (tor) menu

"9")

  HEIGHT=10
  WIDTH=34
  CHOICE_HEIGHT=3
  BACKTITLE="Tor menu"
  TITLE="Proxy options (tor)"
  MENU="Choose one option:"

  OPTIONS=(1 "Stop tor     (service)"
    2 "Restart tor  (service)"
    3 "Nyx          (Monitor)")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    printf '%b' "[${Y1:?}!!${N0:?}] Stopping!\n"
    printf '%b' "[${Y1:?}!!${N0:?}] $(sudo service tor stop)!\n"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    printf '%b' "[${Y1:?}!!${N0:?}] Restarting!\n"
    printf '%b' "[${Y1:?}!!${N0:?}] $(sudo service tor restart)!\n"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

    # nyx - https://nyx.torproject.org

  "3")

    if ! [ -x "$(command -v nyx)" ] &>/dev/null; then
      read -r -p "[YN] Install Nyx (command-line monitor for Tor)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sudo apt-get install nyx -y
        echo
        read -r -p "[Ok] nyx installed! Press Enter to continue" </dev/tty
        echo
        # run nyx
        sudo nyx
      fi
    else
      # run nyx
      sudo nyx
    fi

    ;;

  esac

  ;;

"10")

  exit # exit menu

  ;;

esac

exec /bin/bash "$0" "$@"

# END
