#!/bin/bash

# By Rainman
# V20222401
# 0.8.9.6

# dialog, ncurses no utf8 acs
export NCURSES_NO_UTF8_ACS=1

# shellcheck disable=SC2034  # Unused variables left for readability

source /usr/local/bin/include/pitrump.conf
source /usr/local/bin/include/color

# make sure dialog exist
if ! [ -x "$(command -v dialog)" ] &>/dev/null; then
  sudo apt-get install dialog -y
fi

if ! [ -x "$(command -v unzip)" ] &>/dev/null; then
  sudo apt-get install unzip -y
fi

if [[ ! -s "${LOG_DIR:?}"/node_data/client/listunspent ]] &>/dev/null; then
  # non responsive
  POS_COUNT="0"
else # get input count
  POS_COUNT=$(grep "address" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
fi

# date for logs
date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/stats/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/stats/date 2>/dev/null)

HEIGHT=15
WIDTH=54
CHOICE_HEIGHT=8
BACKTITLE="Trump-Node"
TITLE="Node Options"
MENU="Choose one of the following options:"

OPTIONS=(1 "Wallet Menu      Shutdown, Re/Start node"
  2 "Keys Menu        Dump/Import keys, PoS (${POS_COUNT:?})"
  3 "UFW Menu         Uncomplicated firewall"
  4 "Information      Trump node status"
  5 "System Space     Disk space utilized"
  6 "Download Menu    Download & Install"
  7 "Reset Graphs     Reset/Remove graphs"
  8 "Configuration    Node configuration(s)")

CHOICE=$(dialog --clear \
  --backtitle "$BACKTITLE" \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in

"1")

  HEIGHT=9
  WIDTH=55
  CHOICE_HEIGHT=2
  BACKTITLE="Trump-Node"
  TITLE="Wallet Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Shutdown         Stop daemon, reboot system"
    2 "Re/Start         Re/Start daemon ($(pidof trumpcoind 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1))")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  # stop node

  "1")

    # turn of trumpcoin daemon
    read -r -p "[YN] Stop node, are you sure? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      if [[ "$(cat "${LOG_DIR:?}"/node_data/peers/failed 2>/dev/null)" -gt "$(cat "${WALLET_DIR:?}"/failed 2>/dev/null)" ]] &>/dev/null; then
        cp "${LOG_DIR:?}"/node_data/peers/failed "${WALLET_DIR:?}"/failed 2>&1
      fi
      read -r -p "[YN] Kill PID?, No for client stop! y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # hard shutdown, turn off crontab
        sudo service cron stop 2>&1
        kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null && sleep 1
      else # normal shutdown, turn off crontab
        sudo service cron stop 2>&1
        printf '%b' "[${R1:?}!!${N0:?}] "
        "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
        # wait on node (daemon) to stop
        until ! pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
          clear
          printf '%b' "[${R1:?}!!${N0:?}] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
          printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
          sleep 5
        done
        kill -9 "$(pidof trumpcoind 2>&1)" &>/dev/null
      fi
      read -r -p "[YN] Reboot? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sleep 5
        sudo reboot
      else # turn crontab back on if no reboot
        sudo service cron start 2>&1
      fi
    fi
    clear

    ;;

    # restart node

  "2")

    read -r -p "[YN] Re/start node (daemon)? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop &>/dev/null
      sleep 5
      sudo service cron stop 2>&1
      killall trumpcoind &>/dev/null
      echo "[Ok] Re/Starting node!"
      # make sure debug.log exist
      touch "${WALLET_LOG_DIR:?}"/debug.log 2>&1
      # remove old files
      rm "${WALLET_DIR:?}"/onion &>/dev/null
      truncate -s 0 "${LOG_DIR:?}"/node_data/* &>/dev/null
      truncate -s 0 "${LOG_DIR:?}"/node_data/client/* &>/dev/null
      truncate -s 0 "${LOG_DIR:?}"/node_data/stats/* &>/dev/null
      truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
      # start node (daemon)
      sleep 1
      "${WALLET_DIR:?}"/trumpcoind -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf -debug=tor -proxy="${PROXY:?}" -daemon
      printf '%b' "${LOG_DATE:?} Status() Wallet.Warden: PID(?) Starting wallet daemon!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
      sudo service cron start 2>&1
    fi

    ;;

  esac

  ;;

"2")

  HEIGHT=9
  WIDTH=52
  CHOICE_HEIGHT=2
  BACKTITLE="Trump-Node"
  TITLE="Key Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Import key       Adds a private key"
    2 "Dump key         Reveals the private key")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    # Import key
    echo "Adds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.

Note: This call can take minutes to complete if rescan is true, during that time, other rpc calls
may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.
"
    printf '%b' "Enter private key ${G1:?}>${N0:?} "
    read -r IMPORT_KEY
    if [[ -z "$IMPORT_KEY" ]] &>/dev/null; then
      # non responsive
      printf '%b' "[${R1:?}!!${N0:?}] Nothing was typed!\n"
      sleep 1
      clear
      exit
    fi
    printf '%b' "[${R1:?}!!${GR:?}?${N0:?}] Please wait..! This call can take minutes to complete.\n"
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf importprivkey "${IMPORT_KEY:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    echo "Reveals the private key corresponding to 'address'.
Then the importprivkey can be used with this output
"
    printf '%b' "Enter address to dump ${G1:?}>${N0:?} "
    read -r DUMP_ADDRESS
    if [[ -z "$DUMP_ADDRESS" ]] &>/dev/null; then
      # non responsive
      printf '%b' "[${R1:?}!!${N0:?}] Nothing was typed!\n"
      sleep 1
      clear
      exit
    fi
    echo "[!?] Please copy this!"
    "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf dumpprivkey "${DUMP_ADDRESS:?}"
    clear
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"3")

  HEIGHT=14
  WIDTH=46
  CHOICE_HEIGHT=7
  BACKTITLE="Trump-Node"
  TITLE="Uncomplicated firewall Menu"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Status       Show firewall status"
    2 "Enable       Enables the firewall"
    3 "Disable      Disables the firewall"
    4 "Allow        Add allow rule"
    5 "Deny         Add deny rule"
    6 "Delete All   Delete all rules"
    7 "Use Default  Set default rules")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    echo "Uncomplicated firewall Status"
    sudo ufw status verbose
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    read -r -p "[YN] Enable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "[Ok] Enabling the firewall"
      sudo ufw enable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "3")

    read -r -p "[YN] Disable firewall? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      echo "[Ok] Disabling the firewall"
      sudo ufw disable
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  "4")

    printf '%b' "Example rules using the simple syntax:
ufw allow ${G1:?}53${N0:?}

This rule will allow tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw allow ${G1:?}25/tcp${N0:?}

This will allow tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw allow ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r ALLOW_RULE
    if [[ -z "$ALLOW_RULE" ]] &>/dev/null; then
      # empty
      printf '%b' "[${R1:?}!!${N0:?}] Empty, try again\n"
      exit
    fi
    sudo ufw allow "${ALLOW_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "5")

    printf '%b' "Example rules using the simple syntax:
ufw deny ${G1:?}53${N0:?}

This rule will deny tcp and udp port 53 to any address on this host.
To specify a protocol, append '/protocol'
to the port. For example:
ufw deny ${G1:?}25/tcp${N0:?}

This will deny tcp port 25 to any address on this host.
ufw will also check /etc/services for the port and pro‐
tocol if specifying a service by name. Eg:

ufw deny ${G1:?}smtp${N0:?}\n"
    echo "Type only value/rule"
    printf '%b' "Enter ${G1:?}> ${N0:?}"
    read -r DENY_RULE
    if [[ -z "$DENY_RULE" ]] &>/dev/null; then
      # empty
      printf '%b' "[${R1:?}!!${N0:?}] Empty, try again\n"
      exit
    fi
    sudo ufw deny "${DENY_RULE:?}"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "6")

    # delete ufw rules
    printf '%b' "[${R1:?}!!${N0:?}] Deleting allow rules 15110, 80, 22\n"
    sudo ufw delete allow 15110
    sudo ufw delete allow 80
    sudo ufw delete allow 22
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "7")

    # set default ufw rules
    echo "[Ok] Set allow rules 15110, 80, 22"
    sudo ufw allow 15110 comment "TrumpCoin mainnet"
    sudo ufw allow 80 comment "TrumpCoin Graphs"
    sudo ufw allow 22 comment "SSH"
    sudo ufw status
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  esac

  ;;

"4")

  # greater than n seconds, continue
  if [[ "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)" -gt "1" ]] &>/dev/null; then

    # get uptime
    UPTIME=$(printf '%dh:%dm:%ds\n' $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/3600")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%3600/60")) $(("$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)%60")))
    UPTIME_DAYS=$(echo "$(cat "${LOG_DIR:?}"/node_data/uptime 2>/dev/null)/86400" 2>&1 | bc 2>&1)
    UPTIME="(${UPTIME_DAYS:?}d) ${UPTIME:?}"

    # pidof daemon
    PID_DAEMON=$(pidof trumpcoind 2>&1)

    # coin supply
    NODE_COIN_SUPPLY=$(grep "moneysupply" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1 | rev 2>&1 | sed "s#[[:digit:]]\{3\}#&,#g" 2>&1 | rev 2>&1 | sed 's/^,//g' 2>&1)

    # running mainnet or testnet
    if ! "$(grep "main" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
      # mainnet
      WALLET_CHAIN="mainnet"
    else # testnet
      WALLET_CHAIN="testnet"
    fi

    # staking status
    if [[ "$(grep "Staking Active" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1)" ]] &>/dev/null; then

      # proof-of-work active
      NODE_PROOF="Active"
    else
      # proof-of-work not active
      NODE_PROOF="Not active"
    fi

    # get download from wlan(*) - eth(*)
    DOWNLOAD=$(egrep "RX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # get upload from wlan(*) - eth(*)
    UPLOAD=$(egrep "TX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # human-readable format
    DOWNLOAD=$(numfmt --to iec --format "%8.3f" "$DOWNLOAD" 2>&1 | xargs 2>&1)
    UPLOAD=$(numfmt --to iec --format "%8.3f" "$UPLOAD" 2>&1 | xargs 2>&1)

    # get blockchain headers
    WALLET_HEADS=$(grep "blocks" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)
    # get blockchain block
    WALLET_BLOCK=$(grep "headers" "${LOG_DIR:?}"/node_data/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)

    # total connections
    WALLET_PEERS_TOTAL=$(grep "connections" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1)
    # total banned
    WALLET_PEERS_BANNED=$("${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf listbanned 2>&1 | grep -c "address" 2>&1)

    # get total Memory
    TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)
    TOTAL_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $2 }' 2>&1)
    # get free Memory
    FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)
    FREE_SWAP=$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $4 }' 2>&1)
    # calculate
    TOTAL_MEM=$(echo "$TOTAL_MEM+$TOTAL_SWAP" 2>&1 | bc 2>&1)
    FREE_MEM=$(echo "$FREE_MEM+$FREE_SWAP" 2>&1 | bc 2>&1)
    # total and free memory (rrdtool, no color)
    TOTAL_MEM_RR="$TOTAL_MEM"
    FREE_MEM_RR="$FREE_MEM"

    # users online
    USER=$(users 2>&1 | wc -w 2>&1)

    # system load
    LOAD="$(cat /proc/loadavg 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"

    # get cpu temp, celcius, fahrenheit, (raspberry pi)
    CPU_CTEMP=$(</sys/class/thermal/thermal_zone0/temp)
    CPU_CTEMP=$(echo "$CPU_CTEMP / 100 * 0.1" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
    CPU_FTEMP=$(echo "(1.8 * $CPU_CTEMP) + 32" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

    # get free Space, mmc block device #0, partition #2, partition #2, dev/root
    USED_HDD=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $3 }' 2>&1)
    # get bytes from kilo
    USED_HDD=$(echo "$USED_HDD*1024" 2>&1 | bc -l 2>&1)
    # human-readable format
    USED_HDD=$(numfmt --to iec --format "%8.3f" "$USED_HDD" 2>&1 | xargs 2>&1)
    # get used hdd percentage
    USED_HDD_P=$(df -k 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 | awk '{ print $5 }' 2>&1)

    # total swap
    TOTAL_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapTotal" 2>&1 | awk '{ print $2 }' 2>&1)
    # used swap
    USED_SWAP=$(cat /proc/meminfo 2>&1 | grep "SwapCached" 2>&1 | awk '{ print $2 }' 2>&1)
    # calculate swap kilo bytes into mega bytes
    USED_SWAP_CALC=$(echo "$USED_SWAP/1024" 2>&1 | bc 2>&1)
    TOTAL_SWAP_CALC=$(echo "$TOTAL_SWAP/1024" 2>&1 | bc 2>&1)

    if [[ ! -f "${LOG_DIR:?}"/node_data/stats/ifconfig ]] &>/dev/null; then
      # save ifconfig values to ifconfig, do this once
      ifconfig 2>&1 | egrep -A8 "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1
    fi

    # get interface
    IFCONFIG=$(egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1)
    # get ip address from interface
    IP_ADDRESS=$(echo "$IFCONFIG" 2>&1 | egrep "inet " 2>&1 | grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1)
    # get ip address (no color)
    IP_ADDRESS_N="$IP_ADDRESS"

    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
    # get wallet version
    WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/client/version 2>/dev/null)
    # get wallet balance
    WALLET_BALANCE=$(grep "balance" "${LOG_DIR:?}"/node_data/client/getinfo 2>&1 | egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)

    # get interface
    IFCONFIG=$(egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/stats/ifconfig 2>&1)
    # interface icon (top right)
    INTERFACE=$(echo "${IFCONFIG:?}" 2>&1 | egrep "wlan*|eth*" 2>&1 | awk '{ print $1 }' 2>&1 | awk -F: '{ print $1 }' 2>&1 | head -1 2>&1)

    # unique connections
    UNIQP2P=$(egrep "addr:|addrlocal:" "${LOG_DIR:?}"/node_data/client/getpeerinfo 2>&1 | grep -v "getaddr" 2>&1 | awk '{ print $2 }' 2>&1 | sed -r '/^.{,10}$/d' 2>&1 | awk -F: '{ print $1 }' 2>&1 | awk '!a[$0]++' 2>&1 | sort -n 2>&1 | wc -l 2>&1)
    # get latest repository and date
    LATEST_HEAD=$(cd /home/"$(whoami)"/trump-node || exit && git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
    LATEST_DATE=$(cd /home/"$(whoami)"/trump-node || exit && git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y')

    display_result() {
      dialog --title "$1" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }

    RESULT=$(echo "
OS.................: $(uname -o 2>&1) $(uname -p 2>&1)
Kernel.............: $(uname -r 2>&1)
NodeName...........: $(uname -n 2>&1)
Load...............: ${LOAD:?}
Uptime.............: ${UPTIME:?}

FreeTotalMemory....: ${FREE_MEM_RR:?}M/${TOTAL_MEM_RR:?}M
UsedTotalSwap......: ${USED_SWAP_CALC:?}M/${TOTAL_SWAP_CALC:?}M
UsedHDD............: ${USED_HDD:?} ${USED_HDD_P:?}
UserSpace..........: $(du -sh /home/* 2>/dev/null | xargs 2>&1)
CPUTemp............: ${CPU_CTEMP:?}°C ${CPU_FTEMP:?}°F
Users..............: ${USER:?} ($(users 2>&1 | awk '{ print $1 }' 2>&1))

Daemon.............: ${PID_DAEMON:?} (trumpcoind)
Head/Block.........: ${WALLET_HEADS:?}/${WALLET_BLOCK:?}
Network............: ${WALLET_CHAIN:?} ${INTERFACE:?}
Address............: ${IP_ADDRESS_N:?}
Download...........: ${DOWNLOAD:?}
Upload.............: ${UPLOAD:?}

Ban(s).............: ${WALLET_PEERS_BANNED:?}
Connections........: ${WALLET_PEERS_TOTAL:?} Unique ${UNIQP2P:?}
Add_Peers/Addnodes.: $(wc -l "${LOG_DIR:?}"/node_data/add_peers 2>&1 | awk '{ print $1 }' 2>&1)/$(wc -l "${WALLET_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)
Failed/Success.....: $(wc -l "${LOG_DIR:?}"/node_data/peers/failed 2>&1 | awk '{ print $1 }' 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/peers/success 2>&1 | awk '{ print $1 }' 2>&1)
WalletBalance......: ${WALLET_BALANCE:?}
StakingStatus......: ${NODE_PROOF:?}
CoinSupply.........: ${NODE_COIN_SUPPLY:?}

WalletRelease......: v${LATEST_VERSION:?}
WalletInstalled....: ${WALLET_VERSION:?}
Repository.........: ${LATEST_HEAD:?} - ${LATEST_DATE:?}
          ")
    display_result "System Information"
    clear
  else
    printf '%b' "[${R1:?}!!${N0:?}] Daemon not running!\n"
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo
  fi

  ;;

"5")

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  RESULT=$(df -h)
  display_result "Disk Space"
  clear

  ;;

"6")

  HEIGHT=10
  WIDTH=57
  CHOICE_HEIGHT=3
  BACKTITLE="Download & Install"
  TITLE="Download trumpcoin tools"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "Download         Download wallet manually"
    2 "Download         Download wallet automatically"
    3 "Bootstrap        Download/Install bootstrap")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  # download manually

  "1")

    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")

    function setup_zip() {
      read -r -p "[YN] Install new wallet? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # setup trumpcoin wallet
        mkdir /home/"$(whoami)"/TrumpCoin.old &>/dev/null
        mkdir /home/"$(whoami)"/TrumpCoin &>/dev/null
        cp /home/"$(whoami)"/"${UNAME_FILE:?}" /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}"
        unzip -j /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}" -d /home/"$(whoami)"/TrumpCoin/
      fi
    }

    HEIGHT=16
    WIDTH=45
    CHOICE_HEIGHT=9
    BACKTITLE="Download manually"
    TITLE="Download Menu"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "libs.zip"
      2 "TrumpCoin.aarch64-linux-gnu.zip"
      3 "TrumpCoin.arm-linux-gnueabihf.zip"
      4 "TrumpCoin.Linux.zip"
      5 "TrumpCoin.Mac.dmg"
      6 "TrumpCoin.Mac.zip"
      7 "TrumpCoin.Ubuntu16.zip"
      8 "Source code (zip)"
      9 "Source code (tar.gz)")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "1")

      echo "Downloading libs.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/libs.zip
      UNAME_SYSTEM="libs.zip"
      setup_zip

      ;;

    "2")

      echo "Downloading TrumpCoin.aarch64-linux-gnu.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.aarch64-linux-gnu.zip
      UNAME_SYSTEM="TrumpCoin.aarch64-linux-gnu.zip"
      setup_zip

      ;;

    "3")

      echo "Downloading TrumpCoin.arm-linux-gnueabihf.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.arm-linux-gnueabihf.zip
      UNAME_SYSTEM="TrumpCoin.arm-linux-gnueabihf.zip"
      setup_zip

      ;;

    "4")

      echo "Downloading TrumpCoin.Linux.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Linux.zip
      UNAME_SYSTEM="TrumpCoin.Linux.zip"
      setup_zip

      ;;

    "5")

      echo "Downloading TrumpCoin.Mac.dmg"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Mac.dmg
      UNAME_SYSTEM="TrumpCoin.Mac.dmg"
      setup_zip

      ;;

    "6")

      echo "Downloading TrumpCoin.Mac.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Mac.zip
      UNAME_SYSTEM="TrumpCoin.Mac.zip"
      setup_zip

      ;;

    "7")

      echo "Downloading TrumpCoin.Ubuntu16.zip"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/TrumpCoin.Ubuntu16.zip
      UNAME_SYSTEM="TrumpCoin.Ubuntu16.zip"
      setup_zip

      ;;

    "8")

      echo "Downloading Source code (zip)"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/"${LATEST_VERSION:?}".zip
      UNAME_SYSTEM="${LATEST_VERSION:?}.zip"
      setup_zip

      ;;

    "9")

      echo "Downloading Source code (tar.gz)"
      URL="https://github.com/trumpcoinsupport/TrumpCoin/releases/download/${LATEST_VERSION:?}"
      cd || exit && wget -c "${URL:?}"/"${LATEST_VERSION:?}".tar.gz
      UNAME_SYSTEM="${LATEST_VERSION:?}"
      setup_zip

      ;;

    esac

    ;;

    # install automatically

  "2")

    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
    # get wallet version
    WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/client/version 2>/dev/null)

    if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
      # non responsive
      WALLET_VERSION="${GR:?}vLoading${N0:?}"
    fi

    printf '%b' "Latest....: ${G0:?}v${LATEST_VERSION:?}${N0:?}\n"
    printf '%b' "Installed.: ${G1:?}${WALLET_VERSION:?}${N0:?}\n"
    echo
    read -r -p "[YN] Install automatically? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

      # create uname -a
      uname -a >"${LOG_DIR:?}"/node_data/uname

      function setup() {
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | egrep "armv7l" &>/dev/null; then
          UNAME_SYSTEM="armv7l"
          UNAME_FILE="TrumpCoin.arm-linux-gnueabihf.zip"
        fi
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "aarch64" &>/dev/null; then
          UNAME_SYSTEM="aarch64"
          UNAME_FILE="TrumpCoin.aarch64-linux-gnu.zip"
        fi
        if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "x86_64" &>/dev/null; then
          UNAME_SYSTEM="x86_64"
          UNAME_FILE="TrumpCoin.Linux.zip"
        fi

      }

      if [[ -z "$UNAME_FILE" ]] &>/dev/null; then
        # non responsive
        UNAME_FILE=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 8 2>&1 | rev 2>&1)
      fi
      if [[ -z "$UNAME_SYSTEM" ]] &>/dev/null; then
        # non responsive
        UNAME_SYSTEM=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 8 2>&1 | rev 2>&1)
      fi

      function setup_zip() {
        read -r -p "[YN] Install new wallet? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # setup trumpcoin wallet
          mkdir /home/"$(whoami)"/TrumpCoin.old &>/dev/null
          mkdir /home/"$(whoami)"/TrumpCoin &>/dev/null
          cp /home/"$(whoami)"/"${UNAME_FILE:?}" /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}".zip
          unzip -j /home/"$(whoami)"/TrumpCoin.old/"${LATEST_VERSION:?}"_"${UNAME_SYSTEM:?}".zip -d /home/"$(whoami)"/TrumpCoin/
        fi
      }

      # armv7l & aarch64
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | egrep "armv7l|aarch64" &>/dev/null; then
        printf '%b' "[${G1:?}Ok${N0:?}] armv7l & aarch64 System\n"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.arm-linux-gnueabihf.zip ]] &>/dev/null; then
          # download arm-linux-gnueabihf.zip
          cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.arm-linux-gnueabihf.zip
        fi
      fi

      # aarch64
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "aarch64" &>/dev/null; then
        printf '%b' "[${G1:?}Ok${N0:?}] aarch64 System\n"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.aarch64-linux-gnu.zip ]] &>/dev/null; then
          # download trumpcoin.aarch64-linux-gnu.zip
          cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.aarch64-linux-gnu.zip
        fi
      fi

      # x86_64
      if cat "${LOG_DIR:?}"/node_data/uname 2>/dev/null | grep "x86_64" &>/dev/null; then
        printf '%b' "[${G1:?}Ok${N0:?}] x86_64 System\n"
        if [[ ! -f /home/"$(whoami)"/TrumpCoin.Linux.zip ]] &>/dev/null; then
          # download trumpcoin.linux.zip
          cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.Linux.zip
        fi
      fi

      setup
      sudo service cron stop 2>&1
      setup_zip

      echo
      read -r -p "[Ok] Wallet installed! Press Enter to continue" </dev/tty
      echo
      sudo service cron start 2>&1
    fi

    ;;

    # download/install bootstrap

  "3")

    printf '%b' "[${R1:?}!!${N0:?}] Downloading bootstrap.zip!\n"
    # get latest release
    LATEST_VERSION=$(curl -s https://github.com/trumpcoinsupport/TrumpCoin/releases/latest 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
    cd || exit && wget -c https://github.com/trumpcoinsupport/TrumpCoin/releases/download/"${LATEST_VERSION:?}"/TrumpCoin.bootstrap.zip
    read -r -p "[YN] Unzip bootstrap? -> (${WALLET_DIR:?}) y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      printf '%b' "[${R1:?}!!${N0:?}] "
      "${WALLET_DIR:?}"/trumpcoin-cli -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${WALLET_DIR:?}"/trumpcoin.conf stop && sleep 5
      # wait on node (daemon) to stop
      until pidof trumpcoind 2>&1 | wc -w 2>&1 | egrep "0" &>/dev/null; do
        clear
        printf '%b' "[${R1:?}!!${N0:?}] Waiting on trumpcoin (${G1:?}$(pidof trumpcoind 2>&1)${N0:?}) daemon to shutdown..\n"
        sleep 1
      done
      printf '%b' "[${G1:?}!?${N0:?}] Extracting from bootstrap.zip!\n"
      unzip /home/"$(whoami)"/TrumpCoin.bootstrap.zip -d "${WALLET_DIR:?}"
      echo
      read -r -p "[Ok] Bootstrap installed! Press Enter to continue" </dev/tty
      echo
    fi

    ;;

  esac

  ;;

  # remove rrdtool graphs

"7")

  read -r -p "[YN] Remove graph databases? y/n " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
    rm -r /home/"$(whoami)"/stats/* &>/dev/null
    echo
    read -r -p "[Ok] rrdtool graphs removed! Press Enter to continue" </dev/tty
    echo
  fi

  ;;

"8")

  HEIGHT=11
  WIDTH=44
  CHOICE_HEIGHT=4
  BACKTITLE="Node configuration(s)"
  TITLE="Edit confirmations"
  MENU="Choose one of the following options:"

  OPTIONS=(1 "TrumpCoin.conf   trumpcoin.conf"
    2 "PiTrump.conf     pitrump.conf"
    3 "Config.txt       boot/config.txt"
    4 "Reset            Reset config(s)")

  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 >/dev/tty)

  clear
  case $CHOICE in

  "1")

    echo "edit trumpcoin.conf!"
    nano "${WALLET_DIR:?}"/trumpcoin.conf
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "2")

    echo "edit pitrump.conf!"
    nano /usr/local/bin/include/pitrump.conf
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "3")

    echo "edit config.txt!"
    sudo nano /boot/config.txt
    echo
    read -r -p "[Ok] Press Enter to continue" </dev/tty
    echo

    ;;

  "4")

    HEIGHT=11
    WIDTH=31
    CHOICE_HEIGHT=4
    BACKTITLE="Reset configuration(s)"
    TITLE="Reset a specific configuration"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Reset trumpcoin.conf"
      2 "Reset pitrump.conf"
      3 "Reset config.txt")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "1")

      mkdir "${WALLET_DIR:?}" &>/dev/null

      # create random rpcuser & rpcpassword
      RANDOM_RPCL=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 4 2>&1 | rev 2>&1)
      RANDOM_RPCN=$(echo "$RANDOM_RPCL" 2>&1 | rev 2>&1)

      # get proxy (tor) hostname with root
      EXTERNALIP=$(sudo cat /var/lib/tor/trumpcoin-service/hostname 2>/dev/null)

      if [[ -z "$EXTERNALIP" ]] &>/dev/null; then
        # non responsive
        EXTERNALIP="#externalip=PLEASE_EDIT"
      else
        EXTERNALIP="externalip=${EXTERNALIP:?}"
      fi

      echo "## trumpcoin.conf configuration file.
# Network-related settings:

# Run on the test network instead of the real trumpcoin network.
#testnet=1

# RPC credentials
rpcuser=${RANDOM_RPCL:?}${RANDOM_RPCN:?}
rpcpassword=${RANDOM_RPCN:?}${RANDOM_RPCL:?}
rpcallowip=${RPC_IP:?}
rpcbind=${RPC_IP:?}

# Connect via a SOCKS5 proxy (default: 127.0.0.1:9050)
proxy=${PROXY:?}

# Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)
onion=${PROXY:?}

# Tor control port to use if onion listening enabled (default: 127.0.0.1:9051)
torcontrol=${TOR_CONTROL:?}

# Tor onion externalip
${EXTERNALIP:?}

# Listening mode, enabled by default except when 'connect' is being used
listen=1
discover=1

# Maximum number of inbound+outbound connections. (default: 125)
maxconnections=${MAX_P2P:?}

# can be commented out if you use the service script
daemon=1" >"${WALLET_DIR:?}"/trumpcoin.conf.tmp 2>&1
      mv "${WALLET_DIR:?}"/trumpcoin.conf.tmp "${WALLET_DIR:?}"/trumpcoin.conf 2>&1
      echo "[Ok] Installed new wallet configuration! -> ${WALLET_DIR:?}/trumpcoin.conf"
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo

      ;;

    "2")

      echo "Reset pitrump.conf!"
      cp /home/"$(whoami)"/trump-node/pitrump.conf /home/"$(whoami)"/
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo

      ;;

    "3")

      echo "Creating backup! (/boot/config.txt)"
      cp /boot/config.txt /home/"$(whoami)"/
      echo
      read -r -p "[Ok] Press Enter to continue" </dev/tty
      echo

      ;;

    esac

    ;;

  esac

  ;;

esac

# END
