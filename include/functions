#!/bin/bash

# By Rainman
# V20211912
# 0.8.2.4

# shellcheck disable=SC2034  # Unused variables left for readability

# script version for dashbord
VERSION="v0.8.2.4"

source /home/pi/pitrump.conf
source /usr/local/bin/include/color

# auto update of repository
UPDATE_REPO="0"
# time - date, trim extra spaces with xargs
CLOCK=$(date "+%H:%M:%S" 2>&1)
# date for logs
LOG_DATE=$(date '+%Y-%d-%mT%TZ' 2>&1)

# wait on node (daemon) to start
until pidof trumpcoind 2>&1 |
  wc -w 2>&1 | egrep "1" &>/dev/null; do
  RANDOM_PID=$((((RANDOM % 999) + 1)))
  clear
  printf '%b' "Waiting on trumpcoind (${GR:?}${RANDOM_PID:?}${N0:?}) daemon..\n"
  sleep 2
done

### folders, logs and daemon ###################################################

# create data, peers, tmp directory, ruled by configuration
mkdir "${LOG_DIR:?}"/node_data &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/peers &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/tmp &>/dev/null

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof trumpcoind 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then
  # log lines (tail debug)
  LAST_LOG=$(tail -n 1 "${WALLET_LOG_DIR:?}"/debug.log 2>&1)
  # get log size
  LOG_SIZE=$(ls -lS --block-size=M "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $5 }' 2>&1)
  SIZE="log=$LOG_SIZE"
  LAST_LOG="${LAST_LOG:0:188} $SIZE"
  printf '%b' "${LOG_DATE:?} Status() DEBUG.Log.Size $SIZE${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
else
  # log lines (tail debug)
  LAST_LOG=$(tail -n 1 "${WALLET_LOG_DIR:?}"/debug.log 2>&1)
  LAST_LOG="${LAST_LOG:0:188}"
fi

### system information #########################################################

# system load
LOAD=$(uptime 2>&1 |
  egrep -o "[0-9]+.[0-9]+, [0-9]+.[0-9]+, [0-9]+.[0-9]+" 2>&1 |
  tr -d ',' 2>&1)

# system user
USER=$(whoami 2>&1 | awk '{ print $1 }' 2>&1)

# cpu temp, celcius, fahrenheit, (raspberry pi)
CPU_CTEMP=$(</sys/class/thermal/thermal_zone0/temp)
CPU_CTEMP=$(echo "$CPU_CTEMP / 100 * 0.1" 2>&1 |
  bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
CPU_FTEMP=$(echo "(1.8 * $CPU_CTEMP) + 32" 2>&1 |
  bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

### system memory ##############################################################

# used swap
USED_SWAP=$(swapon -s 2>&1 | grep "/swapfile" 2>&1 |
  awk '{ print $4 }' 2>&1)
# calculate megabytes (used swap)
USED_SWAP=$(echo "$USED_SWAP/1024" 2>&1 | bc -l 2>&1)
# total swap
TOTAL_SWAP=$(swapon -s 2>&1 | grep "/swapfile" 2>&1 |
  awk '{ print $3 }' 2>&1)
# calculate megabytes (total swap)
TOTAL_SWAP=$(echo "$TOTAL_SWAP/1024" 2>&1 | bc -l 2>&1)
# free Memory
FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 |
  awk '{ print $4 }' 2>&1)
# total Memory
TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 |
  awk '{ print $2 }' 2>&1)
# calculate total system total memory + total swap
TOTAL_MEM=$(echo "$TOTAL_MEM+$TOTAL_SWAP" 2>&1 |
  bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
TOTAL_MEM="${G1:?}${TOTAL_MEM:?}${N0:?}"
# calculate total free system memory + used swap
FREE_MEM=$(echo "$(echo "$TOTAL_SWAP-$USED_SWAP" 2>&1 |
  bc -l 2>&1)+$FREE_MEM" 2>&1 |
  bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
FREE_MEM="${G1:?}${FREE_MEM:?}M${N0:?}"

### system space ###############################################################

# free Space, mmc block device #0, partition #2, partition #2, dev/root
USED_HDD=$(df -h 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 |
  awk '{ print $3 }' 2>&1)
USED_HDD="${G1:?}${USED_HDD:?}${N0:?}"
USED_HDD_P=$(df -h 2>&1 | egrep "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 |
  awk '{ print $5 }' 2>&1)

### wan/lan.ip, internet/intranet ##############################################

# if non responsive
IP_ADDRESS="${GR:?}0.0.0.0${N0:?}"
# get interface
IFCONFIG=$(ifconfig 2>&1 | egrep "wlan*|eth*" 2>&1)
IP_ADDRESS=$(echo "$IFCONFIG" 2>&1 | egrep "inet " 2>&1 |
  grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1)
IP_ADDRESS_N="$IP_ADDRESS"
IP_ADDRESS="${C1:?}$IP_ADDRESS${N0:?}"
INTERFACE=$(echo "$IFCONFIG" 2>&1 | egrep "wlan*|eth*" 2>&1 |
  awk '{ print $1 }' 2>&1 | awk -F: '{ print $1 }' 2>&1 |
  head -1 2>&1)

# update wan, update repo, proof-of-work (everyday)
if [[ "$(date +%H%M 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then
  rm "${LOG_DIR:?}"/node_data/getwan &>/dev/null
  if [[ "$UPDATE_REPO" -eq "1" ]] &>/dev/null; then
    # update repo, if set
    cd /home/"$(whoami)"/trump-node || exit &&
      git pull -q && bash include/install 2>&1
  fi
fi

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then
  # get wan address, if missing
  if [ ! -f "${LOG_DIR:?}"/node_data/getwan ]; then
    host myip.opendns.com resolver1.opendns.com >"${LOG_DIR:?}"/node_data/getwan 2>&1
    printf '%b' "${LOG_DATE:?} Status() GetWan.Data(): Found Wan Address (${CY:?}$(grep "address" "${LOG_DIR:?}"/node_data/getwan 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1)${N0:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # public ip address
    PUBLIC_IP=$(grep "address" "${LOG_DIR:?}"/node_data/getwan 2>&1 |
      egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1)
    PUBLIC_IP="${C1:?}${PUBLIC_IP:?}${N0:?}"
  fi
else
  PUBLIC_IP="${GR:?}127.0.0.1${N0:?}"
fi

### download and upload ########################################################

# download, wlan * - eth *
DOWNLOAD=$(ifconfig 2>&1 | egrep "wla*|eth*" 2>&1 |
  grep "RX packets" 2>&1 | head -1 2>&1 |
  awk '{ print $6 $7 }' 2>&1 | tr -d '()' 2>&1)
# upload, wlan * - eth *
UPLOAD=$(ifconfig 2>&1 | egrep "wla*|eth*" 2>&1 |
  grep "TX packets" 2>&1 | head -1 2>&1 |
  awk '{ print $6 $7 }' 2>&1 | tr -d '()' 2>&1)

### tor ########################################################################

# tor status
if grep "127.0.0.1:9050" "${LOG_DIR:?}"/node_data/getinfo &>/dev/null; then
  TOR_ICON="${P1:?}P$N0"
  # running proxy (tor), do this once
  if [ ! -f "${LOG_DIR:?}"/node_data/onion ]; then
    egrep -o "[a0-z9]+.onion" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 |
      tail -1 >"${LOG_DIR:?}"/node_data/onion 2>&1
    printf '%b' "${LOG_DATE:?} Status() GetOnion.Data: Found Onion Address (${P1:?}$(cat "${LOG_DIR:?}"/node_data/onion 2>&1)${N0?:})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
  PUBLIC_IP=$(cat "${LOG_DIR:?}"/node_data/onion 2>&1)
  if [[ -z "$PUBLIC_IP" ]] &>/dev/null; then
    # random onion (cryptography)
    PUBLIC_IP=$(openssl rand -base64 12 2>&1)
  fi # output onion address (short version)
  PUBLIC_IP="${P1:?}${PUBLIC_IP:0:8}...onion${N0:?}"
else
  TOR_ICON="${GR:?}P$N0"
  PUBLIC_IP="${GR:?}127.0.0.1$N0"
fi

### adding nodes ###############################################################

# remove empty files
if [ ! -s "${LOG_DIR:?}"/node_data/onion ] &>/dev/null; then
  rm "${LOG_DIR:?}"/node_data/onion &>/dev/null
fi
if [ ! -s "${LOG_DIR:?}"/node_data/nodes ] &>/dev/null; then
  rm "${LOG_DIR:?}"/node_data/nodes &>/dev/null
fi

# update addnodes, failed peers, along with ticker price (every half, & hour)
if [[ "$(date '+%T' 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then
  rm "${LOG_DIR:?}"/node_data/nodes &>/dev/null
  printf '%b' "${LOG_DATE:?} Status() Update.Nodes() Looking for new peers!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# get node list, ticker (api, arp)
if [ ! -f "${LOG_DIR:?}"/node_data/nodes ] &>/dev/null; then

  # curl, arp data source
  source /usr/local/bin/include/data

  # greater than n seconds
  if [[ "$(uptime_daemon)" -gt "600" ]] &>/dev/null; then

    # count failed connections, feed output to debug.log
    FAIL_COUNT=$(wc -l "${LOG_DIR:?}"/node_data/peers/failed 2>&1 | awk '{ print $1 }' 2>&1)
    ADDNODE_SI=$(wc -l "${LOG_DIR:?}"/node_data/addnodes.script 2>&1 | awk '{ print $1 }' 2>&1)
    ADDNODE_NOD=$(wc -l "${LOG_DIR:?}"/node_data/nodes 2>&1 | awk '{ print $1 }' 2>&1)
    ADDNODE_PSI=$(wc -l /home/"$(whoami)"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)
    SUCCESS_CO=$(grep -c "New outbound peer" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)
    SUCCESS_RA=$(echo "100/$(echo "$FAIL_COUNT+$SUCCESS_CO" 2>&1 |
      bc -l 2>&1)*$SUCCESS_CO" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)

    # syntax fix
    SUCCESS_RA_SX=$(echo "$SUCCESS_RA" 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # non responsive
    if [[ -z "$SUCCESS_RA_SX" ]] &>/dev/null; then
      SUCCESS_RA_SX="0"
    fi

    # success rate with color
    if [[ "$SUCCESS_RA_SX" -ge "0" ]] &>/dev/null; then
      SRAC="${GR:?}${SUCCESS_RA:?}%"
    fi
    if [[ "$SUCCESS_RA_SX" -ge "10" ]] &>/dev/null; then
      SRAC="${Y0:?}${SUCCESS_RA:?}%"
    fi
    if [[ "$SUCCESS_RA_SX" -ge "25" ]] &>/dev/null; then
      SRAC="${Y1:?}${SUCCESS_RA:?}%"
    fi
    if [[ "$SUCCESS_RA_SX" -ge "50" ]] &>/dev/null; then
      SRAC="${G0:?}${SUCCESS_RA:?}%"
    fi
    if [[ "$SUCCESS_RA_SX" -ge "75" ]] &>/dev/null; then
      SRAC="${G1:?}${SUCCESS_RA:?}%"
    fi

    ONION_R=$(cat "${LOG_DIR:?}"/node_data/onion 2>&1)
    WANIP_R=$(grep "address" "${LOG_DIR:?}"/node_data/getwan 2>&1 |
      egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1)

    if [[ -z "$ONION_R" ]] &>/dev/null; then
      # non responsive
      ONION_R="none"
    fi
    if [[ -z "$WANIP_R" ]] &>/dev/null; then
      # non responsive
      WANIP_R="none"
    fi

    # repository head, date and time
    LATEST_HEAD=$(cd /home/"$(whoami)"/trump-node || exit && git rev-parse --short HEAD 2>&1 |
      grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
    LATEST_DATE=$(cd /home/"$(whoami)"/trump-node || exit && git log -1 --format="%at" |
      xargs -I{} date -d @{} '+%Y/%m/%d')
    LATEST_TIME=$(cd /home/"$(whoami)"/trump-node || exit && git log -1 --format="%at" |
      xargs -I{} date -d @{} '+%H:%M:%S')

    printf '%b' "${GR:?} - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() SystemTorNet()${N0:?} Onion ${ONION_R:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() SystemInternet${N0:?} WanIP ${WANIP_R:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() SystemIntranet${N0:?} Local ${IP_ADDRESS_N:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() Script.version${N0:?} Repository [${G1:?}${LATEST_HEAD:?}${N0:?}] ${LATEST_DATE:?} ${LATEST_TIME:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() System.Monitor${N0:?} Load ${LOAD:?} - temp ${CPU_CTEMP:?}°C ${CPU_FTEMP:?}°F ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() System.Monitor${N0:?} Free Mem ${FREE_MEM:?}/${TOTAL_MEM:?} - HDDuse ${USED_HDD:?} (${USED_HDD_P:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() Fail/success()${N0:?} Fail ${R1:?}${FAIL_COUNT:?}${N0:?} Success ${G1:?}$SUCCESS_CO${N0:?} Success Rate ${SRAC:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() Addnode.Size()${N0:?} Add New Peers ${CY:?}${ADDNODE_SI:?}${N0:?} Addnode Peers ${C1:?}$ADDNODE_PSI${N0:?} Curl/Arp Nodes ${G1:?}$ADDNODE_NOD${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() Peers.Status()${N0:?} Total ${WALLET_PEERS_TOTAL:?} New ${WALLET_PEERS_LATEST:?} Older ${WALLET_PEERS_OTHER:?} - ${G1:?}⇩${N0:?} $DOWNLOAD ${R1:?}⇧${N0:?} $UPLOAD${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?} - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  else
    printf '%b' "${LOG_DATE:?} Status() System.Monitor Loading wallet${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### debug peer(s) tries/connected ##############################################

function debug_tries() {
  egrep -o "peer=[0-9]+" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 |
    egrep -o "[0-9]+" 2>&1 | tail -1 2>&1
}

# get value from tries file
TRIES_COUNT=$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/tries 2>&1 | egrep -o "[0-9]+" 2>&1)
# get peers connected overall since start
if [[ "$TRIES_COUNT" -lt "$(debug_tries 2>&1)" ]] &>/dev/null; then
  debug_tries >"${LOG_DIR:?}"/node_data/tries 2>&1
fi

### create personal, script addnodes list(s) ###################################

# create addnodes.script for script below, remove duplicates
cat "${LOG_DIR:?}"/node_data/nodes 2>&1 | sort -n 2>&1 |
  awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/addnodes.script 2>&1 # <- (connecting!)

# create addnodes.extra for personal use, remove duplicates
cat /home/"$(whoami)"/addnodes 2>&1 | sort -n 2>&1 | awk '!a[$0]++' 2>&1 |
  grep -vf /tmp/node_data/peers/success >"${LOG_DIR:?}"/node_data/addnodes.extra 2>&1

### create, feed first extra, banned, ipv4, ipv6 address, sort #################

# generate random ip address, ipv4 & ipv6
RIP_IPV4=$(printf "%d.%d.%d.%d\n" "$((RANDOM % 256))" "$((RANDOM % 256))" "$((RANDOM % 256))" "$((RANDOM % 256))" 2>&1)
RIP_IPV6=$(for ((i = 0; i < 8; i++)); do printf "%02x%02x:" $((RANDOM % 256)) $((RANDOM % 256)); done 2>&1 | sed 's/:$//' 2>&1)
# feed address
echo "$RIP_IPV6" >>"${LOG_DIR:?}"/node_data/addnodes.script 2>&1
echo "$RIP_IPV4" >>"${LOG_DIR:?}"/node_data/addnodes.script 2>&1
echo "127.0.0.1" >"${LOG_DIR:?}"/node_data/peers/failed 2>&1
cat "${LOG_DIR:?}"/node_data/addnodes.extra >>"${LOG_DIR:?}"/node_data/addnodes.script 2>&1
cat "${LOG_DIR:?}"/node_data/addnodes.script 2>&1 |
  awk '!a[$0]++' 2>&1 | sort -n >"${LOG_DIR:?}"/node_data/addnodes.tmp 2>&1
mv "${LOG_DIR:?}"/node_data/addnodes.tmp "${LOG_DIR:?}"/node_data/addnodes.script 2>&1

### failed & success lists #####################################################

# make sure failed, success list(s) exist
touch "${LOG_DIR:?}"/node_data/peers/failed &>/dev/null
touch "${LOG_DIR:?}"/node_data/peers/success &>/dev/null

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then

  # create "failed/refusing" ipv4:ipv6 peers list, sort -n, remove duplicates
  cat "${WALLET_LOG_DIR:?}"/debug.log 2>&1 |
    egrep -o '([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}):[0-9]+|(([a-f0-9:]+:+)+[a-f0-9]+) failed' 2>&1 |
    awk '{ print $1 }' 2>&1 | awk '!a[$0]++' 2>&1 | sort -n >"${LOG_DIR:?}"/node_data/peers/failed 2>&1

  # create "stable/working" ipv4/ipv6 peers list, sort -n, remove duplicates
  cat "${LOG_DIR:?}"/node_data/getpeerinfo 2>&1 | grep -v "subver" 2>&1 |
    egrep -o '([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}):[0-9]+|(([a-f0-9:]+:+)+[a-f0-9]+)' 2>&1 |
    awk '!a[$0]++' 2>&1 | sort -n >"${LOG_DIR:?}"/node_data/peers/success 2>&1

  ### personal addnodes list ###################################################

  # count success and addnodes count
  SUCCESS_COUNT=$(cat "${LOG_DIR:?}"/node_data/peers/success 2>/dev/null | wc -l 2>&1)
  touch /home/"$(whoami)"/addnodes &>/dev/null
  ADDNODE_COUNT=$(cat /home/"$(whoami)"/addnodes 2>/dev/null | wc -l 2>&1)

  # if success count is greater than addnode count
  if [[ "$SUCCESS_COUNT" -gt "$ADDNODE_COUNT" ]] &>/dev/null; then
    # save value, before the fact
    egrep -c "[0-9]+" /home/"$(whoami)"/addnodes >"${LOG_DIR:?}"/node_data/addnodes.value 2>&1
    # create personal/wallet addnodes file, remove duplicates
    cat "${LOG_DIR:?}"/node_data/peers/success 2>&1 |
      sort -n 2>&1 >/home/"$(whoami)"/addnodes 2>&1
    # calculate after the fact
    ADDNODE_NEW_CALC=$(echo "$(cat /home/"$(whoami)"/addnodes 2>/dev/null | wc -l 2>&1)-$(cat /tmp/node_data/addnodes.value 2>/dev/null)" | bc 2>&1)
    printf '%b' "${LOG_DATE:?} Status() AddNode.Script Updating! New nodes! Total $ADDNODE_COUNT (${ADDNODE_NEW_CALC:?})${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi

  ### sort & cleanup script addnodes ###########################################

  comm -23 <(sort "${LOG_DIR:?}"/node_data/addnodes.script) <(sort "${LOG_DIR:?}"/node_data/peers/*) >"${LOG_DIR:?}"/node_data/addnodes.tmp
  comm -23 <(sort "${LOG_DIR:?}"/node_data/addnodes.tmp) <(sort "${LOG_DIR:?}"/node_data/nodes) >"${LOG_DIR:?}"/node_data/addnodes.script
fi

### addnodes screen script #####################################################

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "369" ]] &>/dev/null; then
  # look for screen session, if not found, start one
  if ! screen -list 2>&1 |
    grep -q "addnodes" 2>&1; then
    # create screen session
    screen -dmS addnodes 2>&1

    # connect nodes found with addnodes list above, (using tmp directory)
    cat >"${LOG_DIR:?}"/add_peers <<'EOF'
#!/bin/bash

# By Rainman
# V20211812
# 0.0.3.5

source /home/pi/pitrump.conf
source /usr/local/bin/include/color

# if non responsive
PEERS_TRIES="0"

function peers() {
  PEERS_TRIES=$(sort -n "${LOG_DIR:?}"/node_data/tries 2>&1 | /usr/bin/tail -1 2>&1)
  PEERS_ADDNODES=$(cat "${LOG_DIR:?}"/node_data/addnodes.script 2>&1 | wc -l 2>&1)
  PEERS_ADDNODES_P=$(cat /home/"$(whoami)"/addnodes | wc -l 2>&1)
  PEERS_FAILED=$(cat "${LOG_DIR:?}"/node_data/peers/failed 2>&1 | wc -l 2>&1)
}

LOG_DATE=$(date '+%Y-%d-%mT%TZ' 2>&1)
peers
printf '%b' "${LOG_DATE:?} Status() AddNode.Script Start! Addnodes/New ${PEERS_ADDNODES_P:?}/${PEERS_ADDNODES:?} Failed ${PEERS_FAILED:?} Total Connected ${PEERS_TRIES:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

while IFS= read -r ADDS; do
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="$WALLET_DIR"/trumpcoin.conf addnode "$ADDS" onetry 2>&1
done <"${LOG_DIR:?}"/node_data/addnodes.script # <- (connecting!)

LOG_DATE=$(date '+%Y-%d-%mT%TZ' 2>&1)
peers
printf '%b' "${LOG_DATE:?} Status() AddNode.Script Done! Addnodes/New ${PEERS_ADDNODES_P:?}/${PEERS_ADDNODES:?} Failed ${PEERS_FAILED:?} Total Connected ${PEERS_TRIES:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

screen -X -S addnodes quit
killall screen
screen -wipe
exit
EOF
    # 60s 90s 120s 240s 300s 600s, 900s = 15 minutes
    # start adding nodes, inside screen session (timeout n seconds)
    timeout 900 screen -S addnodes -X -p 0 stuff $'bash /tmp/add_peers\n'
  fi
fi

### wallet information #########################################################

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then
  # collect wallet info, on every update (loop) from client
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getblockchaininfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/getblockchaininfo 2>&1
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/getinfo 2>&1
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getmempoolinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/getmempoolinfo 2>&1
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getnetworkinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/getnetworkinfo 2>&1
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getpatriotnodecount 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/getpatriotnodecount 2>&1
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getwalletinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/getwalletinfo 2>&1
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf listunspent 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/listunspent 2>&1
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getpeerinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/tmp/getpeerinfo 2>&1
  # make sure data exist
  if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/tmp/getinfo; then
    rm -R "${LOG_DIR:?}"/node_data/tmp/* &>/dev/null
  else # use existing data without any error(s)
    cat "${LOG_DIR:?}"/node_data/tmp/getblockchaininfo >"${LOG_DIR:?}"/node_data/getblockchaininfo 2>&1
    cat "${LOG_DIR:?}"/node_data/tmp/getinfo >"${LOG_DIR:?}"/node_data/getinfo 2>&1
    cat "${LOG_DIR:?}"/node_data/tmp/getmempoolinfo >"${LOG_DIR:?}"/node_data/getmempoolinfo 2>&1
    cat "${LOG_DIR:?}"/node_data/tmp/getnetworkinfo >"${LOG_DIR:?}"/node_data/getnetworkinfo 2>&1
    cat "${LOG_DIR:?}"/node_data/tmp/getpatriotnodecount >"${LOG_DIR:?}"/node_data/getpatriotnodecount 2>&1
    cat "${LOG_DIR:?}"/node_data/tmp/getwalletinfo >"${LOG_DIR:?}"/node_data/getwalletinfo 2>&1
    cat "${LOG_DIR:?}"/node_data/tmp/listunspent >"${LOG_DIR:?}"/node_data/listunspent 2>&1
    cat "${LOG_DIR:?}"/node_data/tmp/getpeerinfo >"${LOG_DIR:?}"/node_data/getpeerinfo 2>&1
  fi
fi

# less than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then
  # wallet version
  WALLET_VERSION=$("$WALLET_DIR"/trumpcoin-cli -version 2>&1 |
    egrep -o "v[0-9]+.[0-9]+.[0-9]+" 2>&1)
else # wallet version, grey, wait on daemon
  WALLET_VERSION="${GR:?}Loading${N0:?}"
  WALLET_VERSION="${GR:?}v${WALLET_VERSION:?}${N0:?}"
fi

# running mainnet or testnet
if ! "$(grep "main" "${LOG_DIR:?}"/node_data/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
  # mainnet
  WALLET_CHAIN="${G0:?}mainnet${N0:?}"
else # testnet
  WALLET_CHAIN="${C1:?}testnet${N0:?}"
fi

if [[ "$(uptime_daemon)" -lt "300" ]] &>/dev/null; then
  # nonet
  WALLET_CHAIN="${CY:?}nonet${N0:?}"
fi

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then
  # loading is done
  RC_LOADING="${N0:?}"
  # logo turns yellow while running
  RC="${Y1:?}"
  # headers, blocks, sync
  WALLET_HEADS=$(grep "blocks" "${LOG_DIR:?}"/node_data/getblockchaininfo 2>&1 |
    grep -Eo "[0-9]+" 2>&1)
  WALLET_BLOCK=$(grep "headers" "${LOG_DIR:?}"/node_data/getblockchaininfo 2>&1 |
    grep -Eo "[0-9]+" 2>&1)
  WALLET_SYNC=$(echo "100/$WALLET_HEADS*$WALLET_BLOCK" 2>&1 |
    bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  if [[ $(egrep -o "progress=1.000000" "$WALLET_LOG_DIR"/debug.log) ]] &>/dev/null; then
    WALLET_SYNC="100"
  fi
  WALLET_SYNC="${G1:?}${WALLET_SYNC:?}%${N0:?}"
elif [[ -z "$WALLET_HEADS" ]]; then
  WALLET_HEADS="${GR:?}0${N0:?}"
  WALLET_BLOCK="${GR:?}0${N0:?}"
  WALLET_SYNC="${GR:?}0.00${N0:?}"
  RC_LOADING="${GR:?}        Loading${N0:?}"
else # wallet is loading/syncing
  WALLET_HEADS="${GR:?}0${N0:?}"
  WALLET_BLOCK="${GR:?}0${N0:?}"
  # clean up old files, while loading
  rm -R "${LOG_DIR:?}"/node_data/* &>/dev/null
  # loading while waiting on client
  RC_LOADING="${GR:?}        Loading${N0:?}"
  # logo turns grey while loading
  RC="${GR:?}"
  # non responsive (loading)
  WALLET_SYNC="${GR:?}0.00%${N0:?}"
fi

function wallet_nodes() {
  WALLET_NODES_TOTAL="${GR:?}0${N0:?}"
  WALLET_NODES_STABLE="${GR:?}0${N0:?}"
  WALLET_NODES_ENABLED="${GR:?}0${N0:?}"
  WALLET_NODES_INQUEUE="${GR:?}0${N0:?}"
  WALLET_PEERS_LATEST="${GR:?}0${N0:?}"
  WALLET_PEERS_OTHER="${GR:?}0${N0:?}"
  WALLET_PEERS_TOTAL="${GR:?}0${N0:?}"
}

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then

  # wallet patriotnodes total
  WALLET_NODES_TOTAL=$(grep "total" "${LOG_DIR:?}"/node_data/getpatriotnodecount 2>&1 |
    egrep -o "[0-9]+" 2>&1)
  # wallet patriotnodes stable
  WALLET_NODES_STABLE=$(grep "stable" "${LOG_DIR:?}"/node_data/getpatriotnodecount 2>&1 |
    egrep -o "[0-9]+" 2>&1)
  # wallet patriotnodes enabled
  WALLET_NODES_ENABLED=$(grep "enabled" "${LOG_DIR:?}"/node_data/getpatriotnodecount 2>&1 |
    egrep -o "[0-9]+" 2>&1)
  # wallet patriotnodes inqueue
  WALLET_NODES_INQUEUE=$(grep "inqueue" "${LOG_DIR:?}"/node_data/getpatriotnodecount 2>&1 |
    egrep -o "[0-9]+" 2>&1)

  # wallet connections total
  WALLET_PEERS_TOTAL=$(grep "connections" "${LOG_DIR:?}"/node_data/getinfo 2>&1 |
    awk '{ print $2 }' 2>&1)
  WALLET_PEERS_TOTAL_N="$WALLET_PEERS_TOTAL"
  WALLET_PEERS_TOTAL="${P1:?}$WALLET_PEERS_TOTAL${N0:?}"

  # wallet connections latest (using wallet version)
  WALLET_PEERS_LATEST=$(grep "subver" "${LOG_DIR:?}"/node_data/getpeerinfo 2>&1 |
    egrep -o "$(echo "$WALLET_VERSION" 2>&1 | tr -d 'v' 2>&1)" 2>&1 | wc -l 2>&1)
  if [ -f "${LOG_DIR:?}"/node_data/ticker ]; then
    WALLET_PEERS_LATEST="${G1:?}${WALLET_PEERS_LATEST:?}${N0:?}"
  fi

  # wallet connections other (not latest, probably older wallets)
  WALLET_PEERS_OTHER=$(grep "subver" "${LOG_DIR:?}"/node_data/getpeerinfo 2>&1 |
    egrep -o "[0-9]+.[0-9]+.[0-9]+" 2>&1 | tr -d 'v' 2>&1 |
    grep -v "$(echo "$WALLET_VERSION" | tr -d 'v' 2>&1)" 2>&1 | wc -l 2>&1)
  if [ -f "${LOG_DIR:?}"/node_data/ticker ]; then
    WALLET_PEERS_OTHER="${G0:?}${WALLET_PEERS_OTHER:?}${N0:?}"
  fi

elif [[ "$WALLET_PEERS_TOTAL_N" -eq "0" ]] &>/dev/null; then
  # non responsive
  wallet_nodes
elif [[ -z "$WALLET_PEERS_TOTAL_N" ]] &>/dev/null; then
  # non responsive
  wallet_nodes
else # non responsive
  wallet_nodes
fi

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "300" ]] &>/dev/null; then
  # wallet balance
  WALLET_BALANCE=$(grep "balance" "${LOG_DIR:?}"/node_data/getinfo 2>&1 |
    egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  WALLET_UNCONFIRMED=$(grep "unconfirmed_balance" "${LOG_DIR:?}"/node_data/getwalletinfo 2>&1 |
    awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  WALLET_IMMATURE=$(grep "immature_balance" "${LOG_DIR:?}"/node_data/getwalletinfo 2>&1 |
    awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  WALLET_BALANCE=$(echo "$WALLET_BALANCE+$WALLET_UNCONFIRMED+$WALLET_IMMATURE" |
    bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  # wallet value
  WALLET_VALUE=$(echo "$(tail -1 "${LOG_DIR:?}"/node_data/ticker 2>&1)*$WALLET_BALANCE" 2>&1 |
    bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
else
  WALLET_VALUE="${GR:?}0.00${N0:?}"
  WALLET_BALANCE="${GR:?}0.00${N0:?}"
  WALLET_IMMATURE="${GR:?}0.00${N0:?}"
  WALLET_UNCONFIRMED="${GR:?}0.00${N0:?}"
fi

function wallet_balances() {
  WALLET_TICKER="${GR:?}0${N0:?}"
  WALLET_MEMPOOL="${GR:?}0${N0:?}"
  WALLET_TXCOUNT="${GR:?}0${N0:?}"
  WALLET_INPUTS="${GR:?}0${N0:?}"
}

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "369" ]] &>/dev/null; then
  # wallet ticker.usd
  WALLET_TICKER=$(cat "${LOG_DIR:?}"/node_data/ticker 2>&1)
  # wallet mempool
  WALLET_MEMPOOL=$(grep "size" "${LOG_DIR:?}"/node_data/getmempoolinfo 2>&1 |
    egrep -o "[0-9]+" 2>&1)
  # wallet txcount
  WALLET_TXCOUNT=$(grep "txcount" "${LOG_DIR:?}"/node_data/getwalletinfo 2>&1 |
    egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
  # wallet inputs
  WALLET_INPUTS=$(grep "address" "${LOG_DIR:?}"/node_data/listunspent 2>&1 | wc -l 2>&1)

elif [[ "$WALLET_TXCOUNT" -eq "0" ]] &>/dev/null; then
  # non responsive
  wallet_balances
elif [[ -z "$WALLET_TXCOUNT" ]] &>/dev/null; then
  # non responsive
  wallet_balances
else # non responsive
  wallet_balances
fi

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "369" ]] &>/dev/null; then
  # last confirmation (smallest one)
  LAST_TX=$(grep "confirmations" "${LOG_DIR:?}"/node_data/listunspent 2>&1 |
    awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1)
  # last wallet txid with help of last_tx var
  WALLET_TXLAST=$(cat "${LOG_DIR:?}"/node_data/listunspent 2>&1 | tr -d ':' 2>&1 |
    grep -B8 "confirmations $LAST_TX" 2>&1 | grep "txid" 2>&1 |
    awk '{ print $2 }' 2>&1 | tail -1 2>&1)
else # non responsive
  LAST_TX="${N0:?}"
  WALLET_TXLAST="${GR:?}                       Loading wallet transactions.${N0:?}"
fi

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "369" ]] &>/dev/null; then
  # save wallet stakes (addtowallet), remove duplicates
  # note: not perfect data of proof-of-work
  touch /home/"$(whoami)"/staking 2>&1

  function addtowallet_new() {
    egrep "AddToWallet [a0-z9]+  new" "$WALLET_LOG_DIR"/debug.log
  }

  # count saved stakes
  WALLET_STAKES=$(wc -l /home/"$(whoami)"/staking 2>&1 | awk '{ print $1 }' 2>&1)
  if [[ "$WALLET_STAKES" -lt "$(addtowallet_new 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)" ]] &>/dev/null; then
    addtowallet_new 2>&1 | awk '!a[$0]++' >/home/"$(whoami)"/staking 2>&1
  fi
else
  WALLET_STAKES="${GR:?}0${N0:?}"
fi

if [ -f "${LOG_DIR:?}"/node_data/ticker ]; then
  # wallet pos status
  if [[ "$(grep "Staking Active" "${LOG_DIR:?}"/node_data/getinfo 2>&1)" ]] &>/dev/null; then
    # pos active
    POS_STATUS="${G1:?}S${N0:?}"
    # balance is staking, highlight balance, stakes and inputs
    WALLET_BALANCE="${G1:?}${WALLET_BALANCE:?}${N0:?}"
    WALLET_STAKES="${G1:?}${WALLET_STAKES:?}${N0:?}"
    WALLET_INPUTS="${G1:?}${WALLET_INPUTS:?}${N0:?}"
  else # pos not active
    POS_STATUS="${GR:?}S${N0:?}"
  fi
else # pos not active
  POS_STATUS="${GR:?}S${N0:?}"
fi

### clean up debug.log, peers.dat (truncate) keep pos around ###################

# greater than n seconds
if [[ "$(uptime_daemon)" -gt "369" ]] &>/dev/null; then
  if [[ "$(date +%H%M 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then
    # truncate debug.log
    truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log 2>&1
    if [[ "$KEEP_BACKUPS" -eq "0" ]] &>/dev/null; then
      # remove old backups
      rm -r "${WALLET_DIR:?}"/backups/* &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Clean.remove() Deleting wallet backups${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
    # remove old files
    rm "${LOG_DIR:?}"/node_data/onion &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Clean.truncate debug, onion${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # save proof of work data from debug.log
    # note: not perfect data of proof-of-work
    WALLET_STAKES=$(wc -l /home/"$(whoami)"/staking 2>&1 | awk '{ print $1 }' 2>&1)
    if [[ "$WALLET_STAKES" -gt "$(addtowallet_new 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)" ]] &>/dev/null; then
      cat /home/"$(whoami)"/staking 2>&1 | awk '!a[$0]++' >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      printf '%b' "${LOG_DATE:?} Status() Clean.truncate PoS ${G1:?}${WALLET_STAKES:?}${N0:?} Proof of work data!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
fi

### timeline ###################################################################

# if rpc in warm-up, loading block index, wait
if [ -f "${LOG_DIR:?}"/node_data/getblockchaininfo ]; then

  # random start number
  RANDOM_TIMELINE=$((((RANDOM % 13) + 1)))

  # difficulty
  if [ "$RANDOM_TIMELINE" -eq "1" ]; then
    TIMELINE=$(grep "difficulty" "${LOG_DIR:?}"/node_data/getinfo 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE="Difficulty $TIMELINE"
  # patriotnodes
  elif [ "$RANDOM_TIMELINE" -eq "2" ]; then
    TIMELINE="Patriotnodes ${N0:?}${WALLET_NODES_STABLE:?}${N0:?}/${G1:?}${WALLET_NODES_TOTAL:?}${N0:?}/${G0:?}${WALLET_NODES_ENABLED:?}${N0:?}/${GR:?}${WALLET_NODES_INQUEUE:?}${N0:?}"
  # moneysupply
  elif [ "$RANDOM_TIMELINE" -eq "3" ]; then
    TIMELINE=$(grep "moneysupply" "${LOG_DIR:?}"/node_data/getinfo 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1 | rev 2>&1 |
      sed "s#[[:digit:]]\{3\}#&,#g" 2>&1 | rev 2>&1 | sed 's/^,//g' 2>&1)
    TIMELINE="Moneysupply $TIMELINE"
  # unconfirmed_balance
  elif [ "$RANDOM_TIMELINE" -eq "4" ]; then
    WALLET_UNCONFIRMED_VALUE=$(echo "$WALLET_UNCONFIRMED*$(tail -1 "${LOG_DIR:?}"/node_data/ticker 2>&1)" 2>&1 |
      bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE="Unconfirmed $WALLET_UNCONFIRMED ${GR:?}$WALLET_UNCONFIRMED_VALUE USD${N0:?}"
  # immature_balance
  elif [ "$RANDOM_TIMELINE" -eq "5" ]; then
    WALLET_IMMATURE_VALUE=$(echo "$WALLET_IMMATURE*$(tail -1 "${LOG_DIR:?}"/node_data/ticker 2>&1)" 2>&1 |
      bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE="Immature $WALLET_IMMATURE ${GR:?}$WALLET_IMMATURE_VALUE USD${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "6" ]; then
    # lowest confirmation
    TIMELINE_CONF=$(grep "confirmations" "${LOG_DIR:?}"/node_data/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_CONF*60" 2>&1 |
      bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # calculate seconds into age
    INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
    INPUT_AGE_D=$(echo "$(echo "$INPUT_AGE" 2>&1 |
      egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>&1)
    TIMELINE="New Input $TIMELINE_CONF (${INPUT_AGE_D:?}d) ${GR:?}$INPUT_AGE${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "7" ]; then
    # highest confirmation
    TIMELINE_CONF=$(grep "confirmations" "${LOG_DIR:?}"/node_data/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_CONF*60" 2>&1 |
      bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # calculate seconds into age
    INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
    INPUT_AGE_D=$(echo "$(echo "$INPUT_AGE" 2>&1 |
      egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>&1)
    TIMELINE="Old Input $TIMELINE_CONF (${INPUT_AGE_D:?}d) ${GR:?}$INPUT_AGE${N0:?}"
    # average confirmation
  elif [ "$RANDOM_TIMELINE" -eq "8" ]; then
    UNSPENT_COUNT=$(grep "confirmations" "${LOG_DIR:?}"/node_data/listunspent 2>&1 | wc -l 2>&1)
    TIMELINE=$(grep "confirmations" "${LOG_DIR:?}"/node_data/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)
    # average calculated
    TIMELINE_AVG=$(echo "$TIMELINE/$UNSPENT_COUNT" 2>&1 | bc 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_AVG*60" 2>&1 |
      bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # calculate seconds into age
    INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
    INPUT_AGE_D=$(echo "$(echo "$INPUT_AGE" 2>&1 |
      egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>&1)
    TIMELINE="Average $TIMELINE_AVG ${INPUT_AGE_D:?}d ${GR:?}$INPUT_AGE${N0:?}"
    # wallet value
  elif [ "$RANDOM_TIMELINE" -eq "9" ]; then
    TIMELINE="Value ${WALLET_VALUE:?} USD ${GR:?}$WALLET_TICKER${N0:?}"
    # highest input amount
  elif [ "$RANDOM_TIMELINE" -eq "10" ]; then
    TIMELINE=$(grep "amount" "${LOG_DIR:?}"/node_data/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    TIMELINE="Highest Input $TIMELINE"
    # lowest input amount
  elif [ "$RANDOM_TIMELINE" -eq "11" ]; then
    TIMELINE=$(grep "amount" "${LOG_DIR:?}"/node_data/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1)
    TIMELINE="Lowest Input $TIMELINE"
    # daemon uptime
  elif [ "$RANDOM_TIMELINE" -eq "12" ]; then
    TIMELINE_SEC=$(uptime_daemon 2>&1)
    TIMELINE=$(printf '%dh:%dm:%ds\n' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")) $(("$TIMELINE_SEC%60")))
    TIMELINE="Uptime $TIMELINE"
  elif [ "$RANDOM_TIMELINE" -eq "13" ]; then
    # create a list this time
    echo "$WALLET_PEERS_TOTAL_N" >>"${LOG_DIR:?}"/node_data/connections
    # highest peer count
    HIGH_P2P=$(cat "${LOG_DIR:?}"/node_data/connections 2>&1 | tail -1)
    # lowest peer count
    LOWS_P2P=$(cat "${LOG_DIR:?}"/node_data/connections 2>&1 | head -1)
    TIMELINE="High/Low P2P $HIGH_P2P/$LOWS_P2P"
  fi

else # wait on wallet (--DJT QUOTES - Art Of The Deal)
  # random start number
  RANDOM_TIMELINE=$((((RANDOM % 10) + 1)))
  # quotes - art of the deal
  if [ "$RANDOM_TIMELINE" -eq "1" ]; then
    TIMELINE="${GR}Think big${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "2" ]; then
    TIMELINE="${GR}Maximize your options${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "3" ]; then
    TIMELINE="${GR}Know your market${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "4" ]; then
    TIMELINE="${GR}Use your leverage${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "5" ]; then
    TIMELINE="${GR}Enhance your location${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "6" ]; then
    TIMELINE="${GR}Get the word out${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "7" ]; then
    TIMELINE="${GR}Fight back${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "8" ]; then
    TIMELINE="${GR}Deliver the goods${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "9" ]; then
    TIMELINE="${GR}Contain the costs${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "10" ]; then
    TIMELINE="${GR}Have fun${N0:?}"
  fi
fi

### theme ######################################################################

if [[ "$DARKMODE" -eq "1" ]] &>/dev/null; then
  # darkmode theme (grey)
  RC="${GR:?}"
  TH="${RC:?}D${N0:?}"
else # default theme (yellow)
  RC="${Y1:?}"
  TH="${RC:?}D${N0:?}"
fi

# END
