#!/bin/bash

################################################################################

# shellcheck disable=SC2034  # Unused variables left for readability

# script version for dashbord
VERSION="v1.7.6.2"

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1

# system user
WHOAMI=$(whoami)

### display ####################################################################

# setfont for display HyperPixel 4.0, 800×480 (~235 PPI)
sudo setfont /usr/share/consolefonts/Lat7-Terminus24x12.psf.gz &>/dev/null

### directories ################################################################

# create temp directories, ruled by configuration
mkdir "${LOG_DIR:?}"/node_data &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/system &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/peers &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/data &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/client &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/client/tmp &>/dev/null

### configuration version ###################################################### <- config check

CONFIG_DATE="1648977322" # configuration latest date (date '+%s')

if [[ ! "$(grep "${CONFIG_DATE:?}" /usr/local/bin/include/pinode/pinode.conf 2>&1)" ]] &>/dev/null; then
  until grep "${CONFIG_DATE:?}" /usr/local/bin/include/pinode/pinode.conf &>/dev/null; do
    clear
    printf '%b' "[${Y1:?}!!${N0:?}] Configuration is old! ${GR:?}$(grep "END" /usr/local/bin/include/pinode/pinode.conf 2>&1 | awk '{ print $3 }' 2>&1)${N0:?} -> ${G1:?}${CONFIG_DATE:?}${N0:?}\n"
    sleep 2
  done
fi

### pid of daemon status ####################################################### <- daemon check

# wait on node (daemon) to start
until pidof "${WALLET_DAEMON:?}" 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
  RANDOM_ID=$((((RANDOM % 9999) + 1)))
  RANDOM_PID=$((((RANDOM % "${RANDOM_ID:?}") + 1)))
  clear
  printf '%b' "waiting on wallet (${GR:?}${RANDOM_PID:?}${N0:?}) daemon..${N0:?}"
  sleep 2
done

### wallet daemon starting #####################################################

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof "${WALLET_DAEMON:?}" 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}
# daemon uptime
echo "$(uptime_daemon 2>&1)" 2>&1 | tr -d '-' >"${LOG_DIR:?}"/node_data/wallet/uptime 2>&1

if [[ "$(df -h "${LOG_DIR:?}" | awk '{ print $5 }' | tail -1 | tr -d '%')" -gt "10" || "$(ls -lah "${LOG_DIR:?}"/debug.log | awk '{ print $5 }' | tr -d 'M')" -gt "50" ]] &>/dev/null; then
  echo "$(egrep -v "Status()|UpdateTip|ProcessNewBlock|skipped on sync" "${LOG_DIR:?}"/debug.log)" >"${LOG_DIR:?}"/debug.log
fi

LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/system/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

LC_ALL=de_US.utf8 date '+%T' >"${LOG_DIR:?}"/node_data/system/date.check 2>&1
LOG_CHECK=$(cat "${LOG_DIR:?}"/node_data/system/date.check 2>/dev/null)

if [[ ! -z "$LOG_DATE" ]] &>/dev/null; then
  cp "${LOG_DIR:?}"/node_data/system/date "${LOG_DIR:?}"/node_data/system/date.bkp
fi
if [[ -z "$LOG_DATE" ]] &>/dev/null; then
  LOG_DATE=$(LC_ALL=de_US.utf8 date '+%T' 2>&1)
fi
if [[ -z "$LOG_DATE" ]] &>/dev/null; then
  LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date.bkp 2>/dev/null)
fi

if [[ ! -z "$LOG_CHECK" ]] &>/dev/null; then
  cp "${LOG_DIR:?}"/node_data/system/date.check "${LOG_DIR:?}"/node_data/system/date.check.bkp
fi
if [[ -z "$LOG_CHECK" ]] &>/dev/null; then
  LOG_CHECK=$(LC_ALL=de_US.utf8 date '+%T' 2>&1)
fi
if [[ -z "$LOG_CHECK" ]] &>/dev/null; then
  LOG_CHECK=$(cat "${LOG_DIR:?}"/node_data/system/date.check.bkp 2>/dev/null)
fi

DAEMON_UPTIME="$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)"
if [[ -z "$DAEMON_UPTIME" ]] &>/dev/null; then
  DAEMON_UPTIME="1"
fi

### system information #########################################################

# time - date, trim extra spaces with xargs
LC_ALL=de_US.utf8 date '+%D %H:%M:%S' >"${LOG_DIR:?}"/node_data/system/clock 2>&1

# system user
whoami 2>&1 | awk '{ print $1 }' >"${LOG_DIR:?}"/node_data/system/user 2>&1

# loadavg
cat /proc/loadavg 2>/dev/null | awk '{ print $1,$2,$3 }' >"${LOG_DIR:?}"/node_data/system/load 2>&1

################################################################################

if [[ ! -f "${LOG_DIR:?}"/node_data/system/uname ]] &>/dev/null; then
  echo "$(uname -a)" >"${LOG_DIR:?}"/node_data/system/uname 2>&1
fi

# get cpu architecture
ARCHITECTURE=$(cat "${LOG_DIR:?}"/node_data/system/uname 2>/dev/null | egrep -o "x86_64|i686|i386|armv6l|armv7l|aarch64" | head -1)
# get cpu temp, celcius, fahrenheit, (linux)
case $ARCHITECTURE in
"x86_64" | "i686" | "i386")
  TEMP_PATH="/sys/class/thermal/thermal_zone0/temp"
  ;;
"armv6l" | "armv7l")
  if [ -f "/sys/class/thermal/thermal_zone0/temp" ] &>/dev/null; then
    TEMP_PATH="/sys/class/thermal/thermal_zone0/temp"
  elif [ -f "/sys/class/thermal/thermal_zone1/temp" ] &>/dev/null; then
    TEMP_PATH="/sys/class/thermal/thermal_zone1/temp"
  fi
  ;;
"aarch64")
  TEMP_PATH="/sys/class/thermal/thermal_zone0/temp"
  ;;
*)
  echo "Unsupported architecture: $ARCHITECTURE"
  ;;
esac

if [ -f "$TEMP_PATH" ] &>/dev/null; then
  TEMP=$(cat $TEMP_PATH)
  TEMP=$(echo "scale=2; $TEMP/1000" | bc 2>/dev/null | awk '{ printf "%.0f\n", $1 }')
else
  TEMP="0"
fi

# celcius
CPU_CTEMP="$TEMP°C"
# calculate fahrenheit
CPU_FTEMP="$(echo "(1.8 * ${TEMP:?}) + 32" 2>&1 | bc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)°F"

# system cpu temperature (celcius)
echo "$CPU_CTEMP" >"${LOG_DIR:?}"/node_data/system/cpu_ctemp 2>&1
# system cpu temperature (fahrenheit)
echo "$CPU_FTEMP" >"${LOG_DIR:?}"/node_data/system/cpu_ftemp 2>&1

################################################################################

# do this once (lscpu values)
if [[ ! -f "${LOG_DIR:?}"/node_data/system/cpuinfo ]] &>/dev/null; then

  # do this once (cpu speed, wait time)
  if [ ! -f "${LOG_DIR:?}"/node_data/system/lscpu ] &>/dev/null; then
    lscpu >"${LOG_DIR:?}"/node_data/system/lscpu 2>&1
    cat "${LOG_DIR:?}"/node_data/system/lscpu 2>&1 | grep "CPU max" 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk '{ print $4 }' 2>&1 | awk -F, '{ print $1 }' >"${LOG_DIR:?}"/node_data/system/cpuspeed 2>&1
  fi

  # get cpu count, threads, cores, vendor id, model and speed
  CPUS=$(grep "CPU(s):" "${LOG_DIR:?}"/node_data/system/lscpu 2>&1 | awk '{ print $2 }' 2>&1)
  THREADS=$(grep "Thread(s) per core:" "${LOG_DIR:?}"/node_data/system/lscpu 2>&1 | awk '{ print $4 }' 2>&1)
  CORES=$(grep "Core(s) per socket:" "${LOG_DIR:?}"/node_data/system/lscpu 2>&1 | awk '{ print $4 }' 2>&1)
  VENDORID=$(grep "Vendor ID:" "${LOG_DIR:?}"/node_data/system/lscpu 2>&1 | awk '{ print $3 }' 2>&1)
  MODEL=$(grep "Model name:" "${LOG_DIR:?}"/node_data/system/lscpu 2>&1 | awk '{ print $3 }' 2>&1)
  SPEED=$(echo "$(grep "CPU max MHz:" "${LOG_DIR:?}"/node_data/system/lscpu 2>&1 | awk '{ print $4 }' 2>&1 | awk -F. '{ print $1 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)/1000" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  # create cpu information
  echo "CPU ($CPUS) ${GR:?}$THREADS/$CORES${N0:?} - $VENDORID ${GR:?}$MODEL${N0:?} ${SPEED:?}GHz" >"${LOG_DIR:?}"/node_data/system/cpuinfo 2>&1
fi

# system free memory
echo "$(cat /proc/meminfo 2>/dev/null | grep "MemFree" 2>&1 | awk '{ print $2 }')/1024" 2>&1 | bc >"${LOG_DIR:?}"/node_data/system/mem_free 2>&1
# system total memory
echo "$(cat /proc/meminfo 2>/dev/null | grep "MemTotal" 2>&1 | awk '{ print $2 }')/1024" 2>&1 | bc >"${LOG_DIR:?}"/node_data/system/mem_total 2>&1
# system free swap
echo "$(cat /proc/meminfo 2>/dev/null | grep "SwapFree" 2>&1 | awk '{ print $2 }')/1024" 2>&1 | bc >"${LOG_DIR:?}"/node_data/system/swap_free 2>&1
# system total swap
echo "$(cat /proc/meminfo 2>/dev/null | grep "SwapTotal" 2>&1 | awk '{ print $2 }')/1024" 2>&1 | bc >"${LOG_DIR:?}"/node_data/system/swap_total 2>&1

# system used space
numfmt --to iec --format "%8.3f" "$(echo "$(df -k 2>&1 | sort -n 2>&1 | grep -v "boot" 2>&1 | head -1 2>&1 | awk '{ print $3 }' 2>&1)*1024" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>&1 | xargs >"${LOG_DIR:?}"/node_data/system/hd_used 2>/dev/null
# system used space percentage
df -k 2>&1 | sort -n 2>&1 | grep -v "boot" 2>&1 | head -1 2>&1 | awk '{ print $5 }' >"${LOG_DIR:?}"/node_data/system/hd_used_percentage 2>/dev/null

# ifconfig, iwconfig data
ifconfig 2>&1 | egrep -A9 "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/system/ifconfig 2>&1
iwconfig 2>&1 | egrep -A9 "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/system/iwconfig 2>&1
# system network interface
egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | grep -B1 "inet" 2>&1 | egrep -o "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/system/interface 2>&1
# system ip address
cat "${LOG_DIR:?}"/node_data/system/ifconfig 2>/dev/null | egrep "inet " 2>&1 | grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1 | head -1 >"${LOG_DIR:?}"/node_data/system/ip_address 2>&1

cat "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep "TX packets" 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1 >"${LOG_DIR:?}"/node_data/system/txbytes 2>&1
cat "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep "RX packets" 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1 >"${LOG_DIR:?}"/node_data/system/rxbytes 2>&1

# get download from wlan(*) - eth(*)
DOWNLOAD=$(egrep "RX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep -o "bytes [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
# get upload from wlan(*) - eth(*)
UPLOAD=$(egrep "TX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep -o "bytes [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)

# if zero
if [[ -z "$DOWNLOAD" ]] &>/dev/null; then
  DOWNLOAD="0"
fi
# if zero
if [[ -z "$UPLOAD" ]] &>/dev/null; then
  UPLOAD="0"
fi

# get screen list
LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/wallet/data/screens 2>&1

### mempool activity ###########################################################

# backup mempool data
if [[ ! -f "${DATA_DIR:?}"/mempool ]] &>/dev/null; then
  cp "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity "${DATA_DIR:?}"/mempool &>/dev/null
fi
# update mempool data
if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/mempool)))")" -gt "5460" ]] &>/dev/null; then
  cp "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity "${DATA_DIR:?}"/mempool &>/dev/null
fi
# restore mempool data
if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity ]] &>/dev/null; then
  cp "${WALLET_DIR:?}"/mempool "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity &>/dev/null
fi

# mempool activity
MEMPOOL_LINES=$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | awk '{ print $1 }' 2>&1)
MEMPOOL_ACTIVE=$(grep "1" "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
MEMPOOL_NOACTIVE=$(grep "0" "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
MEMPOOL_PERC_ACTIVE=$(echo "100/$MEMPOOL_LINES*$MEMPOOL_ACTIVE" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)
MEMPOOL_PERC_NOACTIVE=$(echo "100/$MEMPOOL_LINES*$MEMPOOL_NOACTIVE" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)

echo "A ${MEMPOOL_PERC_ACTIVE:?}% D ${MEMPOOL_PERC_NOACTIVE:?}%" >"${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>&1

for i in {1..2}; do
  echo "${MEMPOOL_PERC_ACTIVE:?} ${MEMPOOL_PERC_NOACTIVE:?}" >>"${LOG_DIR:?}"/node_data/wallet/data/mempool_average 2>&1
done

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool_average 2>&1 | awk '{ print $1 }' 2>&1)" -gt "32" ]] &>/dev/null; then
  echo "$(tail -16 "${LOG_DIR:?}"/node_data/wallet/data/mempool_average 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/mempool_average 2>&1
fi

MEMPOOL_AVG_LINES=$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool_average 2>&1 | awk '{ print $1 }' 2>&1)
ACTIVE_LINES=$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/mempool_average 2>&1)
INACTIVE_LINES=$(awk '{ SUM += $2} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/mempool_average 2>&1)

echo "A $(echo "${ACTIVE_LINES:?}/${MEMPOOL_AVG_LINES:?}" | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)% D $(echo "${INACTIVE_LINES:?}/${MEMPOOL_AVG_LINES:?}" | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)%" >"${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>&1

MEMPOOL_PERC_ACTIVE="${MEMPOOL_PERC_ACTIVE:?}%"
MEMPOOL_PERC_NOACTIVE="${MEMPOOL_PERC_NOACTIVE:?}%"

# look for screen session, if not found, run this block
if ! cat "${LOG_DIR:?}"/node_data/wallet/data/screens 2>/dev/null | grep -q "read_mempool" &>/dev/null; then

  # collect mempool n times a loop (time_fix time)

  # kill old session
  screen -X -S read_mempool quit &>/dev/null
  # create new screen session
  screen -dmS read_mempool &>/dev/null

  # make sure read_mempool exist
  if [ ! -f "${LOG_DIR:?}"/read_mempool ] &>/dev/null; then

    cat >"${LOG_DIR:?}"/read_mempool <<'EOF'
#!/bin/bash
# By Rainman
# V20220612
# 0.0.3.0

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1
for (( ; ; )); do # loop script
LOG_DATE=$(LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' 2>&1)
"${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmempoolinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo 2>&1

if [[ "$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
  if [[ ! "$(tail -6 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "Read.mempool()" 2>&1)" ]] &>/dev/null; then
    printf '%b' "${LOG_DATE:?} Status() Read.mempool() Memory pool ${G0:?}$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>/dev/null | awk '{ print $1 }' 2>&1) ${GR:?}$(cat "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>/dev/null | tail -1 2>&1) ${N0:?}$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo 2>&1 | awk '{ print $2 }' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
else
  if [[ ! "$(tail -15 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "Read.mempool()" 2>&1)" ]] &>/dev/null; then
    printf '%b' "${LOG_DATE:?} Status() Read.mempool() Memory pool ${G0:?}$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>/dev/null | awk '{ print $1 }' 2>&1) ${GR:?}$(cat "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>/dev/null | tail -1 2>&1) ${N0:?}$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo 2>&1 | awk '{ print $2 }' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# get blockchain activity with mempool
if [[ "$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/getmempoolinfo 2>&1 | egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" -gt "0" ]] &>/dev/null; then
  # save activity values (1) to mempool.activity
  echo "1" >>"${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1
else # save no activity values (0) to mempool.activity
  echo "0" >>"${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1
fi
sleep 4.20
done
EOF
  fi

  # start reading mempool
  screen -S read_mempool -X -p 0 stuff $'bash '"${LOG_DIR:?}"'/read_mempool\n'
fi

# reset mempool after n lines
if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | awk '{ print $1 }' 2>&1)" -gt "6720" ]] &>/dev/null; then
  # keep log at n lines
  echo "$(tail -2520 "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1
fi

### wallet information #########################################################

# getinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo 2>&1

if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/client/tmp/version ]] &>/dev/null; then
  # wallet version
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" -version 2>&1 | egrep -o "v[0-9]+.[0-9]+.[0-9]+.[0-9]+" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/version 2>&1
fi

# getblockchaininfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getblockchaininfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getblockchaininfo 2>&1
# getmempoolinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmempoolinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo 2>&1
# getwalletinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getwalletinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getwalletinfo 2>&1
# listunspent
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" listunspent 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/listunspent 2>&1
# getpeerinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpeerinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getpeerinfo 2>&1
# listbanned
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" listbanned 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/listbanned 2>&1

# getmasternodecount
if [[ ! "$(grep "1" "${LOG_DIR:?}"/node_data/wallet/client/tmp/overlap 2>&1)" ]] &>/dev/null; then
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmasternodecount 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1
else
  "${WALLET_DIR:?}"/./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpatriotnodecount 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1
fi
# getmasternodecount (getpatriotnodecount)
if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1 | awk '{ print $1 }' 2>&1)" -eq "0" ]] &>/dev/null; then
  # continue doing this
  echo "1" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/overlap
  "${WALLET_DIR:?}"/./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpatriotnodecount 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1
fi
if [[ "$(grep "error" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1)" ]] &>/dev/null; then
  # continue doing this
  echo "1" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/overlap
  "${WALLET_DIR:?}"/./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpatriotnodecount 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1
fi

# masternodestatus
if [[ ! "$(grep "1" "${LOG_DIR:?}"/node_data/wallet/client/tmp/overlap 2>&1)" ]] &>/dev/null; then
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmasternodestatus >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus 2>/dev/null
fi
# masternodestatus (getpatriotnodestatus)
if [[ "$(grep "error" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus 2>&1)" ]] &>/dev/null; then
  # continue doing this
  echo "1" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/overlap
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpatriotnodestatus >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus 2>/dev/null
fi
if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus 2>&1 | awk '{ print $1 }' 2>&1)" -eq "0" ]] &>/dev/null; then
  # continue doing this
  echo "1" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/overlap
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpatriotnodestatus >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus 2>/dev/null
fi

# make sure data exist
if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo &>/dev/null; then

  rm -R "${LOG_DIR:?}"/node_data/wallet/client/tmp/* &>/dev/null

else # use existing data without any errors
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo "${LOG_DIR:?}"/node_data/wallet/client/getinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/version "${LOG_DIR:?}"/node_data/wallet/client/version &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getblockchaininfo "${LOG_DIR:?}"/node_data/wallet/client/getblockchaininfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo "${LOG_DIR:?}"/node_data/wallet/client/getmempoolinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getwalletinfo "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/listunspent "${LOG_DIR:?}"/node_data/wallet/client/listunspent &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getpeerinfo "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/listbanned "${LOG_DIR:?}"/node_data/wallet/client/listbanned &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus "${LOG_DIR:?}"/node_data/wallet/client/getmasternodestatus &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount &>/dev/null
fi

# get average difficulty value with auto pos config
grep "difficulty" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | awk '{ print $2 }' >>"${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>&1

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>&1 | awk '{ print $1 }' 2>&1)" -gt "720" ]] &>/dev/null; then
  echo "$(tail -180 "${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>&1
fi

echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>/dev/null | tail -100 2>&1 | grep -v "error" 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)/$(cat "${LOG_DIR:?}"/node_data/wallet/data/difficulty 2>/dev/null | tail -100 2>&1 | grep -v "error" 2>&1 | wc -l 2>&1)" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/difficulty_avg 2>&1

### dashbord variables #########################################################

### top ###

REPO_VERSION="${N0:?}${VERSION:?}${GR:?}"

DATE_VALUE="$(cat "${LOG_DIR:?}"/node_data/system/clock 2>/dev/null | awk '{ print $1 }')"
CLOCK_VALUE="$(cat "${LOG_DIR:?}"/node_data/system/clock 2>/dev/null | awk '{ print $2 }')"

SYSTEM_CLOCK="${GR:?}$DATE_VALUE${N0:?} $CLOCK_VALUE"

if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  if [[ "$(grep -c "successfully started" "${DATA_DIR:?}"/masternode_status 2>&1)" -gt "0" ]] &>/dev/null; then
    MASTER_STATUS="${CY:?}M${N0:?}"
  else
    MASTER_STATUS="${GR:?}M${N0:?}"
  fi

  if [[ -z "$MASTER_STATUS" ]] &>/dev/null; then
    MASTER_STATUS="${GR:?}M${N0:?}"
  fi
else
  MASTER_STATUS="${GR:?}M${N0:?}"
fi

# calculate staking percentage
PROOF_STATUS=$(echo "100/${WALLET_ACTIVE:?}*$(echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ SUM += $2} END { print SUM }' 2>&1)/$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | wc -l 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)

if [[ -z "$PROOF_STATUS" ]] &>/dev/null; then
  PROOF_STATUS="0"
fi

if [[ "$PROOF_STATUS" -gt "99" ]] &>/dev/null; then
  PROOF_STATUS="${G0:?}OK${N0:?}"
else
  if [[ "$PROOF_STATUS" -lt "10" ]] &>/dev/null; then
    PROOF_STATUS="${GR:?}${PROOF_STATUS:?}%${N0:?}"
  else
    PROOF_STATUS="${GR:?}${PROOF_STATUS:?}${N0:?}"
  fi
  if [[ "$PROOF_STATUS" -eq "0" ]] &>/dev/null; then
    PROOF_STATUS="${GR:?}0%${N0:?}"
  fi
  if [[ -z "$PROOF_STATUS" ]] &>/dev/null; then
    PROOF_STATUS="${GR:?}0%${N0:?}"
  fi
fi

if [[ "$(grep "$(cat "${DATA_DIR:?}"/masternode_collateral 2>/dev/null)" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | egrep -v "txid|scriptPubKey|confirmations|address" 2>&1)" ]] &>/dev/null; then
  echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk '{ printf "%.0f\n", $1 }')-$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_confirmations 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/total_confirmations 2>&1
else
  grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/total_confirmations 2>&1
fi

THEME_STATUS="${GR:?}D${N0:?}"

if [[ -z "$THEME_STATUS" ]] &>/dev/null; then
  THEME_STATUS="${GR:?}0${N0:?}"
fi

if [[ "$(grep "Staking Active" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1)" ]] &>/dev/null; then
  PROOF_OF_STAKE="1"
  POS_STATUS="${G1:?}S${N0:?}"
else
  PROOF_OF_STAKE="0"
  POS_STATUS="${GR:?}S${N0:?}"
fi

if [[ -z "$POS_STATUS" ]] &>/dev/null; then
  POS_STATUS="${GR:?}S${N0:?}"
fi

if egrep "proxy: [0-9]+.[0-9]+.[0-9]+.[0-9]+:9050" "${LOG_DIR:?}"/node_data/wallet/client/getinfo &>/dev/null; then
  TOR_STATUS="${P1:?}P${N0:?}"
else
  TOR_STATUS="${GR:?}P${N0:?}"
fi

if [[ -z "$TOR_STATUS" ]] &>/dev/null; then
  TOR_STATUS="${GR:?}P${N0:?}"
fi

LAN_STATUS="$(cat "${LOG_DIR:?}"/node_data/system/interface 2>/dev/null)"
LAN_STATUS="${CY:?}${LAN_STATUS:0:4}${N0:?}"
if [[ ! "$(egrep "[a-z]" "${LOG_DIR:?}"/node_data/system/interface 2>&1)" ]] &>/dev/null; then
  LAN_STATUS="${GR:?}NET${N0:?}"
fi

### system #####################################################################

SYSTEM_LOAD="$(cat "${LOG_DIR:?}"/node_data/system/load 2>/dev/null | egrep -o "[0-9]+.[0-9]+" 2>&1 | xargs 2>&1)"
CPU_CTEMP="$(cat "${LOG_DIR:?}"/node_data/system/cpu_ctemp 2>/dev/null)"
CPU_FTEMP="$(cat "${LOG_DIR:?}"/node_data/system/cpu_ftemp 2>/dev/null)"
FREE_MEM="${G1:?}$(echo "$(cat "${LOG_DIR:?}"/node_data/system/mem_free 2>/dev/null)+$(cat "${LOG_DIR:?}"/node_data/system/swap_free 2>/dev/null)" | bc)${N0:?}"
TOTAL_MEM="${G0:?}$(echo "$(cat "${LOG_DIR:?}"/node_data/system/mem_total 2>/dev/null)+$(cat "${LOG_DIR:?}"/node_data/system/swap_total 2>/dev/null)" | bc)${N0:?}"
USED_HDD="${G1:?}$(cat "${LOG_DIR:?}"/node_data/system/hd_used 2>/dev/null)${N0:?}"
USED_HDD_P="$(cat "${LOG_DIR:?}"/node_data/system/hd_used_percentage 2>/dev/null)"
SYSTEM_USER="$(cat "${LOG_DIR:?}"/node_data/system/user 2>/dev/null)"
IP_ADDRESS="${CY:?}$(cat "${LOG_DIR:?}"/node_data/system/ip_address 2>/dev/null)${N0:?}"
IP_ADDRESS_NR="$(cat "${LOG_DIR:?}"/node_data/system/ip_address 2>/dev/null)"
DOWNLOAD=$(numfmt --to iec --format "%8.3f" "${DOWNLOAD:?}" 2>&1 | xargs 2>/dev/null)
UPLOAD=$(numfmt --to iec --format "%8.3f" "${UPLOAD:?}" 2>&1 | xargs 2>/dev/null)

# if zero
if [[ -z "$CPU_FTEMP" ]] &>/dev/null; then
  CPU_FTEMP="?"
fi

# if zero
if [[ -z "$SYSTEM_USER" ]] &>/dev/null; then
  SYSTEM_USER="unknown"
fi

### wallet #####################################################################

WALLET_DAEMON="${WALLET_DAEMON:?}"

WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/wallet/client/version 2>/dev/null)

if [[ -z "$WALLET_DAEMON" ]] &>/dev/null; then
  WALLET_DAEMON="${GR:?}daemon${N0:?}"
fi
if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
  WALLET_VERSION="${GR:?}loading${N0:?}"
fi

if ! "$(grep "main" "${LOG_DIR:?}"/node_data/wallet/client/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
  WALLET_CHAIN="${G0:?}mainnet${N0:?}"
else
  WALLET_CHAIN="${C1:?}testnet${N0:?}"
fi

if [[ -z "$WALLET_CHAIN" ]] &>/dev/null; then
  WALLET_CHAIN="${GR:?}...${N0:?}"
fi

### public ip address ##########################################################

if [[ ! -f "${DATA_DIR:?}"/getwan ]] &>/dev/null; then
  touch "${DATA_DIR:?}"/getwan &>/dev/null
  GET_WAN_TIME="0"
  sleep 0.5
elif [[ ! -s "${DATA_DIR:?}"/getwan ]] &>/dev/null; then
  truncate -s 0 "${DATA_DIR:?}"/getwan &>/dev/null
  GET_WAN_TIME="0"
  sleep 0.5
else
  GET_WAN_TIME="86400"
fi

if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/getwan)))")" -gt "$GET_WAN_TIME" ]] &>/dev/null; then
  host myip.opendns.com resolver1.opendns.com | grep "myip" | awk '{ print $NF }' >"${DATA_DIR:?}"/getwan 2>&1
fi

if [[ -z "$PUBLIC_IP" ]] &>/dev/null; then
  PUBLIC_IP="${GR:?}...${N0:?}"
fi

### wallet peers, connections ##################################################

if [[ -z "$(cat "${LOG_DIR:?}"/node_data/wallet/client/latest 2>/dev/null)" ]] &>/dev/null; then
  curl -s -L "${WALLET_RELEASE:?}" 2>&1 | html2text 2>&1 | egrep -A1 "Releases" 2>&1 | tail -1 2>&1 | awk '{ print $2 }' >"${LOG_DIR:?}"/node_data/wallet/client/latest 2>&1
fi

# get peers w latest version
WALLET_PEERS_LATEST=$(grep ":$(cat "${LOG_DIR:?}"/node_data/wallet/client/latest | grep -Po "[0-9]+\.[0-9]+\.[0-9]+")" "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo 2>&1 | wc -l)

if [[ -z "$WALLET_PEERS_LATEST" ]] &>/dev/null; then
  WALLET_PEERS_LATEST="$(cat "${LOG_DIR:?}"/node_data/wallet/client/version 2>/dev/null | grep -Po "[0-9]+\.[0-9]+\.[0-9]+.[0-9]+" 2>&1)"
fi

# get peers w other version than latest
WALLET_PEERS_OTHER=$(echo "$(cat "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | grep "connections" 2>&1 | awk '{ print $2 }' 2>&1)-${WALLET_PEERS_LATEST:?}" 2>&1 | bc 2>&1)
# calculate total peers
WALLET_PEERS_TOTAL=$(echo "${WALLET_PEERS_LATEST:?}+${WALLET_PEERS_OTHER:?}" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
# get clean value
WALLET_PEERS_TOTAL_NR="${WALLET_PEERS_TOTAL:?}"

# colorize
WALLET_PEERS_TOTAL="${P1:?}$WALLET_PEERS_TOTAL${N0:?}"
WALLET_PEERS_LATEST="${G1:?}$WALLET_PEERS_LATEST${N0:?}"
WALLET_PEERS_OTHER="${G0:?}$(echo "${WALLET_PEERS_OTHER:?}" 2>&1 | tr -d '-' 2>&1)${N0:?}"

# count banned peers
grep -c "address" "${LOG_DIR:?}"/node_data/wallet/client/listbanned >"${LOG_DIR:?}"/node_data/wallet/data/banlist 2>&1

if [[ -z "$WALLET_PEERS_TOTAL" ]] &>/dev/null; then
  WALLET_PEERS_TOTAL="${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_PEERS_LATEST" ]] &>/dev/null; then
  WALLET_PEERS_LATEST="${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_PEERS_OTHER" ]] &>/dev/null; then
  WALLET_PEERS_OTHER="${GR:?}0${N0:?}"
fi

# save connection count in lines
echo "$(grep "connections" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1)" >>"${LOG_DIR:?}"/node_data/wallet/data/connections 2>&1

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/connections 2>&1 | awk '{ print $1 }' 2>&1)" -gt "1440" ]] &>/dev/null; then
  echo "$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/connections 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/connections
fi

### wallet balance, value ######################################################

WALLET_BALANCE=$(grep "balance" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)
WALLET_UNCONFIRMED=$(grep "unconfirmed_balance" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)
WALLET_IMMATURE=$(grep "immature_balance" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)

if [[ -z "$WALLET_BALANCE" ]] &>/dev/null; then
  WALLET_BALANCE="0"
fi
if [[ -z "$WALLET_UNCONFIRMED" ]] &>/dev/null; then
  WALLET_UNCONFIRMED="0"
fi
if [[ -z "$WALLET_IMMATURE" ]] &>/dev/null; then
  WALLET_IMMATURE="0"
fi

# total wallet balance combining unconfirmed_balance, immature_balance and wallet_balance
echo "${WALLET_BALANCE:?}+${WALLET_UNCONFIRMED:?}+${WALLET_IMMATURE:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>&1
WALLET_BALANCES="$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)"

WALLET_POS=$(grep "BitcoinMiner : proof-of-stake block was signed" "${DATA_DIR:?}"/staking 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)
WALLET_INPUTS="$(grep -c "address" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)"

if [[ -z "$WALLET_BALANCES" ]] &>/dev/null; then
  WALLET_BALANCES="0"
fi

if [[ "$PROOF_OF_STAKE" -eq "1" ]] &>/dev/null; then
  WALLET_BALANCES="${G1:?}$WALLET_BALANCES${N0:?}"
  WALLET_POS="${G1:?}$WALLET_POS${N0:?}"
  WALLET_INPUTS="${G1:?}$WALLET_INPUTS${N0:?}"
fi

# get wallet value
WALLET_VALUE=$(echo "$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/price 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)*$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1 | tail -1 2>&1)
# save wallet values
echo "${WALLET_VALUE:?}" >>"${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1
# calculate average wallet value
echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1 | awk '{ print $1 }' 2>&1 | awk -F. '{ print $1 }' 2>&1)" 2>&1 | bc -l 2>&1 >"${LOG_DIR:?}"/node_data/wallet/data/balance_value 2>&1
# keep average
cat "${LOG_DIR:?}"/node_data/wallet/data/balance_value >>"${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1
echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>/dev/null | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }')" >"${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1 | awk '{ print $1 }' 2>&1)" -gt "420" ]] &>/dev/null; then
  echo "$(tail -180 "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance | awk -F. '{ print $1 }')" -eq "0" ]] &>/dev/null; then
  echo "0" >"${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1
fi

### wallet stakes, inputs, masternode, tx ######################################

WALLET_POS_REWARDS="Stakes ${WALLET_POS:?}"
WALLET_INPUTS_NODES="Inputs ${WALLET_INPUTS:?}"

if [[ "$(grep -c "successfully started" "${DATA_DIR:?}"/masternode_status 2>&1)" -gt "0" ]] &>/dev/null; then
  WALLET_REW="$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount 2>/dev/null)"
  WALLET_MAS_OUTPUT="$(grep -c "successfully started" "${DATA_DIR:?}"/masternode_status 2>&1)"

  if [[ -z "$WALLET_REW" ]] &>/dev/null; then
    WALLET_REW="0"
  fi

  WALLET_POS_REWARDS="PoS/R ${WALLET_POS:?} ${CY:?}${WALLET_REW:?}${N0:?}"
  WALLET_INPUTS_NODES="I/MN ${WALLET_INPUTS:?} ${CY:?}${WALLET_MAS_OUTPUT:?}${N0:?}"
fi

if [[ -z "$WALLET_POS_REWARDS" ]] &>/dev/null; then
  WALLET_POS_REWARDS="Stakes ${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_INPUTS_NODES" ]] &>/dev/null; then
  WALLET_INPUTS_NODES="Inputs ${GR:?}0${N0:?}"
fi

WALLET_TXCOUNT="$(grep "txcount" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)"
WALLET_MEMPOOL="$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/getmempoolinfo 2>&1 | egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)"
WALLET_HEADS="$(grep "blocks" "${LOG_DIR:?}"/node_data/wallet/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)"

if [[ -z "$WALLET_TXCOUNT" ]] &>/dev/null; then
  WALLET_TXCOUNT="${GR:?}0${N0:?}"
fi

if [[ -z "$WALLET_HEADS" ]] &>/dev/null; then
  WALLET_HEADS="${GR:?}0${N0:?}"
fi

if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  LAST_TX=$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1)
  if [[ -z "$LAST_TX" ]] &>/dev/null; then
    LAST_TX="$("${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getbestblockhash 2>/dev/null)"
    if [[ -z "$LAST_TX" ]] &>/dev/null; then
      LAST_TX="$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)"
    fi
  fi
  WALLET_TXLAST=$(cat "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>/dev/null | tr -d ':' 2>&1 | grep -B8 "confirmations ${LAST_TX:?}" 2>&1 | grep "txid" 2>&1 | awk '{ print $2 }' 2>&1 | tail -1 2>&1)
fi

### wallet last log ############################################################

function get_random_quotes_proxy() {
  echo "$(curl -s --proxy socks5h://localhost:9050 https://www.quotedb.com/quote/quote.php?action=random_quote_rss 2>/dev/null | html2text)" >"${LOG_DIR:?}"/node_data/wallet/data/rq 2>/dev/null
}

function get_random_quotes() {
  echo "$(curl -s https://www.quotedb.com/quote/quote.php?action=random_quote_rss 2>/dev/null | html2text)" >"${LOG_DIR:?}"/node_data/wallet/data/rq 2>/dev/null
}

# random start number
QUOTE_RANDOM=$((((RANDOM % 3) + 1)))

if [[ "$QUOTE_RANDOM" -eq "1" ]] &>/dev/null; then

  if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/rq.list ]] &>/dev/null; then
    touch "${LOG_DIR:?}"/node_data/wallet/data/rq.list &>/dev/null
  fi

  if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/rq ]] &>/dev/null; then
    touch "${LOG_DIR:?}"/node_data/wallet/data/rq &>/dev/null
  fi

  # seconds since last edit
  RQ_QUOTE_AGE="$(stat -c '%Y' "${LOG_DIR:?}"/node_data/wallet/data/rq 2>/dev/null | while read lastedit; do echo "$(($(date +%s) - $lastedit))"; done)"
  # count number
  RQ_QUOTE_LIST="$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/rq.list | awk '{ print $1 }')"

  # older than n seconds, continue with proxy
  if [[ "$RQ_QUOTE_AGE" -gt "3600" ]] &>/dev/null; then
    get_random_quotes_proxy
  fi

  # list less than n, continue with proxy
  if [[ "$RQ_QUOTE_LIST" -lt "10" ]] &>/dev/null; then
    get_random_quotes_proxy
  fi

  # if no data, continue without proxy
  if [[ "$(grep "Enable JavaScript and cookies to continue" "${LOG_DIR:?}"/node_data/wallet/data/rq | wc -l)" -eq "1" ]]; then
    get_random_quotes
  fi

  if [[ "$(egrep -c "authors" "${LOG_DIR:?}"/node_data/wallet/data/rq 2>/dev/null)" -gt "0" ]] &>/dev/null; then

    # get quote data
    RQ_QUOTE="$(cat "${LOG_DIR:?}"/node_data/wallet/data/rq 2>/dev/null | grep -A10 "logo" | egrep -v "logo|authors" | tr -d '"' | xargs 2>/dev/null)"
    RQ_AUTHOR="$(cat "${LOG_DIR:?}"/node_data/wallet/data/rq 2>/dev/null | egrep -o "authors/[a-z]+-[a-z]+-[a-z]+|authors/[a-z]+-[a-z]+|authors/[a-z]+" | egrep -o "/[a-z]+-[a-z]+-[a-z]+|/[a-z]+-[a-z]+|/[a-z]+" | tr -d '/')"

    # something
    if [[ -z "$RQ_QUOTE" ]] &>/dev/null; then
      RQ_QUOTE="Something was said"
    fi
    # by unknown
    if [[ -z "$RQ_AUTHOR" ]] &>/dev/null; then
      RQ_AUTHOR="unknown"
    fi

    # output all quotes and authors
    echo "$RQ_QUOTE --${RQ_AUTHOR:?}" >>"${LOG_DIR:?}"/node_data/wallet/data/rq.list
    # remove lines less than n, bigger than n, duplicates, lines with unknown, lines without a dot, lines starting with a dot, sort
    echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/rq.list 2>/dev/null | sed '/^.\{,23\}$/d' | sed '/^.\{197\}./d' | sed '/^\./d' | awk '!a[$0]++' | grep -E '\.[[:space:]]*--' | egrep -v "Something was said| --unknown|ah" | sed '/\./!d' | sort -n)" >"${LOG_DIR:?}"/node_data/wallet/data/rq.list 2>/dev/null

    # line greater than n, continue
    if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/rq.list 2>/dev/null | awk '{ print $1 }')" -gt "369" ]] &>/dev/null; then
      echo "$(sort -R "${LOG_DIR:?}"/node_data/wallet/data/rq.list 2>/dev/null | tail -123)" >"${LOG_DIR:?}"/node_data/wallet/data/rq.list 2>/dev/null
    fi
  fi
fi

function last_log() {
  LAST_LOG=$(grep -v "Status()" "${WALLET_LOG_DIR:?}"/debug.log 2>/dev/null | tail -n 1 2>&1)
  LOG_SIZE=$(ls -lS --block-size=M "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $5 }' 2>&1 | tr -d 'M' 2>&1)
  LAST_LOG="${N0:?}${LAST_LOG:0:188} log=${LOG_SIZE:?}M${N0:?}"
}

function last_log_rq() {
  LAST_LOG="$(sort -R "${LOG_DIR:?}"/node_data/wallet/data/rq.list 2>/dev/null | head -1)"
  LAST_LOG="${N0:?}${LAST_LOG:0:197}${N0:?}"
}

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/rq.list | awk '{ print $1 }')" -gt "1" ]] &>/dev/null; then
  # random start number
  LAST_LOG_RANDOM=$((((RANDOM % 2) + 1)))

  if [[ "$LAST_LOG_RANDOM" -eq "1" ]] &>/dev/null; then
    last_log_rq
  else
    last_log
  fi

else
  last_log
fi

### wallet boot/sync progress ##################################################

if [[ ! "$(grep "OK" "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing)" ]] &>/dev/null; then
  if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/synced 2>/dev/null | grep "progress=1.00" 2>&1)" ]] &>/dev/null; then
    if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
      echo "OK" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>&1
    fi
    WALLET_SYNC="${G1:?}$(cat "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>/dev/null)${N0:?}"
  else
    WALLET_SYNC="${G0:?}$(cat "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>/dev/null)%${N0:?}"
  fi
else
  WALLET_SYNC="${G1:?}$(cat "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>/dev/null)${N0:?}"
fi

if [[ -z "$WALLET_SYNC" ]] &>/dev/null; then
  WALLET_SYNC="${GR:?}loading${N0:?}"
fi

if [[ "$(echo "${DAEMON_UPTIME:?}" 2>&1)" -lt "120" ]] &>/dev/null; then
  WALLET_TXLAST="${N0:?}       Loading${N0:?}"
  if [[ "$(grep "blocks:" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>/dev/null | awk '{ print $2 }' | tr -d ':')" -eq "0" ]] &>/dev/null; then
    WALLET_TXLAST="${GR:?}       Loading${N0:?}"
  fi
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>/dev/null | grep -c "Staking Active")" -eq "0" || "$(grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -c "progress=1.00")" -eq "0" ]] &>/dev/null; then
  source /usr/local/bin/include/pinode/proc 2>&1
  if [[ -z "$SYNC_PROGRESS_BAR" ]] &>/dev/null; then
    SYNC_PROGRESS_BAR="${CY:?}       Loading${N0:?}"
    grep "progress=1.000000" "${WALLET_LOG_DIR:?}"/debug.log | tail -1 >"${LOG_DIR:?}"/node_data/wallet/synced 2>&1
  fi
  WALLET_TXLAST="${G0:?}${SYNC_PROGRESS_BAR:?}${N0:?}"
fi

if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>/dev/null | grep -c "Staking Active")" -eq "1" ]] &>/dev/null; then
  echo "progress=1.00" >"${LOG_DIR:?}"/node_data/wallet/synced 2>&1
fi

### theme ######################################################################

RC="${GR:?}"
CB="${GR:?}"
TX="${GR:?}"

### masternode pay #############################################################

if [[ "$(grep "version" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo)" ]] &>/dev/null; then

  if [[ -f "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount ]] &>/dev/null; then
    # get wallet masternodes total, stable, enabled, inqueue
    WALLET_NODES_TOTAL=$(grep "total" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
    WALLET_NODES_STABLE=$(grep "stable" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
    WALLET_NODES_ENABLED=$(grep "enabled" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
    WALLET_NODES_INQUEUE=$(grep "inqueue" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | awk '{ print $2 }' 2>&1)
  fi

  if [[ -z "$WALLET_NODES_TOTAL" ]] &>/dev/null; then
    WALLET_NODES_TOTAL="0"
  fi
  if [[ -z "$WALLET_NODES_STABLE" ]] &>/dev/null; then
    WALLET_NODES_STABLE="0"
  fi
  if [[ -z "$WALLET_NODES_ENABLED" ]] &>/dev/null; then
    WALLET_NODES_ENABLED="0"
  fi
  if [[ -z "$WALLET_NODES_INQUEUE" ]] &>/dev/null; then
    WALLET_NODES_INQUEUE="0"
  fi

  if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount || "$(grep "0.00" "${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount 2>&1)" || "$(echo "$(($(date +%s) - $(date +%s -r "${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount 2>/dev/null)))")" -gt "60" ]] &>/dev/null; then
    # get masternode reward count, ruled by the masternode count
    WALLET_REWARD_COUNT=$(echo "${POS_LIMIT:?}/${WALLET_NODES_INQUEUE:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    # save pay count
    echo "${WALLET_REWARD_COUNT:?}" >"${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount 2>&1
  fi

  if [[ -z "$WALLET_REWARD_COUNT" ]] &>/dev/null; then
    WALLET_REWARD_COUNT="0"
  fi

  # calculate average masternode payout with pn|mn input amounts
  echo "$(egrep -A3 "MN|PN" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | grep "amount" 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)/$(egrep -A3 "MN|PN" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | grep "amount" 2>&1 | wc -l 2>&1)" 2>&1 | bc -l 2>&1 | grep -v "syntax" 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payment 2>&1

  # if above is not working, calculate average masternode payout with node payment value from debug.log
  if [[ ! -s "${LOG_DIR:?}"/node_data/wallet/data/masternode_payment ]] &>/dev/null; then
    echo "$(grep "node payment value" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $7 }' 2>&1 | tr -d '()' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)/$(grep "node payment value" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | wc -l 2>&1)" | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payment 2>&1
  else
    touch "${LOG_DIR:?}"/node_data/wallet/data/masternode_payment &>/dev/null
  fi

  # calculate, payout
  echo "${WALLET_REWARD_COUNT:?}*$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_payment 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payout 2>&1
  # calculate, value
  echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_payout)*$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/price 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payvalue 2>&1
fi

### last wallet tx #############################################################

grep "AddToWallet" "${WALLET_LOG_DIR:?}"/debug.log >>"${LOG_DIR:?}"/node_data/wallet/data/last_tx
echo "$(tail -10 "${LOG_DIR:?}"/node_data/wallet/data/last_tx 2>&1 | awk '!a[$0]++' 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/last_tx 2>&1

### staking ####################################################################

if [[ -z "$WALLET_POS" ]] &>/dev/null; then
  WALLET_POS="0"
fi

if [ ! -f "${DATA_DIR:?}"/staking ] &>/dev/null; then
  touch "${DATA_DIR:?}"/staking &>/dev/null
fi

if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/staking ]] &>/dev/null; then
  touch "${LOG_DIR:?}"/node_data/wallet/data/staking &>/dev/null
fi

# get wallet proof-of-stake
WALLET_POS=$(grep "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)
# count saved lines
SAVED_POS=$(grep -c "BitcoinMiner" "${DATA_DIR:?}"/staking 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

if [[ "$WALLET_POS" -gt "$SAVED_POS" ]] &>/dev/null; then
  grep "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' >"${DATA_DIR:?}"/staking 2>&1
  printf '%b' "${LOG_DATE:?} Status() Saved - - - -> ${G1:?}${WALLET_POS:?}${GR:?} :: ${N0:?}Proof-of-Stake Data!${GR:?} :: ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/staking 2>&1 | awk '{ print $1 }' 2>&1)" -lt "$(grep -c "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' 2>&1)" ]] &>/dev/null; then
  grep "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/wallet/data/staking 2>&1
fi

### proof of stake indicator ###################################################

if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/staking)))")" -lt "5460" ]] &>/dev/null; then
    WALLET_TXLAST="${G1:?}$(tail -1 "${DATA_DIR:?}"/staking 2>/dev/null | awk '{ print $8 }' 2>/dev/null)${N0:?}"
    CB="${G1:?}"
    CBS_IND="1"
  else
    CBS_IND="4"
  fi
fi

# clean up staking
if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/staking)))")" -lt "1" ]] &>/dev/null; then
  cat "${DATA_DIR:?}"/staking 2>&1 | grep -v "update" >"${DATA_DIR:?}"/staking.tmp 2>&1
  mv "${DATA_DIR:?}"/staking.tmp "${DATA_DIR:?}"/staking &>/dev/null
fi

### update indicator (activity) ################################################

if [[ "$(tail -100 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "update" 2>&1)" ]] &>/dev/null; then
  tail -100 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "update" 2>&1 | sed -e '/^$/d' >>"${DATA_DIR:?}"/updates 2>&1
  cat "${DATA_DIR:?}"/updates 2>/dev/null | awk '!a[$0]++' 2>&1 | sed -e '/^$/d' >"${DATA_DIR:?}"/updates.tmp 2>&1
  mv "${DATA_DIR:?}"/updates.tmp "${DATA_DIR:?}"/updates &>/dev/null
fi

if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  if [[ "$(egrep -c "[a-z]" "${DATA_DIR:?}"/updates)" -gt "0" ]] &>/dev/null; then
    if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/updates)))")" -lt "600" ]] &>/dev/null; then
      if [[ ! "$(grep "update" "${DATA_DIR:?}"/updates 2>&1)" ]] &>/dev/null; then
        # getbestblockhash
        WALLET_TXLAST="$("${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getbestblockhash 2>/dev/null)"
        if [[ -z "$WALLET_TXLAST" ]] &>/dev/null; then
          WALLET_TXLAST="$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)"
        fi
      else
        WALLET_TXLAST="${Y1:?}$(tail -1 "${DATA_DIR:?}"/updates 2>/dev/null | awk '{ print $3 }' 2>&1)${N0:?}"
      fi
      CB="${Y1:?}"
      TX="${Y1:?}"
    fi
  fi

  if [[ "$(egrep -c "[a-z]" "${DATA_DIR:?}"/staking)" -eq "0" ]] &>/dev/null; then
    WALLET_TXLAST=$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/last_tx 2>&1 | awk '{ print $3 }' 2>&1)
  fi

  if [[ -z "$WALLET_TXLAST" ]] &>/dev/null; then
    WALLET_TXLAST="$("${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getbestblockhash 2>/dev/null)"
    if [[ -z "$WALLET_TXLAST" ]] &>/dev/null; then
      WALLET_TXLAST="${GR:?}$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)${N0:?}"
    fi
  fi

  if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
    WALLET_MEMPOOL="$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/getmempoolinfo 2>&1 | egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)"
  fi
fi

if [[ -z "$WALLET_MEMPOOL" ]] &>/dev/null; then
  WALLET_MEMPOOL="${GR:?}0${N0:?}"
fi

### wallet starting ############################################################

function dashbord_grey() {
  RC="${GR:?}"
  CB="${GR:?}"
  TX="${GR:?}"
}

if ! grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  dashbord_grey
fi

### wallet daily reset #########################################################

if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/staking)))")" -lt "5460" ]] &>/dev/null; then
  # empty file
  if [[ "$(wc -l "${DATA_DIR:?}"/staking 2>&1 | awk '{ print $1 }' 2>&1)" -eq "0" ]] &>/dev/null; then
    CB="${C1:?}"
    TX="${C1:?}"
  fi
fi

### rrdtool graphs #############################################################

if [[ "$GRAPH_STATS" -eq "1" ]] &>/dev/null; then
  source /usr/local/bin/include/pinode/stats
fi

### api, arp, addnodes data ####################################################

if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then
  # kill old session
  screen -X -S run_data quit &>/dev/null
  # create screen session
  screen -dmS run_data &>/dev/null
  # 60s 90s 120s 240s 300s 600s, 900s, 1800s = 30 minutes
  timeout 1800 screen -S run_data -X -p 0 stuff $'bash /usr/local/bin/include/pinode/data\n'
fi

# make sure everyone is connected ##############################################

if [[ "$WALLET_PEERS_TOTAL_NR" -lt "$(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then
  cat "${DATA_DIR:?}"/addnodes 2>/dev/null | egrep -v "${IP_ADDRESS_NR:?}|127.|::1|::128|::" >>"${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1
fi

### keep proxy (onion) around ##################################################

if [[ ! -s "${DATA_DIR:?}"/onion_addnodes ]] &>/dev/null; then
  # create proxy (onion) list
  grep "addr:" /tmp/node_data/wallet/client/getpeerinfo 2>&1 | egrep "*.onion" 2>&1 | awk -F: '{ print $2 }' 2>&1 | tr -d ' ' >"${DATA_DIR:?}"/onion_addnodes 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script Creating proxy (onion) list! $(wc -l "${DATA_DIR:?}"/onion_addnodes 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

# include missing proxy (onion) address
cat "${DATA_DIR:?}"/onion_addnodes 2>/dev/null | grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/success >>"${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1

### create list of connected peers #############################################

if [ ! -f "${DATA_DIR:?}"/addnodes ] &>/dev/null; then
  # make sure addnodes file exist
  touch "${DATA_DIR:?}"/addnodes &>/dev/null
fi

if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then

  # add addnodes backup if backup is greater
  if [[ "$(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" -gt "$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    # note: don't overwrite this (peers.tmp) created by data
    cat "${DATA_DIR:?}"/addnodes 2>/dev/null | awk '!a[$0]++' >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp 2>&1
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Adding backup peers! $(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # disregard failed peers (failed list)
    grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/failed "${DATA_DIR:?}"/addnodes >"${DATA_DIR:?}"/addnodes.tmp 2>&1
    mv "${DATA_DIR:?}"/addnodes.tmp "${DATA_DIR:?}"/addnodes 2>&1
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Cleaning up list after adding! $(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi

  # create addnodes backup if backup is less
  if [[ "$(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" -lt "$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    cp "${LOG_DIR:?}"/node_data/wallet/peers/success "${DATA_DIR:?}"/addnodes &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Creating addnodes backup! $(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}<<${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # disregard failed peers (failed list)
    grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/failed "${DATA_DIR:?}"/addnodes >"${DATA_DIR:?}"/addnodes.tmp 2>&1
    mv "${DATA_DIR:?}"/addnodes.tmp "${DATA_DIR:?}"/addnodes 2>&1
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Cleaning up list after backup! $(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### addnodes script ############################################################

cat >"${LOG_DIR:?}"/add_peers <<'EOF'
#!/bin/bash

# By Rainman
# V20221506
# 0.0.5.3

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

IP_ADDRESS_NR="$(cat "${LOG_DIR:?}"/node_data/system/ip_address 2>/dev/null)"

P2P=$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | egrep "[0-9]+" 2>&1 | tail -1 2>&1)
P2P_OLD=$(grep "Starting adding nodes" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | tail -1 2>&1 | egrep -o "P2P [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1)

P2P_PERC=$(echo "100/${P2P:?}*$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | awk '{ print $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)

printf '%b' "${LOG_DATE:?} Status() Addnode.Script Starting adding nodes! +$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | awk '{ print $1 }' 2>&1) P2P ${P2P:?} ${G1:?}>${N0:?} ${GR:?}${P2P_PERC:?}%${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/wallet/data/screens 2>&1

while IFS= read -r ADDS; do
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" addnode "$ADDS" onetry 2>&1
done <"${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | shuf 2>&1 | grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | egrep -v "${IP_ADDRESS_NR:?}|127.|::1|::128|::" 2>&1 | awk '!a[$0]++' 2>&1

P2P=$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | egrep "[0-9]+" 2>&1 | tail -1 2>&1)
FAILED=$(grep " to $(cat "${LOG_DIR:?}"/node_data/wallet/peers/add_peers.check 2>/dev/null) failed" "$WALLET_LOG_DIR"/debug.log 2>&1 | egrep -o " to .*. failed" 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)

P2P_NEW=$(grep "Stopping adding nodes" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | tail -1 2>&1 | egrep -o "P2P [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1)
P2P_CHANGE=$(echo "$P2P_NEW-$P2P_OLD" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)" -gt "360" ]] &>/dev/null; then
  if [[ "$P2P_CHANGE" -gt "0" ]] &>/dev/null; then
    P2PC="${G1:?}+"
  else
    P2PC="${R1:?}"
  fi
  if [[ "$P2P_CHANGE" -eq "0" ]] &>/dev/null; then
    P2PC="${GR:?}"
  fi
  if [[ -z "$P2P_CHANGE" ]] &>/dev/null; then
    P2PC="${GR:?}"
  fi
fi

printf '%b' "${LOG_DATE:?} Status() Addnode.Script Stopping adding nodes! ${GR:?}-$FAILED${N0:?} P2P ${P2P:?} ${GR:?}<${N0:?} ${P2PC:?}${P2P_CHANGE:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

screen -X quit &>/dev/null
LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/wallet/data/screens 2>&1
exit
EOF

### coingecko price, volume ####################################################

if [[ ! -f "${LOG_DIR:?}"/node_data/requests.cg ]] &>/dev/null; then
  touch "${LOG_DIR:?}"/node_data/requests.cg &>/dev/null
fi

cat >"${LOG_DIR:?}"/add_cg <<'EOF'
#!/bin/bash

# By Rainman
# V20221103
# 0.0.3.3

source /usr/local/bin/include/pinode/pinode.conf
source /usr/local/bin/include/pinode/color

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Fetching CoinGecko API data!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# remove requests
truncate -s 0 "${LOG_DIR:?}"/node_data/requests.cg

for (( ; ; )); do # loop until success

  clear
  torify curl -o "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko -X 'GET' 'https://api.coingecko.com/api/v3/coins/'${COING_API:?}'' -H 'accept:application/json' &>/dev/null

  sleep 2
  echo "fail" >>"${LOG_DIR:?}"/node_data/requests.cg 2>&1

  if egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko &>/dev/null; then
    echo "success" >>"${LOG_DIR:?}"/node_data/requests.cg 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() ${G1:?}Success!${N0:?} Found API Data! After ${CY:?}$(wc -l "${LOG_DIR:?}"/node_data/requests.cg 2>&1 | awk '{ print $1 }' 2>&1)${N0:?} requests\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    killall curl &>/dev/null
    exit
  fi

done
EOF

### coinmarketcap price, volume, rank, watchlist ###############################

if [[ ! -f "${LOG_DIR:?}"/node_data/requests.cmc ]] &>/dev/null; then
  touch "${LOG_DIR:?}"/node_data/requests.cmc &>/dev/null
fi

cat >"${LOG_DIR:?}"/add_cmc <<'EOF'
#!/bin/bash

# By Rainman
# V20221103
# 0.0.3.4

source /usr/local/bin/include/pinode/pinode.conf
source /usr/local/bin/include/pinode/color

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Fetching CoinMarketCap API data!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# remove requests
truncate -s 0 "${LOG_DIR:?}"/node_data/requests.cmc

for (( ; ; )); do # loop until success

  clear
  URL="https://coinmarketcap.com/currencies/${COINM_API:?}/"
  torify curl -s -L "$URL" 2>&1 | html2text >"${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap 2>&1

  sleep 2
  echo "fail" >>"${LOG_DIR:?}"/node_data/requests.cmc 2>&1

  if grep "freed" "${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap &>/dev/null; then
    echo "success" >>"${LOG_DIR:?}"/node_data/requests.cmc 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() ${G1:?}Success!${N0:?} Found API Data! After ${CY:?}$(wc -l "${LOG_DIR:?}"/node_data/requests.cmc 2>&1 | awk '{ print $1 }' 2>&1)${N0:?} requests\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    killall curl &>/dev/null
    exit
  fi

done
EOF

### peers warden ###############################################################

if [[ ! "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then
  if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/screens 2>/dev/null | grep -c "add_lost_peers" 2>&1)" -eq "1" ]] &>/dev/null; then
    if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/connections ]] &>/dev/null; then

      # connections now
      P2P_NOW="$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | tail -1 2>&1)"

      if [[ -z "$P2P_NOW" || "$P2P_NOW" -eq "0" ]] &>/dev/null; then
        P2P_NOW="0"
      fi

      # connection percentage
      P2P_PERC=$(echo "100/${P2P_NOW:?}*$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | awk '{ print $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      # max connected, w limit calculation
      P2P_LIMIT="$(echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | sort -n 2>&1 | tail -1 2>&1)-$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | sort -n 2>&1 | tail -1 2>&1)*0.20" 2>&1 | bc 2>&1 | awk -F. '{ print $1 }' 2>&1)"

      screen -X -S add_lost_peers quit &>/dev/null

      if [[ "$P2P_NOW" -lt "$P2P_LIMIT" ]] &>/dev/null; then
        # create screen session
        screen -dmS add_lost_peers &>/dev/null
        # 60s 90s 120s 240s 300s 600s, 900s, 1800s = 30 minutes
        timeout 900 screen -S add_lost_peers -X -p 0 stuff $'bash '"${LOG_DIR:?}"'/add_peers\n'
        printf '%b' "${LOG_DATE:?} Status() Addnode.Script Reconnect lost connections! Limit ${GR:?}${P2P_LIMIT:?}${N0:?} Now ${G1:?}${P2P_NOW:?}${Y1:?} ! ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
      fi
    fi
  fi
fi

### personal addnodes ##########################################################

if [ ! -f /home/"${WHOAMI:?}"/addnodes ] &>/dev/null; then
  # make sure personal addnodes exist
  touch /home/"${WHOAMI:?}"/addnodes &>/dev/null
fi

# use personal addnodes if any data
if [[ "$(wc -l /home/"${WHOAMI:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" -gt "0" ]] &>/dev/null; then

  # kill old add_extra_peers session
  screen -X -S add_extra_peers quit &>/dev/null

  # get ipv4 address from addnodes, disregard 127.
  egrep -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)" /home/"${WHOAMI:?}"/addnodes 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/addnodes.ipv4 2>&1

  # get ipv6 address from addnodes
  egrep -o "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))" /home/"${WHOAMI:?}"/addnodes 2>&1 | sed -r '/^.{,9}$/d' | sort -n >"${LOG_DIR:?}"/addnodes.ipv6 2>&1

  # get domain address from addnodes, disregard proxy (onion)
  grep -oiE '([a-zA-Z0-9][a-zA-Z0-9-]{1,61}\.){1,}(\.?[a-zA-Z]{2,}){1,}' /home/"${WHOAMI:?}"/addnodes 2>&1 | sort -n 2>&1 | awk '!a[$0]++' 2>&1 | grep -v ".onion" >"${LOG_DIR:?}"/addnodes.dns 2>&1

  # get onion address from addnodes
  egrep -o ".*.onion" /home/"${WHOAMI:?}"/addnodes 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/addnodes.onion 2>&1

  # add extras, disregard invalid pattern address (cidr - classless inter-domain routing)
  grepcidr -f "${LOG_DIR:?}"/addnodes.ipv4 "${LOG_DIR:?}"/addnodes.ipv4 >"${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>"${LOG_DIR:?}"/node_data/wallet/peers/peers.cidr
  grepcidr -f "${LOG_DIR:?}"/addnodes.ipv6 "${LOG_DIR:?}"/addnodes.ipv6 >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>"${LOG_DIR:?}"/node_data/wallet/peers/peers.cidr

  # add extras domain names
  cat "${LOG_DIR:?}"/addnodes.dns >"${LOG_DIR:?}"/node_data/wallet/peers/peers.x.tmp 2>/dev/null
  cat "${LOG_DIR:?}"/addnodes.onion >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.x.tmp 2>/dev/null
  cat "${LOG_DIR:?}"/node_data/wallet/peers/peers.x.tmp 2>&1 | sort -n 2>&1 | awk '!a[$0]++' 2>&1 | egrep -v "${IP_ADDRESS_NR:?}|127.|::1|::128|::" >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>/dev/null

  printf '%b' "${LOG_DATE:?} Status() Addnode.Script Adding extra nodes\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_IPv4 $(wc -l "${LOG_DIR:?}"/addnodes.ipv4 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_IPv6 $(wc -l "${LOG_DIR:?}"/addnodes.ipv6 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_Tor+ $(wc -l "${LOG_DIR:?}"/addnodes.onion 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_DNS+ $(wc -l "${LOG_DIR:?}"/addnodes.dns 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script | ${G1:?}$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>&1 | awk '{ print $1 }' 2>&1) Total ${CY:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  # truncate/remove files, now old
  truncate -s 0 /home/"${WHOAMI:?}"/addnodes &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.onion &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.ipv4 &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.ipv6 &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.dns &>/dev/null

  printf '%b' "${LOG_DATE:?} Status() Addnode.Script Adding personal $(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | awk '{ print $1 }' 2>&1)+$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>&1 | awk '{ print $1 }' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  # add extras from personal addnodes
  cat "${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>/dev/null | egrep -v "${IP_ADDRESS_NR:?}|127.|::1|::128|::" >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp 2>/dev/null
  # remove duplicates, sort
  cat "${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp 2>/dev/null | awk '!a[$0]++' 2>&1 | sort -n >"${LOG_DIR:?}"/node_data/wallet/peers/peers.clean 2>&1
  mv "${LOG_DIR:?}"/node_data/wallet/peers/peers.clean "${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp &>/dev/null
  # remove file, now old
  rm "${LOG_DIR:?}"/node_data/wallet/peers/peers.x* &>/dev/null

  cp "${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1
  # make sure addnodes is clean of successfully peers, as above as below
  grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/success "${LOG_DIR:?}"/node_data/wallet/peers/add_peers >"${LOG_DIR:?}"/node_data/wallet/peers/add_peers.tmp 2>&1
  mv "${LOG_DIR:?}"/node_data/wallet/peers/add_peers.tmp "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>/dev/null

  # create screen session
  screen -dmS add_extra_peers &>/dev/null
  # 60s 90s 120s 240s 300s 600s, 900s, 1800s = 30 minutes
  timeout 900 screen -S add_extra_peers -X -p 0 stuff $'bash '"${LOG_DIR:?}"'/add_peers\n'
fi

### backup values coingecko ####################################################

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/price.cg ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/price.cg ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/price.cg "${DATA_DIR:?}"/price.cg &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/price.cg ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/price.cg "${LOG_DIR:?}"/node_data/wallet/data/price.cg &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} Price! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/volume.cg ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/volume.cg ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cg "${DATA_DIR:?}"/volume.cg &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/volume.cg ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/volume.cg "${LOG_DIR:?}"/node_data/wallet/data/volume.cg &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} Volume! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# run data with intervals, every n minutes, update api, arp and ticker
if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/price.cg ]] &>/dev/null; then

    # make sure backup is updated
    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/price.cg 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_PRICE_CG=$(egrep "[0-9]+" "${DATA_DIR:?}"/price.cg 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/price.cg "${DATA_DIR:?}"/price.cg &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}$OLD_PRICE_CG${N0:?} Price! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/volume.cg ]] &>/dev/null; then

    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/volume.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_VOLUME_CG=$(egrep "[0-9]+" "${DATA_DIR:?}"/volume.cg 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cg "${DATA_DIR:?}"/volume.cg &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_VOLUME_CG:?}${N0:?} Volume! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

fi

### backup values coinmarketcap ################################################

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/rank.cmc ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc "${DATA_DIR:?}"/rank.cmc &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/rank.cmc ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/rank.cmc "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)${N0:?} Rank! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/price.cmc ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/price.cmc ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/price.cmc "${DATA_DIR:?}"/price.cmc &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/price.cmc ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/price.cmc "${LOG_DIR:?}"/node_data/wallet/data/price.cmc &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} Price! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/volume.cmc ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc "${DATA_DIR:?}"/volume.cmc &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/volume.cmc ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/volume.cmc "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} Volume! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# run data with intervals, every n minutes, update api, arp and ticker
if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/price.cmc ]] &>/dev/null; then

    # make sure backup is updated
    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/price.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_PRICE_CMC=$(egrep "[0-9]+" "${DATA_DIR:?}"/price.cmc 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/price.cmc "${DATA_DIR:?}"/price.cmc &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_PRICE_CMC:?}${N0:?} Price! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc ]] &>/dev/null; then

    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/rank.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_RANK_CMC=$(egrep "[0-9]+" "${DATA_DIR:?}"/rank.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc "${DATA_DIR:?}"/rank.cmc &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_RANK_CMC:?}${N0:?} Rank! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc ]] &>/dev/null; then

    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/volume.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_VOLUME_CMC=$(egrep "[0-9]+" "${DATA_DIR:?}"/volume.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc "${DATA_DIR:?}"/volume.cmc &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_VOLUME_CMC:?}${N0:?} Volume! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
fi

### coinmarketcap data #########################################################

# if success, create files, reset requests.cmc file
if grep "success" "${LOG_DIR:?}"/node_data/requests.cmc &>/dev/null; then

  ##############################################################################

  RAW_COINMCAP="$(cat "${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap)"

  # get token price
  echo "$RAW_COINMCAP" 2>/dev/null | grep "price today" | awk '{ print $7 }' | tr -d '$' >"${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>&1
  # get token volume
  echo "$RAW_COINMCAP" 2>/dev/null | grep -A1 "trading volume" | grep "of " | egrep -o "[0-9]+.[0-9]+" >"${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>&1
  # get token rank
  echo "$RAW_COINMCAP" 2>/dev/null | grep -o "ranking is.*" | egrep -o "[0-9]+" >"${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>&1

  ##############################################################################

  # coinmarketcap api values
  API_PRICE_CMC=$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)
  API_VOLUME_CMC=$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)
  API_RANK_CMC=$(cat "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)

  # if zero
  if [[ -z "$API_PRICE_CMC" ]] &>/dev/null; then
    API_PRICE_CMC="0"
    echo "$API_PRICE_CMC" >"${LOG_DIR:?}"/node_data/wallet/data/price.cmc
    ############################################################################
    # if cg has price data
    if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/price.cg ]] &>/dev/null; then
      # update cmc price data
      echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>/dev/null)" >"${LOG_DIR:?}"/node_data/wallet/data/price.cmc
    fi
    ############################################################################
  fi
  # if zero
  if [[ -z "$API_VOLUME_CMC" ]] &>/dev/null; then
    API_VOLUME_CMC="0"
    echo "$API_VOLUME_CMC" >"${LOG_DIR:?}"/node_data/wallet/data/volume.cmc
    ############################################################################
    # if cg has volume data
    if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/volume.cg ]] &>/dev/null; then
      # update cmc volume data
      echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>/dev/null)" >"${LOG_DIR:?}"/node_data/wallet/data/volume.cmc
    fi
    ############################################################################
  fi
  # if zero
  if [[ -z "$API_RANK_CMC" ]] &>/dev/null; then
    API_RANK_CMC="0"
    echo "$API_RANK_CMC" >"${LOG_DIR:?}"/node_data/wallet/data/rank.cmc
  fi

  # greater than n seconds, continue
  if [[ "$(echo "${DAEMON_UPTIME:?}" 2>&1)" -gt "420" ]] &>/dev/null; then
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Found ${G1:?}${API_PRICE_CMC:?}${N0:?} price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Found ${G1:?}${API_VOLUME_CMC:?}${N0:?} volume!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Found ${G1:?}${API_RANK_CMC:?}${N0:?} rank!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
  screen -X -S add_cmc quit &>/dev/null
  killall curl &>/dev/null
  rm "${LOG_DIR:?}"/node_data/requests* &>/dev/null
fi

### coingecko data #############################################################

# if success, create files, reset requests.cg file
if grep "success" "${LOG_DIR:?}"/node_data/requests.cg &>/dev/null; then

  # convert jq -r raw data
  echo "$(jq -r . "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko)" >"${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko

  ##############################################################################
  # get token watchlist
  grep "watchlist_portfolio_users" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | awk -F, '{ print $1 }' | awk '{ print $2 }' >"${LOG_DIR:?}"/node_data/wallet/data/watchlist.cg 2>&1
  ##############################################################################
  # get token twitter followers
  grep "twitter_followers" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | awk -F, '{ print $1 }' | awk '{ print $2 }' >"${LOG_DIR:?}"/node_data/wallet/data/twitter.cg 2>&1
  ##############################################################################
  # get token telegram user count
  grep "telegram_channel_user_count" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | awk -F, '{ print $1 }' | awk '{ print $2 }' >"${LOG_DIR:?}"/node_data/wallet/data/telegram.cg 2>&1
  ##############################################################################
  # get token price
  grep -A4 "converted_last" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | grep "usd" | awk '{ print $2 }' | awk '{ SUM += $1} END { print SUM }' >"${LOG_DIR:?}"/node_data/wallet/data/price.cg
  # calculate average price
  echo "$(echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg) / $(grep -A4 "converted_last" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | grep -c "usd")" | bc -l 2>/dev/null)" >"${LOG_DIR:?}"/node_data/wallet/data/price.cg
  ##############################################################################
  # get token volume
  grep -A4 "converted_volume" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | grep "usd" | awk '{ print $2 }' | awk '{ SUM += $1} END { print SUM }' >"${LOG_DIR:?}"/node_data/wallet/data/volume.cg
  # calculate average volume
  echo "$(echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg) / $(grep -A4 "converted_volume" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | grep -c "usd")" | bc -l 2>/dev/null)" >"${LOG_DIR:?}"/node_data/wallet/data/volume.cg
  ##############################################################################

  if [[ "$(egrep "Cloudflare|Enable JavaScript and cookies to continue" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko)" ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/price.cg "${LOG_DIR:?}"/node_data/wallet/data/price.cg
    cp "${DATA_DIR:?}"/volume.cg "${LOG_DIR:?}"/node_data/wallet/data/volume.cg
  fi

  # coingecko api values
  API_WATCH_CG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/watchlist.cg 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
  API_TWITTER_CG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/twitter.cg 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
  API_TELEGRAM_CG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/telegram.cg 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
  API_PRICE_CG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)
  API_VOLUME_CG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)

  # if zero
  if [[ -z "$API_PRICE_CG" ]] &>/dev/null; then
    API_PRICE_CG="0"
    echo "$API_PRICE_CG" >"${LOG_DIR:?}"/node_data/wallet/data/price.cg
    ############################################################################
    # if cmc has price data
    if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/price.cmc ]] &>/dev/null; then
      # update cg price data
      echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>/dev/null)" >"${LOG_DIR:?}"/node_data/wallet/data/price.cg
    fi
    ############################################################################
  fi
  # if zero
  if [[ -z "$API_VOLUME_CG" ]] &>/dev/null; then
    API_VOLUME_CG="0"
    echo "$API_VOLUME_CG" >"${LOG_DIR:?}"/node_data/wallet/data/volume.cg
    ############################################################################
    # if cmc has volume data
    if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc ]] &>/dev/null; then
      # update cg volume data
      echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>/dev/null)" >"${LOG_DIR:?}"/node_data/wallet/data/volume.cg
    fi
    ############################################################################
  fi

  # greater than n seconds, continue
  if [[ "$(echo "${DAEMON_UPTIME:?}" 2>&1)" -gt "420" ]] &>/dev/null; then
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Found ${G1:?}${API_WATCH_CG:?}${N0:?} watchlist!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Found ${G1:?}${API_TWITTER_CG:?}${N0:?} twitter!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Found ${G1:?}${API_TELEGRAM_CG:?}${N0:?} telegram!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Found ${G1:?}${API_PRICE_CG:?}${N0:?} price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Found ${G1:?}${API_VOLUME_CG:?}${N0:?} volume!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
  screen -X -S add_cg quit &>/dev/null
  killall curl &>/dev/null
  rm "${LOG_DIR:?}"/node_data/requests* &>/dev/null
fi

################################################################################

# calculate price
echo "$(echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.* 2>/dev/null | awk '{ SUM += $1} END { print SUM }') / $(cat "${LOG_DIR:?}"/node_data/wallet/data/price.* 2>/dev/null | egrep -c "[0-9]+")" | bc -l 2>/dev/null)" >"${LOG_DIR:?}"/node_data/wallet/data/price

### restore failed list ########################################################

if [[ ! -f "${DATA_DIR:?}"/system_ip ]] &>/dev/null; then
  echo "$(cat "${LOG_DIR:?}"/node_data/system/ip_address 2>/dev/null)" 2>&1 | egrep -o "[0-9]+" 2>&1 | head -1 >"${DATA_DIR:?}"/system_ip
fi
SYSTEM_IP=$(cat "${DATA_DIR:?}"/system_ip 2>/dev/null)

if [[ "$(LC_ALL=de_US.utf8 date '+%H%M' 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then

  # keep last n of failed connections, disregard system address, dns
  RANDOM_FAILED=$((((RANDOM % 1440) + 128)))
  echo "$(tail -"${RANDOM_FAILED:?}" "${LOG_DIR:?}"/node_data/wallet/peers/failed 2>&1 | egrep -v "${SYSTEM_IP:?}|[a-z]" 2>&1)" 2>&1 | awk '!a[$0]++' >"${DATA_DIR:?}"/failed 2>&1
fi

if [[ ! "$(grep "Never connected()" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then

  # use old failed list as a continuation to the next day, ruled by -lines above
  if [[ "$(wc -l "${DATA_DIR:?}"/failed 2>&1 | awk '{ print $1 }' 2>&1)" -gt "$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/failed 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then

    # add system ip address to failed list
    echo "${IP_ADDRESS_NR:?}" >>"${DATA_DIR:?}"/failed 2>&1

    # add failed peers (failed.tmp) back in to debug.log
    while IFS= read -r ADDS; do
      echo "${LOG_DATE:?} Status() connect to ${ADDS:?} failed -> Never connected()" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    done <"${DATA_DIR:?}"/failed 2>&1 | awk '!a[$0]++' 2>&1 | sort -n 2>&1 | egrep -v "${SYSTEM_IP:?}|[a-z]" 2>&1

    printf '%b' "${LOG_DATE:?} Status() Clean.Backup() Restoring old failed list, failed.tmp +$(wc -l "${DATA_DIR:?}"/failed 2>&1 | awk '{ print $1 }' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### clean up ###################################################################

if [[ "$(LC_ALL=de_US.utf8 date '+%H%M' 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then

  if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)" -gt "1800" ]] &>/dev/null; then
    if [[ "$KEEP_DEBUG" -eq "1" ]] &>/dev/null; then
      cp "${WALLET_LOG_DIR:?}"/debug.log "${DATA_DIR:?}"/debug.log &>/dev/null
      truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
    else
      truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
    fi
  fi

  if [[ "$KEEP_BACKUPS" -eq "0" ]] &>/dev/null; then
    rm -r "${DATA_DIR:?}"/backups &>/dev/null
  fi

  truncate -s 0 "${DATA_DIR:?}"/staking &>/dev/null
  truncate -s 0 "${DATA_DIR:?}"/updates &>/dev/null
  truncate -s 0 "${DATA_DIR:?}"/getwan &>/dev/null
  truncate -s 0 "${DATA_DIR:?}"/onion_addnodes &>/dev/null
  truncate -s 0 "${LOG_DIR:?}"/node_data/wallet/client/latest &>/dev/null
  echo "$(tail -2520 "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1
fi

### auto update repository #####################################################

if [[ "$(LC_ALL=de_US.utf8 date '+%H%M' 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then
  if [[ "$UPDATE_REPO" -eq "1" ]] &>/dev/null; then
    printf '%b' "${LOG_DATE:?} Status() Auto.Update(!) Fetching new repo commits! ${R1:?}-${G1:?}+${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # update repo, if set
    cd /home/"${WHOAMI:?}"/pi-node || exit && torify git pull -q && bash /usr/local/bin/update 2>&1
  fi
fi

### random quotes or system timeline ###########################################

if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then
  TIMELINE="${GR:?}Getting data.${N0:?}"
else
  source /usr/local/bin/include/pinode/timeline
fi

### hiding balance, ruled by configuration #####################################

if [[ "$HIDE_BALANCE" -eq "1" ]] &>/dev/null; then
  RANDOM_BALANCE=$((((RANDOM % 4) + 1)))
  RANDOM_POS_REWARDS=$((((RANDOM % 2) + 1)))
  RANDOM_INPUTS_NODES=$((((RANDOM % 3) + 1)))
  WALLET_BALANCES="${GR:?}$(tr -dc '1-9' </dev/urandom 2>&1 | head -c "${RANDOM_BALANCE:?}" 2>&1 | rev 2>&1).$(tr -dc '1-9' </dev/urandom 2>&1 | head -c 2 2>&1 | rev 2>&1)${N0:?}"
  WALLET_POS_REWARDS="Stakes ${GR:?}$(tr -dc '1-9' </dev/urandom 2>&1 | head -c "${RANDOM_POS_REWARDS:?}" 2>&1 | rev 2>&1)${N0:?}"
  WALLET_INPUTS_NODES="Inputs ${GR:?}$(tr -dc '1-9' </dev/urandom 2>&1 | head -c "${RANDOM_INPUTS_NODES:?}" 2>&1 | rev 2>&1)${N0:?}"
  if [[ "$(grep -c "successfully started" "${DATA_DIR:?}"/masternode_status 2>&1)" -gt "0" ]] &>/dev/null; then
    WALLET_POS_REWARDS="PoS/R ${GR:?}$(tr -dc '1-9' </dev/urandom 2>&1 | head -c "${RANDOM_POS_REWARDS:?}" 2>&1 | rev 2>&1) $(tr -dc '1-9' </dev/urandom 2>&1 | head -c 1 2>&1 | rev 2>&1)${N0:?}"
    WALLET_INPUTS_NODES="I/MN ${GR:?}$(tr -dc '1-9' </dev/urandom 2>&1 | head -c "${RANDOM_INPUTS_NODES:?}" 2>&1 | rev 2>&1) $(tr -dc '1-9' </dev/urandom 2>&1 | head -c 1 2>&1 | rev 2>&1)${N0:?}"
  fi
fi

### display wan, onion and tor address #########################################

function get_proxy_list() {

  grep "advertising address" "${WALLET_LOG_DIR:?}"/debug.log 2>/dev/null | awk '{ print $NF }' | egrep ".onion|[0-9]+.[0-9]+.[0-9]+.[0-9]+." | awk -F: '{ print $1 }' | awk '!a[$0]++' >>"${DATA_DIR:?}"/getproxy.list 2>/dev/null
  echo "$(tail -5 "${DATA_DIR:?}"/getproxy.list 2>/dev/null | sed '/^$/d' | awk '!a[$0]++')" >"${DATA_DIR:?}"/getproxy.list 2>/dev/null

  # getproxy ###################################################################

  echo "$(cat "${DATA_DIR:?}"/getproxy.list 2>/dev/null | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>/dev/null)" >>"${DATA_DIR:?}"/getproxy 2>/dev/null
  echo "$(tail -5 "${DATA_DIR:?}"/getproxy 2>/dev/null | sed '/^$/d' | awk '!a[$0]++')" >"${DATA_DIR:?}"/getproxy 2>/dev/null

  # getonion ###################################################################

  egrep -o "AdvertiseLocal: .*.onion" "${WALLET_LOG_DIR:?}"/debug.log 2>/dev/null | awk '{ print $NF }' >>"${DATA_DIR:?}"/getonion 2>/dev/null
  echo "$(grep "onion" "${DATA_DIR:?}"/getproxy.list 2>/dev/null)" >>"${DATA_DIR:?}"/getonion 2>/dev/null
  echo "$(tail -5 "${DATA_DIR:?}"/getonion 2>/dev/null | sed '/^$/d' | awk '!a[$0]++')" >"${DATA_DIR:?}"/getonion 2>/dev/null
}

function empty_proxy_random_onion() {
  if [[ -z "$PUBLIC_IP" ]] &>/dev/null; then
    PUBLIC_IP="$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)"
  fi
}

function empty_proxy_empty() {
  if [[ -z "$PUBLIC_IP" ]] &>/dev/null; then
    PUBLIC_IP="${GR:?}...${N0:?}"
  fi
}

RANDOM_WAN=$((((RANDOM % 3) + 1)))

if [[ "$RANDOM_WAN" -eq "1" ]] &>/dev/null; then
  PUBLIC_IP="${C1:?}$(cat "${DATA_DIR:?}"/getwan 2>/dev/null | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | tail -1 2>&1)${N0:?}"

  empty_proxy_empty

elif [[ "$RANDOM_WAN" -eq "2" ]] &>/dev/null; then

  get_proxy_list

  PUBLIC_IP="$(sort -R "${DATA_DIR:?}"/getonion | head -1)"
  empty_proxy_random_onion
  PUBLIC_IP="${P1:?}${PUBLIC_IP:0:9}...onion${N0:?}"

elif [[ "$RANDOM_WAN" -eq "3" ]] &>/dev/null; then

  get_proxy_list

  PUBLIC_IP="$(sort -R "${DATA_DIR:?}"/getproxy | head -1)"
  empty_proxy_empty
  PUBLIC_IP="${P1:?}${PUBLIC_IP:?}${N0:?}"
fi

### hiding wan address, ruled by configuration #################################

if [[ "$HIDE_WAN" -eq "1" ]] &>/dev/null; then
  PUBLIC_IP="$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)"
  PUBLIC_IP="${GR:?}${PUBLIC_IP:0:9}...onion${N0:?}"
fi

# END
