#!/bin/bash

# By Rainman
# V20211212
# 0.4.8.5

# shellcheck disable=SC2034  # Unused variables left for readability

# pitrump configurations
source /home/pi/pitrump.conf
source /usr/local/bin/include/color

# create data directory
mkdir /home/"$(whoami)"/node_data &>/dev/null

# script version
VERSION="v0.4.8.5"

### system information #########################################################

# log lines (tail debug)
LAST_LOG=$(tail -n 1 "$WALLET_DIR"/debug.log 2>&1)
LAST_LOG=$(echo "${LAST_LOG:0:188} $SIZE")

# time - date, trim extra spaces with xargs
CLOCK=$(date "+%H:%M:%S" 2>&1)
# date for logs
LOG_DATE=$(date '+%Y-%d-%mT%TZ' 2>&1)

# system load
LOAD=$(uptime 2>&1 | grep -Eo "[0-9]+.[0-9]+, [0-9]+.[0-9]+, [0-9]+.[0-9]+" 2>&1 | tr -d ',' 2>&1)

# cpu temp, celcius, fahrenheit, (raspberry pi)
CPU_CTEMP=$(</sys/class/thermal/thermal_zone0/temp)
CPU_CTEMP=$(echo "$CPU_CTEMP / 100 * 0.1" 2>&1 |
  bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
CPU_FTEMP=$(echo "(1.8 * $CPU_CTEMP) + 32" 2>&1 |
  bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

# used swap
USED_SWAP=$(swapon -s 2>&1 | grep "/swapfile" 2>&1 |
  awk '{ print $4 }' 2>&1)
# calculate megabytes (used swap)
USED_SWAP=$(echo "$USED_SWAP/1024" | bc -l)
# total swap
TOTAL_SWAP=$(swapon -s 2>&1 | grep "/swapfile" 2>&1 |
  awk '{ print $3 }' 2>&1)
# calculate megabytes (total swap)
TOTAL_SWAP=$(echo "$TOTAL_SWAP/1024" | bc -l)
# free Memory
FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 |
  awk '{ print $4 }' 2>&1)
# total Memory
TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 |
  awk '{ print $2 }' 2>&1)
# calculate total system total memory + total swap
TOTAL_MEM=$(echo "$TOTAL_MEM+$TOTAL_SWAP" 2>&1 |
  bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
TOTAL_MEM="${G1:?}${TOTAL_MEM:?}${N0:?}"
# calculate total free system free memory + used swap
FREE_MEM=$(echo "$(echo "$TOTAL_SWAP-$USED_SWAP" 2>&1 | bc -l 2>&1)+$FREE_MEM" 2>&1 |
  bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
FREE_MEM="${G1:?}${FREE_MEM:?}M${N0:?}"

# free Space, mmc block device #0, partition #2, partition #2, dev/root
USED_HDD=$(df -h 2>&1 | grep -E "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 |
  awk '{ print $3 }' 2>&1)
USED_HDD="${G1:?}${USED_HDD:?}${N0:?}"
USED_HDD_P=$(df -h | grep -E "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 |
  awk '{ print $5 }' 2>&1)

# get interface
IFCONFIG=$(ifconfig 2>&1 | grep -E "wlan*|eth*" 2>&1)
IP_ADDRESS=$(echo "$IFCONFIG" 2>&1 | grep -E "inet " 2>&1 |
  grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1)
IP_ADDRESS="${C1:?}$IP_ADDRESS${N0:?}"
INTERFACE=$(echo "$IFCONFIG" 2>&1 | grep -E "wlan*|eth*" 2>&1 |
  awk '{ print $1 }' 2>&1 | awk -F: '{ print $1 }' 2>&1 |
  head -1 2>&1)

# update wan, update repo (everyday)
if [[ "$(date +%H%M 2>&1 | grep -Eo "0000" 2>&1)" ]]; then
  rm "$LOG_DIR"/getwan &>/dev/null
  # update repo
  cd /home/"$(whoami)"/trump-node || exit && git pull -q && bash include/install 2>&1
fi
# get wan address
if [[ ! -f "$LOG_DIR"/getwan ]]; then
  host myip.opendns.com resolver1.opendns.com >"$LOG_DIR"/getwan
fi
PUBLIC_IP=$(grep "address" "$LOG_DIR"/getwan 2>&1 |
  egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1)
PUBLIC_IP="${C1:?}${PUBLIC_IP:?}${N0:?}"

# download
DOWNLOAD=$(ifconfig 2>&1 | grep -E "wla*|eth*" 2>&1 |
  grep "RX packets" 2>&1 | head -1 2>&1 |
  awk '{ print $6 $7 }' 2>&1 | tr -d '()' 2>&1)
# upload
UPLOAD=$(ifconfig 2>&1 | grep -E "wla*|eth*" 2>&1 |
  grep "TX packets" 2>&1 | head -1 2>&1 |
  awk '{ print $6 $7 }' 2>&1 | tr -d '()' 2>&1)

# tor status
if grep "127.0.0.1:9050" "$LOG_DIR"/getinfo &>/dev/null; then
  TOR_ICON=$(printf '%b' "${P1:?}P$N0")
else
  TOR_ICON=$(printf '%b' "${GR:?}P$N0")
fi

### adding nodes ###############################################################

# make sure screen is installed
if ! [ -x "$(command -v screen)" ]; then
  sudo apt-get install screen -y
fi

if [ ! -s "$LOG_DIR"/addnodes ]; then
  rm "$LOG_DIR"/addnodes &>/dev/null
fi
if [ ! -s "$LOG_DIR"/nodes ]; then
  rm "$LOG_DIR"/nodes &>/dev/null
fi
# update addnodes (every hour)
if [[ "$(date +%M 2>&1 | grep -Eo "00" 2>&1)" ]]; then
  rm "$LOG_DIR"/nodes &>/dev/null
fi

# get node list, ticker (api, arp)
if [[ ! -f "$LOG_DIR"/nodes ]]; then

  # save "stable/working" peers into file (addnodes - ipv4 address)
  cat "$LOG_DIR"/getpeerinfo 2>&1 |
    awk '/:[0-9]+/ && !/]/ {print $2,$3}' 2>&1 |
    grep -v "Core" >>/home/"$(whoami)"/addnodes 2>&1

  # clean up and use as "manually addnodes"
  awk '/:[0-9]+/ && !/]/ {print $1}' /home/"$(whoami)"/addnodes 2>&1 |
    awk '!a[$0]++' 2>&1 | sort -n >/tmp/an 2>&1
  mv /tmp/an /home/"$(whoami)"/addnodes 2>&1

  # constantly adding (ipv4+manually added)
  awk '/:[0-9]+/ && !/]/ {print $1}' /home/"$(whoami)"/addnodes >"$LOG_DIR"/nodes

  # add local address (arp) intranet, no ports on these
  arp -a 2>&1 |
    # ignore common default router IP address
    grep -vwE "(192.168.1.1|192.168.0.1|192.168.1.10.1|192.168.2.1|192.168.1.254|192.168.0.30|192.168.0.50|10.0.0.2|10.1.1.1|10.0.1.1|10.0.0.1|10.0.0.138|10.10.1.1)" 2>&1 |
    egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" >>"$LOG_DIR"/nodes 2>&1

  # add node address (api) internet
  curl -sf https://chainz.cryptoid.info/trump/api.dws?q=nodes 2>&1 |

    # clean up the file above (ipv4) no ports on these
    egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" >>"$LOG_DIR"/nodes 2>&1

  # ticker (api price)
  curl -sf https://api.coingecko.com/api/v3/coins/trumpcoin >"$LOG_DIR"/ticker 2>&1

  if [[ -f "$LOG_DIR"/ticker ]]; then

    # clean up ticker
    cat "$LOG_DIR"/ticker 2>&1 | tr -d '"|,' 2>&1 |
      egrep -o "[a0-z9]+-[0-9]+usd:[0-9]+.[0-9]+" 2>&1 |
      egrep -o "usd:[0-9]+.[0-9]+" 2>&1 | tr -d 'usd:' >/tmp/ticker 2>&1

    # count ticker lines, create average
    TICKER_TOTAL=$(cat /tmp/ticker 2>&1 |
      awk '{ SUM += $1} END { print SUM }' 2>&1)
    TICKER_LINES=$(cat /tmp/ticker 2>&1 | wc -l 2>&1)
    echo "${TICKER_TOTAL:?}/${TICKER_LINES:?}" 2>&1 |
      bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >/tmp/ticker 2>&1

    # remove old file
    rm "$LOG_DIR"/ticker &>/dev/null

    # move new file into place
    mv /tmp/ticker "$LOG_DIR"/ticker 2>&1
  fi
fi

# create failed connection list
egrep -o " to [a0-z9]+.[a0-z9]+.[a0-z9]+.[a0-z9]+:[0-9]+ failed" /home/"$(whoami)"/TrumpCoin/debug.log 2>&1 |
  awk '!a[$0]++' 2>&1 | sort -n 2>&1 | awk '{ print $2 }' >"$LOG_DIR"/failed 2>&1
# count failed connections, feed output to debug.log
FAIL_COUNT=$(wc -l "$LOG_DIR"/failed 2>&1 | awk '{ print $1 }' 2>&1)
ADDNODE_SI=$(wc -l "$LOG_DIR"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)
ADDNODE_NOD=$(wc -l "$LOG_DIR"/nodes 2>&1 | awk '{ print $1 }' 2>&1)
ADDNODE_PSI=$(wc -l /home/"$(whoami)"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)
SUCCESS_CO=$(grep -c "New outbound peer" /home/"$(whoami)"/TrumpCoin/debug.log 2>&1)
SUCCESS_RA=$(echo "100/$(echo "$FAIL_COUNT+$SUCCESS_CO" 2>&1 |
  bc -l 2>&1)*$SUCCESS_CO" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
SUCCESS_RA="${SUCCESS_RA:?}%"
printf '%b' "${LOG_DATE:?} Status() Failed/Success - Fail ${R1:?}${FAIL_COUNT:?}${N0:?} Success ${G1:?}$SUCCESS_CO${N0:?} Success Rate ${Y1:?}$SUCCESS_RA${N0:?}\n" >>/home/"$(whoami)"/TrumpCoin/debug.log 2>&1
printf '%b' "${LOG_DATE:?} Status() AddnodeSize - AddNewPeers ${CY:?}${ADDNODE_SI:?}${N0:?} AddnodePeers ${C1:?}$ADDNODE_PSI Nodes ${G1:?}$ADDNODE_NOD${N0:?}\n" >>/home/"$(whoami)"/TrumpCoin/debug.log 2>&1
printf '%b' "${LOG_DATE:?} Status() PeerStatus - Total ${WALLET_PEERS_TOTAL:?} New ${WALLET_PEERS_LATEST:?} Older ${WALLET_PEERS_OTHER:?} - ${G1:?}⇩ $DOWNLOAD ${R1:?}⇧ $UPLOAD${N0:?}\n" >>/home/"$(whoami)"/TrumpCoin/debug.log 2>&1

# create a list (addnodes) from nodes
cat "$LOG_DIR"/nodes 2>&1 | shuf >"$LOG_DIR"/addnodes 2>&1

# remove failed connections inside addnodes
cat "$LOG_DIR"/addnodes | grep -v -f "$LOG_DIR"/failed >/tmp/clean_addnodes
# setup new file
mv /tmp/clean_addnodes "$LOG_DIR"/addnodes 2>&1

# look for screen session, if not found, run one
if ! screen -list 2>&1 |
  grep -q "addnodes" 2>&1; then
  # create screen session
  screen -dmS addnodes 2>&1
  # connect nodes found with addnodes list above
  # (using tmp directory)
  cat >/tmp/add_peers <<'EOF'
source /home/pi/pitrump.conf
source /usr/local/bin/include/color
LOG_DATE=$(date '+%Y-%d-%mT%TZ' 2>&1)
PEERS_TRIES=$(egrep -o "peer=[0-9]+" /home/"$(whoami)"/TrumpCoin/debug.log 2>&1 | egrep -o "[0-9]+" 2>&1 | tail -1 2>&1)
printf '%b' "${LOG_DATE:?} Status() ${Y1:?}Adding nodes now!${N0:?} Connected ${G1:?}$PEERS_TRIES${N0:?}\n" >>/home/"$(whoami)"/TrumpCoin/debug.log 2>&1
while IFS= read -r ADDS; do
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf addnode "$ADDS" onetry 2>&1
done <"$LOG_DIR"/addnodes
LOG_DATE=$(date '+%Y-%d-%mT%TZ' 2>&1)
printf '%b' "${LOG_DATE:?} Status() ${G1:?}Adding nodes done! ${N0:?}\n" >>/home/"$(whoami)"/TrumpCoin/debug.log 2>&1
killall screen
EOF
  # start adding nodes, inside screen session
  screen -S addnodes -X -p 0 stuff $'bash /tmp/add_peers\n'
fi

### wallet information #########################################################

# collect wallet info, on every update (loop) from client
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getblockchaininfo 2>&1 | tr -d '"|,' >"$LOG_DIR"/getblockchaininfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getinfo 2>&1 | tr -d '"|,' >"$LOG_DIR"/getinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getmempoolinfo 2>&1 | tr -d '"|,' >"$LOG_DIR"/getmempoolinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getnetworkinfo 2>&1 | tr -d '"|,' >"$LOG_DIR"/getnetworkinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getpatriotnodecount 2>&1 | tr -d '"|,' >"$LOG_DIR"/getpatriotnodecount 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getwalletinfo 2>&1 | tr -d '"|,' >"$LOG_DIR"/getwalletinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf listunspent 2>&1 | tr -d '"|,' >"$LOG_DIR"/listunspent 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getpeerinfo 2>&1 | tr -d '"|,' >"$LOG_DIR"/getpeerinfo 2>&1

# wallet version
WALLET_VERSION=$(grep "Core" "$LOG_DIR"/getnetworkinfo 2>&1 |
  egrep -o "[0-9]+.[0-9]+.[0-9]+" 2>&1)

# running mainnet or testnet
if ! "$(grep "main" "$LOG_DIR"/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
  # mainnet
  WALLET_CHAIN="${G0:?}mainnet${N0:?}"
else
  # testnet
  WALLET_CHAIN="${CY:?}testnet${N0:?}"
fi

# if rpc in warm-up, loading block index, wait
if ! grep -q "error" "$LOG_DIR"/getblockchaininfo &>/dev/null; then
  # loading is done
  RC_LOADING="${N0:?}"
  # logo turns yellow while running
  RC="${Y1:?}"
  # headers, blocks, sync
  WALLET_HEADS=$(grep "blocks" "$LOG_DIR"/getblockchaininfo 2>&1 |
    grep -Eo "[0-9]+" 2>&1)
  WALLET_BLOCK=$(grep "headers" "$LOG_DIR"/getblockchaininfo 2>&1 |
    grep -Eo "[0-9]+" 2>&1)
  WALLET_SYNC=$(echo "100/$WALLET_HEADS*$WALLET_BLOCK" 2>&1 |
    bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  WALLET_SYNC="${G1:?}${WALLET_SYNC:?}%${N0:?}"
else # wallet is loading/syncing
  # clean up old files, while loading
  rm -R "${LOG_DIR:?}"/* &>/dev/null
  # loading while waiting on client
  RC_LOADING="${GR:?}        Loading${N0:?}"
  # logo turns grey while loading
  RC="${GR:?}"
  # non responsive (loading)
  WALLET_SYNC="${GR:?}0.00${N0:?}"
fi

# wallet patriotnodes total
WALLET_NODES_TOTAL=$(grep "total" "$LOG_DIR"/getpatriotnodecount 2>&1 |
  egrep -o "[0-9]+" 2>&1)
# wallet patriotnodes stable
WALLET_NODES_STABLE=$(grep "stable" "$LOG_DIR"/getpatriotnodecount 2>&1 |
  egrep -o "[0-9]+" 2>&1)
# wallet patriotnodes enabled
WALLET_NODES_ENABLED=$(grep "enabled" "$LOG_DIR"/getpatriotnodecount 2>&1 |
  egrep -o "[0-9]+" 2>&1)
# wallet patriotnodes inqueue
WALLET_NODES_INQUEUE=$(grep "inqueue" "$LOG_DIR"/getpatriotnodecount 2>&1 |
  egrep -o "[0-9]+" 2>&1)
# wallet connections total
WALLET_PEERS_TOTAL=$(grep "connections" "$LOG_DIR"/getinfo 2>&1 |
  egrep -o "[0-9]+" 2>&1)
if [[ -f "$LOG_DIR"/ticker ]]; then
  WALLET_PEERS_TOTAL="${P1:?}${WALLET_PEERS_TOTAL:?}${N0:?}"
fi
# wallet connections latest (using wallet version)
WALLET_PEERS_LATEST=$(grep "subver" "$LOG_DIR"/getpeerinfo 2>&1 |
  egrep -o "$WALLET_VERSION" 2>&1 | wc -l 2>&1)
if [[ -f "$LOG_DIR"/ticker ]]; then
  WALLET_PEERS_LATEST="${G1:?}${WALLET_PEERS_LATEST:?}${N0:?}"
fi
# wallet connections other (not latest, probably older wallets)
WALLET_PEERS_OTHER=$(grep "subver" "$LOG_DIR"/getpeerinfo 2>&1 |
  egrep -o "[0-9]+.[0-9]+.[0-9]+" 2>&1 | grep -v "$WALLET_VERSION" 2>&1 | wc -l 2>&1)
if [[ -f "$LOG_DIR"/ticker ]]; then
  WALLET_PEERS_OTHER="${G0:?}${WALLET_PEERS_OTHER:?}${N0:?}"
fi
if [[ -f "$LOG_DIR"/ticker ]]; then
  # wallet balance
  WALLET_BALANCE=$(grep "balance" "$LOG_DIR"/getinfo 2>&1 |
    egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  # wallet value
  WALLET_VALUE=$(echo "$(cat "$LOG_DIR"/ticker 2>&1 |
    tail -1 2>&1)*$WALLET_BALANCE" 2>&1 |
    bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
fi
if [[ -f "$LOG_DIR"/ticker ]]; then
  WALLET_VERSION="${G1:?}${WALLET_VERSION:?}${N0:?}"
  # wallet ticker.usd
  WALLET_TICKER=$(cat "$LOG_DIR"/ticker 2>&1)
  # wallet mempool
  WALLET_MEMPOOL=$(grep "size" "$LOG_DIR"/getmempoolinfo 2>&1 |
    egrep -o "[0-9]+" 2>&1)
  # wallet txcount
  WALLET_TXCOUNT=$(grep "txcount" "$LOG_DIR"/getwalletinfo 2>&1 |
    egrep -o "[0-9]+" 2>&1)
  # wallet inputs
  WALLET_INPUTS=$(grep "address" "$LOG_DIR"/listunspent 2>&1 | wc -l 2>&1)
# last txid, (smallest one)
fi
LAST_TX=$(grep "confirmations" "$LOG_DIR"/listunspent 2>&1 |
  awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1)
# wallet txid with help of last_tx var
WALLET_TXLAST=$(cat "$LOG_DIR"/listunspent 2>&1 | tr -d ':' 2>&1 |
  grep -B8 "confirmations $LAST_TX" 2>&1 | grep "txid" 2>&1 |
  awk '{ print $2 }' 2>&1 | tail -1 2>&1)
# wallet stakes (addtowallet)
# create staking log
grep "AddToWallet" "$WALLET_DIR"/debug.log >"$LOG_DIR"/staking
WALLET_STAKES=$(grep -c "AddToWallet" "$LOG_DIR"/staking 2>&1)
if [[ -f "$LOG_DIR"/ticker ]]; then
  # wallet pos status
  if [[ "$(grep "Staking Active" "$LOG_DIR"/getinfo 2>&1)" ]]; then
    # pos active
    POS_STATUS="${G1:?}S${N0:?}"
    # balance is staking, highlight balance, stakes and inputs
    WALLET_BALANCE="${G1:?}${WALLET_BALANCE:?}${N0:?}"
    WALLET_STAKES="${G1:?}${WALLET_STAKES:?}${N0:?}"
    WALLET_INPUTS="${G1:?}${WALLET_INPUTS:?}${N0:?}"
  else # pos not active
    POS_STATUS="${GR:?}S${N0:?}"
  fi
else # pos not active
  POS_STATUS="${GR:?}S${N0:?}"
fi

### clean up debug.log, peers.dat (truncate) ###################################

if [[ "$(date +%H%M 2>&1 | grep -Eo "0000" 2>&1)" ]]; then
  truncate -s 0 /home/"$(whoami)"/TrumpCoin/debug.log 2>&1
  truncate -s 0 /home/"$(whoami)"/TrumpCoin/peers.dat 2>&1
  # keep proof-of-work
  cat "$LOG_DIR"/staking >>/home/"$(whoami)"/TrumpCoin/debug.log
fi

### timeline ###################################################################

# if rpc in warm-up, loading block index, wait
if [[ -f "$LOG_DIR"/getblockchaininfo ]]; then

  # random start number
  RANDOM_TIMELINE=$((((RANDOM % 11) + 1)))

  # difficulty
  if [ "$RANDOM_TIMELINE" -eq "1" ]; then
    TIMELINE=$(grep "difficulty" "$LOG_DIR"/getinfo 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE="Difficulty $TIMELINE"
  # patriotnodes
  elif [ "$RANDOM_TIMELINE" -eq "2" ]; then
    TIMELINE="Patriotnodes ${N0:?}${WALLET_NODES_STABLE:?}${N0:?}/${G1:?}${WALLET_NODES_TOTAL:?}${N0:?}/${G1:?}${WALLET_NODES_ENABLED:?}${N0:?}/${GR:?}${WALLET_NODES_INQUEUE:?}${N0:?}"
  # moneysupply
  elif [ "$RANDOM_TIMELINE" -eq "3" ]; then
    TIMELINE=$(grep "moneysupply" "$LOG_DIR"/getinfo 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1 | rev 2>&1 |
      sed "s#[[:digit:]]\{3\}#&,#g" 2>&1 | rev 2>&1 | sed 's/^,//g' 2>&1)
    TIMELINE="Moneysupply $TIMELINE"
  # unconfirmed_balance
  elif [ "$RANDOM_TIMELINE" -eq "4" ]; then
    TIMELINE=$(grep "unconfirmed_balance" "$LOG_DIR"/getwalletinfo 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE="Unconfirmed ${GR:?}$TIMELINE${N0:?}"
  # immature_balance
  elif [ "$RANDOM_TIMELINE" -eq "5" ]; then
    TIMELINE=$(grep "immature_balance" "$LOG_DIR"/getwalletinfo 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
    TIMELINE="Immature ${GR:?}$TIMELINE${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "6" ]; then
    # lowest confirmation
    TIMELINE_CONF=$(grep "confirmations" "$LOG_DIR"/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_CONF*60" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # calculate seconds into age
    INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
    INPUT_AGE_D=$(echo "$(echo "$INPUT_AGE" 2>&1 | egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>&1)
    TIMELINE="New Input ${C1:?}$TIMELINE_CONF${N0:?} ${INPUT_AGE_D:?}d ${GR:?}$INPUT_AGE${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "7" ]; then
    # highest confirmation
    TIMELINE_CONF=$(grep "confirmations" "$LOG_DIR"/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_CONF*60" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # calculate seconds into age
    INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
    INPUT_AGE_D=$(echo "$(echo "$INPUT_AGE" 2>&1 | egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>&1)
    TIMELINE="Old Input ${G1:?}$TIMELINE_CONF${N0:?} ${INPUT_AGE_D:?}d ${GR:?}$INPUT_AGE${N0:?}"
    # average confirmation
  elif [ "$RANDOM_TIMELINE" -eq "8" ]; then
    UNSPENT_COUNT=$(grep "confirmations" "$LOG_DIR"/listunspent | wc -l)
    TIMELINE=$(grep "confirmations" "$LOG_DIR"/listunspent 2>&1 |
      awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)
    # average calculated
    TIMELINE_AVG=$(echo "$TIMELINE/$UNSPENT_COUNT" 2>&1 | bc 2>&1)
    # calculate seconds
    TIMELINE_SEC=$(echo "$TIMELINE_AVG*60" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
    # calculate seconds into age
    INPUT_AGE=$(printf '%dh:%dm' $(("$TIMELINE_SEC/3600")) $(("$TIMELINE_SEC%3600/60")))
    INPUT_AGE_D=$(echo "$(echo "$INPUT_AGE" 2>&1 | egrep -o "[0-9]+h" 2>&1 | tr -d 'h' 2>&1)/24" 2>&1 | bc 2>&1)
    TIMELINE="Average ${G1:?}$TIMELINE_AVG${N0:?} ${INPUT_AGE_D:?}d ${GR:?}$INPUT_AGE${N0:?}"
    # wallet value
  elif [ "$RANDOM_TIMELINE" -eq "9" ]; then
    TIMELINE="Value${G0:?} ${WALLET_VALUE:?} USD ${GR:?}$WALLET_TICKER${N0:?}"
    # highest input amount
  elif [ "$RANDOM_TIMELINE" -eq "10" ]; then
    TIMELINE=$(grep "amount" "$LOG_DIR"/listunspent 2>&1 | awk '{ print $2 }' 2>&1 |
      sort -n 2>&1 | tail -1 2>&1)
    TIMELINE="Highest Input ${G1:?}$TIMELINE${N0:?}"
    # lowest input amount
  elif [ "$RANDOM_TIMELINE" -eq "11" ]; then
    TIMELINE=$(grep "amount" "$LOG_DIR"/listunspent 2>&1 | awk '{ print $2 }' 2>&1 |
      sort -n 2>&1 | head -1 2>&1)
    TIMELINE="Lowest Input ${G1:?}$TIMELINE${N0:?}"
  fi
else # wait on wallet
  # random start number
  RANDOM_TIMELINE=$((((RANDOM % 10) + 1)))
  # quotes - art of the deal
  if [ "$RANDOM_TIMELINE" -eq "1" ]; then
    TIMELINE="${GR}Think big${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "2" ]; then
    TIMELINE="${GR}Maximize your options${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "3" ]; then
    TIMELINE="${GR}Know your market${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "4" ]; then
    TIMELINE="${GR}Use your leverage${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "5" ]; then
    TIMELINE="${GR}Enhance your location${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "6" ]; then
    TIMELINE="${GR}Get the word out${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "7" ]; then
    TIMELINE="${GR}Fight back${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "8" ]; then
    TIMELINE="${GR}Deliver the goods${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "9" ]; then
    TIMELINE="${GR}Contain the costs${N0:?}"
  elif [ "$RANDOM_TIMELINE" -eq "10" ]; then
    TIMELINE="${GR}Have fun${N0:?}"
  fi
fi
# non responsive
source /usr/local/bin/include/null

if [[ "$DARKMODE" -eq "1" ]]; then
  # darkmode theme
  RC="${GR:?}"
  TH="${RC:?}D${N0:?}"
else # default theme
  RC="${Y1:?}"
  TH="${RC:?}D${N0:?}"
fi

# END
