#!/bin/bash

# By Rainman
# V20211012
# 0.2.3.4

# shellcheck disable=SC2034  # Unused variables left for readability

# pitrump configurations
source /home/pi/pitrump.conf

# create data directory
mkdir /home/"$(whoami)"/node_data &>/dev/null

# script version
VERSION="v0.2.3.4"

### system information #########################################################

# log lines (tail debug)
LAST_LOG=$(tail -n 1 "$WALLET_DIR"/debug.log 2>&1)
LAST_LOG=$(echo "${LAST_LOG:0:188} $SIZE")

# time - date, trim extra spaces with xargs
CLOCK=$(date "+%H:%M:%S" 2>&1)

# system load
LOAD=$(uptime 2>&1 | grep -Eo "[0-9]+.[0-9]+, [0-9]+.[0-9]+, [0-9]+.[0-9]+" 2>&1 | tr -d ',' 2>&1)

# cpu temp, celcius, fahrenheit, (raspberry pi)
CPU_CTEMP=$(</sys/class/thermal/thermal_zone0/temp)
CPU_CTEMP=$(echo "$CPU_CTEMP / 100 * 0.1" 2>&1 |
  bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
CPU_FTEMP=$(echo "(1.8 * $CPU_CTEMP) + 32" 2>&1 |
  bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

# used swap
USED_SWAP=$(swapon -s 2>&1 | grep "/swapfile" 2>&1 |
  awk '{ print $4 }' 2>&1)
# calculate megabytes (used swap)
USED_SWAP=$(echo "$USED_SWAP/1024" | bc -l)
# total swap
TOTAL_SWAP=$(swapon -s 2>&1 | grep "/swapfile" 2>&1 |
  awk '{ print $3 }' 2>&1)
# calculate megabytes (total swap)
TOTAL_SWAP=$(echo "$TOTAL_SWAP/1024" | bc -l)
# free Memory
FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 |
  awk '{ print $4 }' 2>&1)
# total Memory
TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 |
  awk '{ print $2 }' 2>&1)
# calculate total system total memory + total swap
TOTAL_MEM=$(echo "$TOTAL_MEM+$TOTAL_SWAP" 2>&1 |
  bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
# calculate total free system free memory + used swap
FREE_MEM=$(echo "$(echo "$TOTAL_SWAP-$USED_SWAP" 2>&1 | bc -l 2>&1)+$FREE_MEM" 2>&1 |
  bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)

# free Space, mmc block device #0, partition #2, partition #2, dev/root
USED_HDD=$(df -h 2>&1 | grep -E "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 |
  awk '{ print $3 }' 2>&1)
USED_HDD_P=$(df -h | grep -E "mmcblk0p2|mmcblk0p3|/dev/root" 2>&1 |
  awk '{ print $5 }' 2>&1)

# get interface
IFCONFIG=$(ifconfig 2>&1 | grep -E "wlan*|eth*" 2>&1)
IP_ADDRESS=$(echo "$IFCONFIG" 2>&1 | grep -E "inet " 2>&1 |
  grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1)
INTERFACE=$(echo "$IFCONFIG" 2>&1 | grep -E "wlan*|eth*" 2>&1 |
  awk '{ print $1 }' 2>&1 | awk -F: '{ print $1 }' 2>&1 |
  head -1 2>&1)

# update wan (everyday)
if [[ "$(date +%H%M 2>&1 | grep -Eo "2359" 2>&1)" ]]; then
  rm "$LOG_DIR"/getwan &>/dev/null
fi
# get wan address
if [[ ! -f "$LOG_DIR"/getwan ]]; then
  host myip.opendns.com resolver1.opendns.com >"$LOG_DIR"/getwan
fi
PUBLIC_IP=$(cat "$LOG_DIR"/getwan 2>&1 | grep "address" 2>&1 |
  egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1)

# download
DOWNLOAD=$(ifconfig 2>&1 | grep -E "wla*|eth*" 2>&1 |
  grep "RX packets" 2>&1 | head -1 2>&1 |
  awk '{ print $6 $7 }' 2>&1 | tr -d '()' 2>&1)
# upload
UPLOAD=$(ifconfig 2>&1 | grep -E "wla*|eth*" 2>&1 |
  grep "TX packets" 2>&1 | head -1 2>&1 |
  awk '{ print $6 $7 }' 2>&1 | tr -d '()' 2>&1)

# tor status
if cat "$LOG_DIR"/getinfo 2>&1 |
  grep "127.0.0.1:9050" &>/dev/null; then
  TOR_ICON=$(printf '%b' "${P1:?}P$N0")
else
  TOR_ICON=$(printf '%b' "${GR:?}P$N0")
fi

### adding nodes ###############################################################

# make sure screen is installed
if ! [ -x "$(command -v screen)" ]; then
  sudo apt-get install screen -y
fi

# update addnodes (every hour)
if [[ "$(date +%M 2>&1 | grep -Eo "59" 2>&1)" ]]; then
  rm "$LOG_DIR"/nodes.tmp &>/dev/null
fi
# get node list (api, arp)
if [[ ! -f "$LOG_DIR"/nodes.tmp ]]; then
  # add local address (arp) intranet
  arp -a 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1 | tr -d ')' >"$LOG_DIR"/nodes.tmp 2>&1
  # add node address (api) internet
  curl -sf https://chainz.cryptoid.info/trump/api.dws?q=nodes >>"$LOG_DIR"/nodes.tmp 2>&1
fi
# create a list (addnodes) from nodes.tmp
egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" "$LOG_DIR"/nodes.tmp 2>&1 |
  tr -d '"' 2>&1 | shuf >"$LOG_DIR"/addnodes 2>&1

# look for screen session, if not found, run one
if ! screen -list 2>&1 |
  grep -q "addnodes" 2>&1; then
  # connect nodes found with addnodes list above
  # (using tmp directory)
  cat >/tmp/add_peers <<'EOF'
source /home/pi/pitrump.conf
while IFS= read -r ADDS; do
  "$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf addnode "$ADDS" onetry 2>&1
done <"$LOG_DIR"/addnodes
killall screen
EOF
  # create screen session
  screen -dmS addnodes 2>&1
  # start adding nodes, inside screen session
  screen -S addnodes -X -p 0 stuff $'bash /tmp/add_peers\n'
fi

### wallet information #########################################################

# collect wallet info, on every update (loop) from client
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getblockchaininfo >"$LOG_DIR"/getblockchaininfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getinfo >"$LOG_DIR"/getinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getmempoolinfo >"$LOG_DIR"/getmempoolinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getnetworkinfo >"$LOG_DIR"/getnetworkinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getpatriotnodecount >"$LOG_DIR"/getpatriotnodecount 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getwalletinfo >"$LOG_DIR"/getwalletinfo 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf listunspent >"$LOG_DIR"/listunspent 2>&1
"$WALLET_DIR"/trumpcoin-cli -datadir=./ -conf="$WALLET_DIR"/trumpcoin.conf getpeerinfo >"$LOG_DIR"/getpeerinfo 2>&1

# wallet version
WALLET_VERSION=$(cat "$LOG_DIR"/getnetworkinfo 2>&1 |
  grep "Core" 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+" 2>&1)

# running mainnet or testnet
if ! "$(cat "$LOG_DIR"/getblockchaininfo 2>&1 | grep "main" 2>&1)" -eq "main" &>/dev/null; then
  # mainnet
  WALLET_CHAIN="mainnet"
else
  # testnet
  WALLET_CHAIN="testnet"
fi

# if rpc in warm-up, loading block index, wait
if ! cat "$LOG_DIR"/getblockchaininfo 2>&1 | grep "error" &>/dev/null; then
  # loading is done
  RC_LOADING="${N0:?}"
  # logo turns yellow while running
  RC="${Y1:?}"
  # headers, blocks, sync
  WALLET_HEADS=$(cat "$LOG_DIR"/getblockchaininfo 2>&1 | grep "blocks" 2>&1 | grep -Eo "[0-9]+" 2>&1)
  WALLET_BLOCK=$(cat "$LOG_DIR"/getblockchaininfo 2>&1 | grep "headers" 2>&1 | grep -Eo "[0-9]+" 2>&1)
  WALLET_SYNC=$(echo "100/$WALLET_HEADS*$WALLET_BLOCK" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
else # wallet is loading/syncing
  # clean up old files, while loading
  rm -R "${LOG_DIR:?}"/* &>/dev/null
  # loading while waiting on client
  RC_LOADING="${GR:?}        Loading${N0:?}"
  # logo turns grey while loading
  RC="${GR:?}"
  # non responsive (loading)
  WALLET_SYNC="${GR:?}0.00${N0:?}"
fi

# wallet patriotnodes total
WALLET_NODES_TOTAL=$(cat "$LOG_DIR"/getpatriotnodecount 2>&1 |
  grep "total" 2>&1 | egrep -o "[0-9]+" 2>&1)
# wallet patriotnodes stable
WALLET_NODES_STABLE=$(cat "$LOG_DIR"/getpatriotnodecount 2>&1 |
  grep "stable" 2>&1 | egrep -o "[0-9]+" 2>&1)
# wallet patriotnodes enabled
WALLET_NODES_ENABLED=$(cat "$LOG_DIR"/getpatriotnodecount 2>&1 |
  grep "enabled" 2>&1 | egrep -o "[0-9]+" 2>&1)
# wallet patriotnodes inqueue
WALLET_NODES_INQUEUE=$(cat "$LOG_DIR"/getpatriotnodecount 2>&1 |
  grep "inqueue" 2>&1 | egrep -o "[0-9]+" 2>&1)
# wallet connections total
WALLET_PEERS_TOTAL=$(cat "$LOG_DIR"/getinfo 2>&1 |
  grep "connections" 2>&1 | egrep -o "[0-9]+" 2>&1)
# wallet connections latest (using wallet version)
WALLET_PEERS_LATEST=$(cat "$LOG_DIR"/getpeerinfo 2>&1 |
  grep "subver" 2>&1 | egrep -o "$WALLET_VERSION" 2>&1 | wc -l 2>&1)
# wallet connections other (not latest, probably older wallets)
WALLET_PEERS_OTHER=$(cat "$LOG_DIR"/getpeerinfo 2>&1 |
  grep "subver" 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+" 2>&1 | grep -v "$WALLET_VERSION" 2>&1 | wc -l 2>&1)
# wallet balance
WALLET_BALANCE=$(cat "$LOG_DIR"/getinfo 2>&1 |
  grep "balance" 2>&1 | egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
# wallet mempool
WALLET_MEMPOOL=$(cat "$LOG_DIR"/getmempoolinfo 2>&1 |
  grep "size" 2>&1 | egrep -o "[0-9]+" 2>&1)
# wallet txcount
WALLET_TXCOUNT=$(cat "$LOG_DIR"/getwalletinfo 2>&1 |
  grep "txcount" 2>&1 | egrep -o "[0-9]+" 2>&1)
# wallet inputs
WALLET_INPUTS=$(cat "$LOG_DIR"/listunspent 2>&1 |
  grep "address" 2>&1 | wc -l 2>&1)
# last txid, (smallest one)
LAST_TX=$(cat "$LOG_DIR"/listunspent 2>&1 |
  grep "confirmations" 2>&1 | egrep -o "[0-9]+" 2>&1 | sort -n 2>&1 | head -1 2>&1)
# wallet txid with help of last_tx var
WALLET_TXLAST=$(cat "$LOG_DIR"/listunspent 2>&1 | tr -d '"|:|,' 2>&1 |
  grep -B8 "confirmations $LAST_TX" 2>&1 | grep "txid" 2>&1 |
  awk '{ print $2 }' 2>&1 | tail -1 2>&1)
# wallet stakes (addtowallet)
WALLET_STAKES=$(cat "$WALLET_DIR"/debug.log 2>&1 | grep -c "AddToWallet" 2>&1)

# non responsive
source /usr/local/bin/include/null

# END
