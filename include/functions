#!/bin/bash

# By Rainman
# V20220104
# 1.2.1.8

# shellcheck disable=SC2034  # Unused variables left for readability

# script version for dashbord
VERSION="v1.2.1.8"

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1

### display ####################################################################

# setfont for display HyperPixel 4.0, 800Ã—480 (~235 PPI)
sudo setfont /usr/share/consolefonts/Lat7-Terminus24x12.psf.gz &>/dev/null

### directories ################################################################

# create temp directories, ruled by configuration
mkdir "${LOG_DIR:?}"/node_data &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/system &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/peers &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/data &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/client &>/dev/null
mkdir "${LOG_DIR:?}"/node_data/wallet/client/tmp &>/dev/null

### configuration version ###################################################### <- config check

CONFIG_DATE="1648818142" # configuration latest date (date '+%s')

if [[ ! "$(grep "${CONFIG_DATE:?}" /usr/local/bin/include/pinode/pinode.conf 2>&1)" ]] &>/dev/null; then
  until grep "${CONFIG_DATE:?}" /usr/local/bin/include/pinode/pinode.conf &>/dev/null; do
    clear
    printf '%b' "[${Y1:?}!!${N0:?}] Configuration is old! ${GR:?}$(grep "END" /usr/local/bin/include/pinode/pinode.conf 2>&1 | awk '{ print $3 }' 2>&1)${N0:?} -> ${G1:?}${CONFIG_DATE:?}${N0:?}\n"
    sleep 2
  done
fi

### pid of daemon status ####################################################### <- daemon check

# wait on node (daemon) to start
until pidof "${WALLET_DAEMON:?}" 2>&1 | wc -w 2>&1 | egrep "1" &>/dev/null; do
  RANDOM_ID=$((((RANDOM % 9999) + 1)))
  RANDOM_PID=$((((RANDOM % "${RANDOM_ID:?}") + 1)))
  clear
  printf '%b' "waiting on wallet (${GR:?}${RANDOM_PID:?}${N0:?}) daemon..${N0:?}"
  sleep 2
done

### wallet daemon starting #####################################################

# wallet daemon uptime in seconds
function uptime_daemon() {
  PID="$(pidof "${WALLET_DAEMON:?}" 2>&1)"
  HZ=$(getconf CLK_TCK 2>&1)
  UPTIME_CMD=$(awk '{print $1}' </proc/uptime)
  STARTTIME=$(awk '{print $22}' </proc/"$PID"/stat)
  echo $(("${UPTIME_CMD%.*}" - "$STARTTIME" / "$HZ"))
}
# daemon uptime
echo "$(uptime_daemon 2>&1)" 2>&1 | tr -d '-' >"${LOG_DIR:?}"/node_data/wallet/uptime 2>&1

LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' >"${LOG_DIR:?}"/node_data/system/date 2>&1
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

LC_ALL=de_US.utf8 date '+%T' >"${LOG_DIR:?}"/node_data/system/date.check 2>&1
LOG_CHECK=$(cat "${LOG_DIR:?}"/node_data/system/date.check 2>/dev/null)
if [[ -z "$LOG_CHECK" ]] &>/dev/null; then
  LOG_CHECK=$(LC_ALL=de_US.utf8 date '+%T' 2>&1)
fi

DAEMON_UPTIME="$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)"
if [[ -z "$DAEMON_UPTIME" ]] &>/dev/null; then
  DAEMON_UPTIME="1"
fi

### system information #########################################################

# time - date, trim extra spaces with xargs
LC_ALL=de_US.utf8 date '+%H:%M:%S' >"${LOG_DIR:?}"/node_data/system/clock 2>&1

# system user
whoami 2>&1 | awk '{ print $1 }' >"${LOG_DIR:?}"/node_data/system/user 2>&1

# system users, uptime and load
uptime 2>&1 | xargs >"${LOG_DIR:?}"/node_data/system/uptime 2>&1
egrep -o "[0-9]+.[0-9]+, [0-9]+.[0-9]+, [0-9]+.[0-9]+" "${LOG_DIR:?}"/node_data/system/uptime 2>&1 | sed 's/\([0-9]\),/\1./g' >"${LOG_DIR:?}"/node_data/system/load

# system cpu temperature (celcius)
echo "$(cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null)/100*0.1" | bc -l | awk '{ printf "%.1f\n", $1 }' >"${LOG_DIR:?}"/node_data/system/cpu_ctemp 2>&1
# system cpu temperature (fahrenheit)
echo "scale=2;((9/5) * $(echo "$(cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null)/100*0.1" | bc -l | awk '{ printf "%.1f\n", $1 }' 2>&1)) + 32" 2>&1 | bc -l 2>&1 | awk '{ printf "%.1f\n", $1 }' >"${LOG_DIR:?}"/node_data/system/cpu_ftemp 2>&1

# system free memory
echo "$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $7 }' 2>&1)+$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $4 }' 2>&1)" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/system/mem_free 2>&1
# system total memory
echo "$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)+$(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $2 }' 2>&1)" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/system/mem_total 2>&1

# system used space
numfmt --to iec --format "%8.3f" "$(echo "$(df -k 2>&1 | sort -n 2>&1 | grep -v "boot" 2>&1 | head -1 2>&1 | awk '{ print $3 }' 2>&1)*1024" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>&1 | xargs >"${LOG_DIR:?}"/node_data/system/hd_used 2>/dev/null
# system used space percentage
df -k 2>&1 | sort -n 2>&1 | grep -v "boot" 2>&1 | head -1 2>&1 | awk '{ print $5 }' >"${LOG_DIR:?}"/node_data/system/hd_used_percentage 2>/dev/null

# ifconfig, iwconfig data
ifconfig 2>&1 | egrep -A9 "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/system/ifconfig 2>&1
iwconfig 2>&1 | egrep -A9 "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/system/iwconfig 2>&1
# system network interface
egrep "wlan*|eth*" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | grep -B1 "inet" 2>&1 | egrep -o "wlan[0-9]+|eth[0-9]+" >"${LOG_DIR:?}"/node_data/system/interface 2>&1
# system ip address
cat "${LOG_DIR:?}"/node_data/system/ifconfig 2>/dev/null | egrep "inet " 2>&1 | grep -vwE "127.0.0.1" 2>&1 | awk '{ print $2 }' 2>&1 | head -1 >"${LOG_DIR:?}"/node_data/system/ip_address 2>&1

cat "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep "TX packets" 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1 >"${LOG_DIR:?}"/node_data/system/txbytes 2>&1
cat "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep "RX packets" 2>&1 | awk '{ print $5 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1 >"${LOG_DIR:?}"/node_data/system/rxbytes 2>&1

# get download from wlan(*) - eth(*)
DOWNLOAD=$(egrep "RX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep -o "bytes [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)
# get upload from wlan(*) - eth(*)
UPLOAD=$(egrep "TX packets [0-9]+  bytes [0-9]+" "${LOG_DIR:?}"/node_data/system/ifconfig 2>&1 | egrep -o "bytes [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | tail -1 2>&1)

### mempool activity ###########################################################

if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/screens ]] &>/dev/null; then
  # create screen list
  LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/wallet/data/screens 2>&1
fi

# mempool activity
MEMPOOL_LINES=$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | awk '{ print $1 }' 2>&1)
MEMPOOL_ACTIVE=$(grep "1" "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
MEMPOOL_NOACTIVE=$(grep "0" "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | wc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
MEMPOOL_PERC_ACTIVE=$(echo "100/$MEMPOOL_LINES*$MEMPOOL_ACTIVE" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
MEMPOOL_PERC_NOACTIVE=$(echo "100/$MEMPOOL_LINES*$MEMPOOL_NOACTIVE" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)

echo "A ${MEMPOOL_PERC_ACTIVE:?} D ${MEMPOOL_PERC_NOACTIVE:?}" >"${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>&1

MEMPOOL_PERC_ACTIVE="${MEMPOOL_PERC_ACTIVE:?}%"
MEMPOOL_PERC_NOACTIVE="${MEMPOOL_PERC_NOACTIVE:?}%"

# look for screen session, if not found, run this block
if ! cat "${LOG_DIR:?}"/node_data/wallet/data/screens 2>/dev/null | grep -q "read_mempool" &>/dev/null; then

  # collect mempool two times a loop (time_fix time)

  # kill old session
  screen -X -S read_mempool quit &>/dev/null
  # create new screen session
  screen -dmS read_mempool &>/dev/null

  # make sure read_mempool exist
  if [ ! -f "${LOG_DIR:?}"/read_mempool ] &>/dev/null; then
    # connect nodes found with nodes list above, (using tmp directory)
    cat >"${LOG_DIR:?}"/read_mempool <<'EOF'
#!/bin/bash
# By Rainman
# V20222603
# 0.0.2.2

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1
for (( ; ; )); do # loop script
LOG_DATE=$(LC_ALL=de_US.utf8 date '+%Y-%m-%dT%TZ' 2>&1)
"${WALLET_DIR:?}"/"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmempoolinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo 2>&1
if [[ ! "$(tail -10 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "Read.mempool()" 2>&1)" ]] &>/dev/null; then
  printf '%b' "${LOG_DATE:?} Status() Read.mempool() Memory pool $(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | awk '{ print $1 }' 2>&1) $(cat "${LOG_DIR:?}"/node_data/wallet/data/mempool_activity 2>/dev/null)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi
# get blockchain activity with mempool
if [[ "$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/getmempoolinfo 2>&1 | egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" -gt "0" ]] &>/dev/null; then
  # save activity values (1) to mempool.activity
  echo "1" >>"${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1
else # save no activity values (0) to mempool.activity
  echo "0" >>"${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1
fi
sleep 28
done
EOF
  fi

  # start reading mempool
  screen -S read_mempool -X -p 0 stuff $'bash '"${LOG_DIR:?}"'/read_mempool\n'
fi

# reset mempool after n lines
if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1 | awk '{ print $1 }' 2>&1)" -gt "1440" ]] &>/dev/null; then
  # keep log at n lines
  echo "$(tail -720 "${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/mempool 2>&1
fi

### wallet information #########################################################

# getinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo 2>&1
# wallet version
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" -version 2>&1 | egrep -o "v[0-9]+.[0-9]+.[0-9]+.[0-9]+" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/version 2>&1
# getblockchaininfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getblockchaininfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getblockchaininfo 2>&1
# getmempoolinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmempoolinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo 2>&1
# getwalletinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getwalletinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getwalletinfo 2>&1
# listunspent
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" listunspent 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/listunspent 2>&1
# getpeerinfo
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpeerinfo 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getpeerinfo 2>&1
# listbanned
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" listbanned 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/listbanned 2>&1
# getmasternodecount
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpatriotnodecount 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1
if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount ]] &>/dev/null; then
  "${WALLET_DIR:?}"/./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmasternodecount 2>&1 | tr -d '"|,' >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount 2>&1
fi
# masternodestatus
cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getpatriotnodestatus >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus 2>/dev/null
if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus ]] &>/dev/null; then
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" getmasternodestatus >"${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus 2>/dev/null
fi

# make sure data exist
if grep -o "error: couldn't connect to server" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo &>/dev/null; then
  rm -R "${LOG_DIR:?}"/node_data/wallet/client/tmp/* &>/dev/null
else # use existing data without any errors
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo "${LOG_DIR:?}"/node_data/wallet/client/getinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/version "${LOG_DIR:?}"/node_data/wallet/client/version &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getblockchaininfo "${LOG_DIR:?}"/node_data/wallet/client/getblockchaininfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmempoolinfo "${LOG_DIR:?}"/node_data/wallet/client/getmempoolinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getwalletinfo "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/listunspent "${LOG_DIR:?}"/node_data/wallet/client/listunspent &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getpeerinfo "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/listbanned "${LOG_DIR:?}"/node_data/wallet/client/listbanned &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodestatus "${LOG_DIR:?}"/node_data/wallet/client/getmasternodestatus &>/dev/null
  cp "${LOG_DIR:?}"/node_data/wallet/client/tmp/getmasternodecount "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount &>/dev/null
fi

### dashbord variables #########################################################

### top ###

REPO_VERSION="${N0:?}${VERSION:?}${GR:?}"

SYSTEM_CLOCK="${N0:?}$(cat "${LOG_DIR:?}"/node_data/system/clock 2>/dev/null)${N0:?}"

if [[ "$(grep "successfully started" "${DATA_DIR:?}"/masternode_status)" ]] &>/dev/null; then
  MASTER_STATUS="${CY:?}M${N0:?}"
else
  MASTER_STATUS="${GR:?}M${N0:?}"
fi

if [[ -z "$MASTER_STATUS" ]] &>/dev/null; then
  MASTER_STATUS="${GR:?}M${N0:?}"
fi

# calculate staking percentage
PROOF_STATUS=$(echo "100/${WALLET_ACTIVE:?}*$(echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ SUM += $2} END { print SUM }' 2>&1)/$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | wc -l 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
if [[ "$PROOF_STATUS" -gt "99" ]] &>/dev/null; then
  PROOF_STATUS="${G0:?}OK${N0:?}"
else
  if [[ "$PROOF_STATUS" -eq "0" ]] &>/dev/null; then
    PROOF_STATUS="${GR:?}0%${N0:?}"
  fi
  if [[ -z "$PROOF_STATUS" ]] &>/dev/null; then
    PROOF_STATUS="${GR:?}0%${N0:?}"
  fi
  PROOF_STATUS="${GR:?}${PROOF_STATUS:?}${N0:?}"
fi

if [[ "$(grep "$(cat "${DATA_DIR:?}"/masternode_collateral 2>/dev/null)" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | egrep -v "txid|scriptPubKey|confirmations|address" 2>&1)" ]] &>/dev/null; then
  echo "$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk '{ printf "%.0f\n", $1 }')-$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_confirmations 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/total_confirmations 2>&1
else
  grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1 | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/total_confirmations 2>&1
fi

THEME_STATUS="${GR:?}D${N0:?}"

if [[ -z "$THEME_STATUS" ]] &>/dev/null; then
  THEME_STATUS="${GR:?}0${N0:?}"
fi

if [[ "$(grep "Staking Active" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1)" ]] &>/dev/null; then
  PROOF_OF_STAKE="1"
  POS_STATUS="${G1:?}S${N0:?}"
else
  PROOF_OF_STAKE="0"
  POS_STATUS="${GR:?}S${N0:?}"
fi

if [[ -z "$POS_STATUS" ]] &>/dev/null; then
  POS_STATUS="${GR:?}S${N0:?}"
fi

if egrep "proxy: [0-9]+.[0-9]+.[0-9]+.[0-9]+:9050" "${LOG_DIR:?}"/node_data/wallet/client/getinfo &>/dev/null; then
  TOR_STATUS="${P1:?}P${N0:?}"
else
  TOR_STATUS="${GR:?}P${N0:?}"
fi

if [[ -z "$TOR_STATUS" ]] &>/dev/null; then
  TOR_STATUS="${GR:?}P${N0:?}"
fi

LAN_STATUS="$(cat "${LOG_DIR:?}"/node_data/system/interface 2>/dev/null)"
LAN_STATUS="${CY:?}${LAN_STATUS:0:4}${N0:?}"
if [[ ! "$(egrep "[a-z]" "${LOG_DIR:?}"/node_data/system/interface 2>&1)" ]] &>/dev/null; then
  LAN_STATUS="${GR:?}NET${N0:?}"
fi

### system ###

SYSTEM_LOAD="$(cat "${LOG_DIR:?}"/node_data/system/load 2>/dev/null | egrep -o "[0-9]+.[0-9]+" 2>&1 | xargs 2>&1)"
CPU_CTEMP="$(cat "${LOG_DIR:?}"/node_data/system/cpu_ctemp 2>/dev/null)"
CPU_FTEMP="$(cat "${LOG_DIR:?}"/node_data/system/cpu_ftemp 2>/dev/null)"
FREE_MEM="${G1:?}$(cat "${LOG_DIR:?}"/node_data/system/mem_free 2>/dev/null)${N0:?}"
TOTAL_MEM="${G0:?}$(cat "${LOG_DIR:?}"/node_data/system/mem_total 2>/dev/null)${N0:?}"
USED_HDD="${G1:?}$(cat "${LOG_DIR:?}"/node_data/system/hd_used 2>/dev/null)${N0:?}"
USED_HDD_P="$(cat "${LOG_DIR:?}"/node_data/system/hd_used_percentage 2>/dev/null)"
SYSTEM_USER="$(cat "${LOG_DIR:?}"/node_data/system/user 2>/dev/null)"
IP_ADDRESS="${CY:?}$(cat "${LOG_DIR:?}"/node_data/system/ip_address 2>/dev/null)${N0:?}"
DOWNLOAD=$(numfmt --to iec --format "%8.3f" "${DOWNLOAD:?}" 2>&1 | xargs 2>/dev/null)
UPLOAD=$(numfmt --to iec --format "%8.3f" "${UPLOAD:?}" 2>&1 | xargs 2>/dev/null)

### wallet ###

WALLET_DAEMON="${WALLET_DAEMON:?}"

WALLET_VERSION=$(cat "${LOG_DIR:?}"/node_data/wallet/client/version 2>/dev/null)

if [[ -z "$WALLET_DAEMON" ]] &>/dev/null; then
  WALLET_DAEMON="${GR:?}daemon${N0:?}"
fi
if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
  WALLET_VERSION="${GR:?}loading${N0:?}"
fi

if ! "$(grep "main" "${LOG_DIR:?}"/node_data/wallet/client/getblockchaininfo 2>&1)" -eq "main" &>/dev/null; then
  WALLET_CHAIN="${G0:?}mainnet${N0:?}"
else
  WALLET_CHAIN="${C1:?}testnet${N0:?}"
fi

if [[ -z "$WALLET_CHAIN" ]] &>/dev/null; then
  WALLET_CHAIN="${GR:?}...${N0:?}"
fi

if [ ! -s "${DATA_DIR:?}"/getwan ] &>/dev/null; then
  host myip.opendns.com resolver1.opendns.com >"${DATA_DIR:?}"/getwan 2>&1
fi
PUBLIC_IP=$(grep "address" "${DATA_DIR:?}"/getwan 2>&1 | egrep -o "[0-9]+.[0-9]+.[0-9]+.[0-9]+" 2>&1)
PUBLIC_IP="${C1:?}${PUBLIC_IP:?}${N0:?}"

if egrep "proxy: [0-9]+.[0-9]+.[0-9]+.[0-9]+:9050" "${LOG_DIR:?}"/node_data/wallet/client/getinfo &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/getonion ]] &>/dev/null; then
    PUBLIC_IP="$(grep "tor: Got service ID" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $6 }' 2>&1 | tr -d ',' 2>&1)"
    PUBLIC_IP="$(egrep "AdvertiseLocal: .*.onion" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | tail -1 2>&1 | awk '{ print $5 }' 2>&1)"
    if [[ -z "$PUBLIC_IP" ]] &>/dev/null; then
      PUBLIC_IP="$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)"
      PUBLIC_IP="${GR:?}${PUBLIC_IP:0:8}...onion${N0:?}"
    else
      echo "${PUBLIC_IP:?}" >"${DATA_DIR:?}"/getonion 2>&1
    fi
  else
    PUBLIC_IP="$(cat "${DATA_DIR:?}"/getonion 2>/dev/null)"
  fi
  PUBLIC_IP="${P1:?}${PUBLIC_IP:0:8}...onion${N0:?}"
fi

LATEST_RELEASE=$(cat "${LOG_DIR:?}"/node_data/wallet/client/latest 2>/dev/null)
if [[ -z "$LATEST_RELEASE" ]] &>/dev/null; then
  LATEST_RELEASE=$(torify curl -s "${WALLET_RELEASE:?}" 2>&1 | grep -Po "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" >"${LOG_DIR:?}"/node_data/wallet/client/latest 2>&1)
fi

WALLET_PEERS_LATEST=$(grep ":$(cat "${LOG_DIR:?}"/node_data/wallet/client/latest | grep -Po "[0-9]+\.[0-9]+\.[0-9]+")" "${LOG_DIR:?}"/node_data/wallet/client/getpeerinfo | wc -l)
WALLET_PEERS_OTHER=$(echo "$(cat "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | grep "connections" 2>&1 | awk '{ print $2 }' 2>&1)-${WALLET_PEERS_LATEST:?}" | bc 2>&1)
WALLET_PEERS_TOTAL=$(echo "${WALLET_PEERS_LATEST:?}+${WALLET_PEERS_OTHER:?}" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
WALLET_PEERS_TOTAL_NR="${WALLET_PEERS_TOTAL:?}"
# colorize
WALLET_PEERS_TOTAL="${P1:?}$WALLET_PEERS_TOTAL${N0:?}"
WALLET_PEERS_LATEST="${G1:?}$WALLET_PEERS_LATEST${N0:?}"
WALLET_PEERS_OTHER="${G0:?}$(echo "${WALLET_PEERS_OTHER:?}" 2>&1 | tr -d '-' 2>&1)${N0:?}"

# count banned peers
grep -c "address" "${LOG_DIR:?}"/node_data/wallet/client/listbanned >"${LOG_DIR:?}"/node_data/wallet/data/banlist 2>&1

if [[ -z "$WALLET_PEERS_TOTAL" ]] &>/dev/null; then
  WALLET_PEERS_TOTAL="${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_PEERS_LATEST" ]] &>/dev/null; then
  WALLET_PEERS_LATEST="${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_PEERS_OTHER" ]] &>/dev/null; then
  WALLET_PEERS_OTHER="${GR:?}0${N0:?}"
fi

echo "$(grep "connections" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | awk '{ print $2 }' 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/connections 2>&1

WALLET_BALANCE=$(grep "balance" "${LOG_DIR:?}"/node_data/wallet/client/getinfo 2>&1 | egrep -o "[0-9]+.[0-9]+" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
WALLET_UNCONFIRMED=$(grep "unconfirmed_balance" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
WALLET_IMMATURE=$(grep "immature_balance" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)

if [[ -z "$WALLET_BALANCE" ]] &>/dev/null; then
  WALLET_BALANCE="0"
fi
if [[ -z "$WALLET_UNCONFIRMED" ]] &>/dev/null; then
  WALLET_UNCONFIRMED="0"
fi
if [[ -z "$WALLET_IMMATURE" ]] &>/dev/null; then
  WALLET_IMMATURE="0"
fi
if [[ -z "$WALLET_BALANCES" ]] &>/dev/null; then
  WALLET_BALANCES="0"
fi

WALLET_BALANCES=$(echo "${WALLET_BALANCE:?}+${WALLET_UNCONFIRMED:?}+${WALLET_IMMATURE:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
echo "${WALLET_BALANCES:?}" >"${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>&1

WALLET_POS=$(grep "BitcoinMiner : proof-of-stake block was signed" "${DATA_DIR:?}"/staking 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)
WALLET_INPUTS="$(grep -c "address" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)"

if [[ "$PROOF_OF_STAKE" -eq "1" ]] &>/dev/null; then
  WALLET_BALANCES="${G1:?}$WALLET_BALANCES${N0:?}"
  WALLET_POS="${G1:?}$WALLET_POS${N0:?}"
  WALLET_INPUTS="${G1:?}$WALLET_INPUTS${N0:?}"
fi

# get wallet value
WALLET_VALUE=$(echo "$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/price 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)*$(cat "${LOG_DIR:?}"/node_data/wallet/data/total_balance 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1 | tail -1 2>&1)
# save wallet values
echo "${WALLET_VALUE:?}" >>"${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1
# calculate average wallet value
echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1)/$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1 | awk '{ print $1 }' 2>&1 | awk -F. '{ print $1 }' 2>&1)" 2>&1 | bc -l 2>&1 >"${LOG_DIR:?}"/node_data/wallet/data/balance_value 2>&1

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1 | awk '{ print $1 }' 2>&1)" -gt "420" ]] &>/dev/null; then
  echo "$(tail -369 "${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/balance_values 2>&1
fi

WALLET_POS_REWARDS="Stakes ${WALLET_POS:?}"
WALLET_INPUTS_NODES="Inputs ${WALLET_INPUTS:?}"

if [[ "$(grep "successfully started" "${DATA_DIR:?}"/masternode_status 2>&1)" ]] &>/dev/null; then
  WALLET_REW="$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount 2>/dev/null)"
  WALLET_MAS_OUTPUT="$(grep -c "successfully started" "${DATA_DIR:?}"/masternode_status 2>&1)"

  if [[ -z "$WALLET_REW" ]] &>/dev/null; then
    WALLET_REW="0"
  fi

  WALLET_POS_REWARDS="PoS/R ${WALLET_POS:?} ${CY:?}${WALLET_REW:?}${N0:?}"
  WALLET_INPUTS_NODES="I/MN ${WALLET_INPUTS:?} ${CY:?}${WALLET_MAS_OUTPUT:?}${N0:?}"
fi

if [[ -z "$WALLET_POS_REWARDS" ]] &>/dev/null; then
  WALLET_POS_REWARDS="Stakes ${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_INPUTS_NODES" ]] &>/dev/null; then
  WALLET_INPUTS_NODES="Inputs ${GR:?}0${N0:?}"
fi

WALLET_TXCOUNT="$(grep "txcount" "${LOG_DIR:?}"/node_data/wallet/client/getwalletinfo 2>&1 | egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)"
WALLET_MEMPOOL="$(grep "size" "${LOG_DIR:?}"/node_data/wallet/client/getmempoolinfo 2>&1 | egrep -o "[0-9]+" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)"
WALLET_HEADS="$(grep "blocks" "${LOG_DIR:?}"/node_data/wallet/client/getblockchaininfo 2>&1 | grep -Eo "[0-9]+" 2>&1)"

if [[ -z "$WALLET_TXCOUNT" ]] &>/dev/null; then
  WALLET_TXCOUNT="${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_MEMPOOL" ]] &>/dev/null; then
  WALLET_MEMPOOL="${GR:?}0${N0:?}"
fi
if [[ -z "$WALLET_HEADS" ]] &>/dev/null; then
  WALLET_HEADS="${GR:?}0${N0:?}"
fi

if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  LAST_TX=$(grep "confirmations" "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>&1 | awk '{ print $2 }' 2>&1 | sort -n 2>&1 | head -1 2>&1)
  if [[ -z "$LAST_TX" ]] &>/dev/null; then
    LAST_TX="$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)"
  fi
  WALLET_TXLAST=$(cat "${LOG_DIR:?}"/node_data/wallet/client/listunspent 2>/dev/null | tr -d ':' 2>&1 | grep -B8 "confirmations ${LAST_TX:?}" 2>&1 | grep "txid" 2>&1 | awk '{ print $2 }' 2>&1 | tail -1 2>&1)
fi

# run random quotes or system timeline
source /usr/local/bin/include/pinode/timeline

LAST_LOG=$(tail -n 42 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep -v "Status()" 2>&1 | tail -n 1 2>&1)
LOG_SIZE=$(ls -lS --block-size=M "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $5 }' 2>&1 | tr -d 'M' 2>&1)
LAST_LOG="${N0:?}${LAST_LOG:0:188} log=${LOG_SIZE:?}M${N0:?}"

### wallet boot/sync progress ##################################################

function loading() {
  WALLET_BALANCES="${GR:?}0${N0:?}"
  WALLET_POS_REWARDS="Stakes ${GR:?}0${N0:?}"
  WALLET_INPUTS_NODES="Inputs ${GR:?}0${N0:?}"
  WALLET_TXCOUNT="${GR:?}0${N0:?}"
  WALLET_MEMPOOL="${GR:?}0${N0:?}"
}

if [[ ! "$(grep "OK" "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing)" ]] &>/dev/null; then
  if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/synced 2>/dev/null | grep "progress=1.00" 2>&1)" ]] &>/dev/null; then
    if grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
      echo "OK" >"${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>&1
    fi
    WALLET_SYNC="${G1:?}$(cat "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>/dev/null)${N0:?}"
  else
    WALLET_SYNC="${G0:?}$(cat "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>/dev/null)%${N0:?}"
  fi
else
  WALLET_SYNC="${G1:?}$(cat "${LOG_DIR:?}"/node_data/wallet/client/tmp/syncing 2>/dev/null)${N0:?}"
fi

if [[ -z "$WALLET_SYNC" ]] &>/dev/null; then
  WALLET_SYNC="${GR:?}loading${N0:?}"
  loading
fi

if [[ "$(echo "${DAEMON_UPTIME:?}" 2>&1)" -lt "120" ]] &>/dev/null; then
  WALLET_TXLAST="${N0:?}       Loading${N0:?}"
  loading
fi

if ! grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  source /usr/local/bin/include/pinode/proc 2>&1
  if [[ -z "$SYNC_PROGRESS_BAR" ]] &>/dev/null; then
    SYNC_PROGRESS_BAR="${CY:?}       Loading${N0:?}"
    grep "Sync has finished" "${WALLET_LOG_DIR:?}"/debug.log >"${LOG_DIR:?}"/node_data/wallet/synced 2>&1
  fi
  WALLET_TXLAST="${G0:?}${SYNC_PROGRESS_BAR:?}${N0:?}"
  loading
fi

### theme ######################################################################

RC="${GR:?}"
CB="${GR:?}"
TX="${GR:?}"

### masternode pay #############################################################

if [[ "$(grep "version" "${LOG_DIR:?}"/node_data/wallet/client/tmp/getinfo)" ]] &>/dev/null; then

  # get wallet masternodes total
  WALLET_NODES_TOTAL=$(grep "total" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | egrep -o "[0-9]+" 2>&1)
  # get wallet masternodes stable
  WALLET_NODES_STABLE=$(grep "stable" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | egrep -o "[0-9]+" 2>&1)
  # get wallet masternodes enabled
  WALLET_NODES_ENABLED=$(grep "enabled" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | egrep -o "[0-9]+" 2>&1)
  # get wallet masternodes inqueue
  WALLET_NODES_INQUEUE=$(grep "inqueue" "${LOG_DIR:?}"/node_data/wallet/client/getmasternodecount 2>&1 | egrep -o "[0-9]+" 2>&1)

  # get masternode reward count, ruled by the masternode count
  WALLET_REWARD_COUNT=$(echo "${POS_LIMIT:?}/${WALLET_NODES_INQUEUE:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
  # save pay count
  echo "${WALLET_REWARD_COUNT:?}" >"${LOG_DIR:?}"/node_data/wallet/data/masternode_paycount 2>&1

  # calculate average masternode payout with pn|mn input amounts
  echo "$(egrep -A3 "MN|PN" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | grep "amount" 2>&1 | awk '{ print $2 }' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)/$(egrep -A3 "MN|PN" "${LOG_DIR:?}"/node_data/client/listunspent 2>&1 | grep "amount" 2>&1 | wc -l 2>&1)" 2>&1 | bc -l 2>&1 | grep -v "syntax" 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payment 2>&1

  # if above is not working, calculate average masternode payout with node payment value from debug.log
  if [[ ! -s "${LOG_DIR:?}"/node_data/wallet/data/masternode_payment ]] &>/dev/null; then
    echo "$(grep "node payment value" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '{ print $7 }' 2>&1 | tr -d '()' 2>&1 | awk '{ SUM += $1} END { print SUM }' 2>&1)/$(grep "node payment value" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | wc -l 2>&1)" | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payment 2>&1
  else
    touch "${LOG_DIR:?}"/node_data/wallet/data/masternode_payment &>/dev/null
  fi

  # calculate, payout
  echo "${WALLET_REWARD_COUNT:?}*$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_payment 2>/dev/null)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payout 2>&1
  # calculate, value
  echo "$(cat "${LOG_DIR:?}"/node_data/wallet/data/masternode_payout)*$(tail -1 "${LOG_DIR:?}"/node_data/wallet/data/price 2>&1 | awk '{ printf "%.8f\n", $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/masternode_payvalue 2>&1
fi

### staking ####################################################################

if [[ ! -s "${LOG_DIR:?}"/node_data/wallet/data/stake_count ]] &>/dev/null; then
  echo "0" >"${LOG_DIR:?}"/node_data/wallet/data/stake_count 2>&1
fi

if [[ -z "$WALLET_POS" ]] &>/dev/null; then
  WALLET_POS="0"
fi

if [ ! -f "${DATA_DIR:?}"/staking ] &>/dev/null; then
  touch "${DATA_DIR:?}"/staking &>/dev/null
fi

if [[ ! -f "${LOG_DIR:?}"/node_data/wallet/data/staking ]] &>/dev/null; then
  touch "${LOG_DIR:?}"/node_data/wallet/data/staking &>/dev/null
fi

WALLET_POS=$(grep "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)
SAVED_POS=$(grep -c "BitcoinMiner" "${DATA_DIR:?}"/staking 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
echo "${WALLET_POS:?}" >"${LOG_DIR:?}"/node_data/wallet/data/stake_count 2>&1

if [[ "$WALLET_POS" -gt "$SAVED_POS" ]] &>/dev/null; then
  grep "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' >"${DATA_DIR:?}"/staking 2>&1
  printf '%b' "${LOG_DATE:?} Status() Saved - - - -> ${G1:?}${WALLET_POS:?}${GR:?} :: ${N0:?}Proof-of-Stake Data!${GR:?} :: ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
fi

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/staking 2>&1 | awk '{ print $1 }' 2>&1)" -lt "$(grep -c "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' 2>&1)" ]] &>/dev/null; then
  grep "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/node_data/wallet/data/staking 2>&1
fi

### proof of stake indicator ###################################################

if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/staking)))")" -lt "5460" ]] &>/dev/null; then
  WALLET_TXLAST="${G1:?}$(tail -1 "${DATA_DIR:?}"/staking 2>/dev/null | awk '{ print $8 }' 2>/dev/null)${N0:?}"
  CB="${G1:?}"
  CBS_IND="1"
else
  CBS_IND="4"
fi

# clean up staking
if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/staking)))")" -lt "1" ]] &>/dev/null; then
  cat "${DATA_DIR:?}"/staking 2>&1 | grep -v "update" >"${DATA_DIR:?}"/staking.tmp 2>&1
  mv "${DATA_DIR:?}"/staking.tmp "${DATA_DIR:?}"/staking &>/dev/null
fi

### update indicator (activity) ################################################

if [[ "$(tail -100 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "update" 2>&1)" ]] &>/dev/null; then
  tail -100 "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | grep "update" 2>&1 | sed -e '/^$/d' >>"${DATA_DIR:?}"/updates 2>&1
  cat "${DATA_DIR:?}"/updates 2>/dev/null | awk '!a[$0]++' 2>&1 | sed -e '/^$/d' >"${DATA_DIR:?}"/updates.tmp 2>&1
  mv "${DATA_DIR:?}"/updates.tmp "${DATA_DIR:?}"/updates &>/dev/null
fi
if [[ "$(echo "$(($(date +%s) - $(date +%s -r "${DATA_DIR:?}"/updates)))")" -lt "600" ]] &>/dev/null; then
  if [[ ! "$(grep "update" "${DATA_DIR:?}"/updates 2>&1)" ]] &>/dev/null; then
    WALLET_TXLAST="${Y1:?}$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)${N0:?}"
  else
    WALLET_TXLAST="${Y1:?}$(tail -1 "${DATA_DIR:?}"/updates 2>/dev/null | awk '{ print $3 }' 2>&1)${N0:?}"
  fi
  CB="${Y1:?}"
fi

if [[ -z "$WALLET_TXLAST" ]] &>/dev/null; then
  WALLET_TXLAST="${GR:?}$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 64 2>&1 | rev 2>&1)${N0:?}"
  loading
fi

### wallet starting ############################################################

if ! grep "progress=" "${LOG_DIR:?}"/node_data/wallet/synced 2>&1 | tail -1 2>&1 | grep -o "progress=1.00" &>/dev/null; then
  RC="${GR:?}"
  CB="${GR:?}"
  TX="${GR:?}"
fi

### rrdtool graphs #############################################################

if [[ "$GRAPH_STATS" -eq "1" ]] &>/dev/null; then
  source /usr/local/bin/include/pinode/stats
fi

### api, arp, addnodes data ####################################################

if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then
  # kill old session
  screen -X -S run_data quit &>/dev/null
  # create screen session
  screen -dmS run_data &>/dev/null
  # 60s 90s 120s 240s 300s 600s, 900s, 1800s = 30 minutes
  timeout 1800 screen -S run_data -X -p 0 stuff $'bash /usr/local/bin/include/pinode/data\n'
fi

# make sure everyone is connected ##############################################

if [[ "$WALLET_PEERS_TOTAL_NR" -lt "$(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then
  cat "${DATA_DIR:?}"/addnodes >>"${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1
fi

### create list of connected peers #############################################

if [ ! -f "${DATA_DIR:?}"/addnodes ] &>/dev/null; then
  # make sure addnodes file exist
  touch "${DATA_DIR:?}"/addnodes &>/dev/null
fi

if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then

  # add addnodes backup if backup is greater
  if [[ "$(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" -gt "$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    # note: don't overwrite this (peers.tmp) created by data
    cat "${DATA_DIR:?}"/addnodes 2>/dev/null | awk '!a[$0]++' >>"${LOG_DIR:?}"/node_data/peers.tmp 2>&1
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Adding backup peers! $(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # disregard failed peers (failed list)
    grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/failed "${DATA_DIR:?}"/addnodes >"${DATA_DIR:?}"/addnodes.tmp 2>&1
    mv "${DATA_DIR:?}"/addnodes.tmp "${DATA_DIR:?}"/addnodes 2>&1
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Cleaning up list after adding! $(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi

  # create addnodes backup if backup is less
  if [[ "$(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" -lt "$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    cp "${LOG_DIR:?}"/node_data/wallet/peers/success "${DATA_DIR:?}"/addnodes &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Creating addnodes backup! $(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}<<${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    # disregard failed peers (failed list)
    grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/failed "${DATA_DIR:?}"/addnodes >"${DATA_DIR:?}"/addnodes.tmp 2>&1
    mv "${DATA_DIR:?}"/addnodes.tmp "${DATA_DIR:?}"/addnodes 2>&1
    printf '%b' "${LOG_DATE:?} Status() Addnode.Script Cleaning up list after backup! $(wc -l "${DATA_DIR:?}"/addnodes 2>&1 | awk '{ print $1 }' 2>&1) ${C1:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### addnodes script ############################################################

cat >"${LOG_DIR:?}"/add_peers <<'EOF'
#!/bin/bash

# By Rainman
# V20221303
# 0.0.5.1

source /usr/local/bin/include/pinode/pinode.conf 2>&1
source /usr/local/bin/include/pinode/color 2>&1

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

P2P=$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | egrep "[0-9]+" 2>&1 | tail -1 2>&1)
P2P_OLD=$(grep "Starting adding nodes" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | tail -1 2>&1 | egrep -o "P2P [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1)

PERC_P2P=$(echo "100/${P2P:?}*$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | awk '{ print $1 }' 2>&1)" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)

printf '%b' "${LOG_DATE:?} Status() Addnode.Script Starting adding nodes! +$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | awk '{ print $1 }' 2>&1) P2P ${P2P:?} ${G1:?}>${N0:?} ${GR:?}${PERC_P2P:?}%${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/wallet/data/screens 2>&1

while IFS= read -r ADDS; do
  cd "${WALLET_DIR:?}" || exit && ./"${WALLET_CLIENT:?}" -datadir="${DATA_DIR:?}" -debuglogfile="${WALLET_LOG_DIR:?}"/debug.log -conf="${DATA_DIR:?}"/"${WALLET_CONFIG:?}" addnode "$ADDS" onetry 2>&1
done <"${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1 | shuf 2>&1 | grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/success 2>&1 | egrep -v "127.|::1|::128" 2>&1 | awk '!a[$0]++' 2>&1

P2P=$(cat "${LOG_DIR:?}"/node_data/wallet/data/connections 2>/dev/null | egrep "[0-9]+" 2>&1 | tail -1 2>&1)
FAILED=$(grep " to $(cat "${LOG_DIR:?}"/node_data/wallet/peers/add_peers.check 2>/dev/null) failed" "$WALLET_LOG_DIR"/debug.log 2>&1 | egrep -o " to .*. failed" 2>&1 | awk '!a[$0]++' 2>&1 | wc -l 2>&1)

P2P_NEW=$(grep "Stopping adding nodes" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | tail -1 2>&1 | egrep -o "P2P [0-9]+" 2>&1 | awk '{ print $2 }' 2>&1)
P2P_CHANGE=$(echo "$P2P_NEW-$P2P_OLD" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

# greater than n seconds, continue
if [[ "$(cat "${LOG_DIR:?}"/node_data/wallet/uptime 2>/dev/null)" -gt "360" ]] &>/dev/null; then
  if [[ "$P2P_CHANGE" -gt "0" ]] &>/dev/null; then
    P2PC="${G1:?}+"
  else
    P2PC="${R1:?}"
  fi
  if [[ "$P2P_CHANGE" -eq "0" ]] &>/dev/null; then
    P2PC="${GR:?}"
  fi
  if [[ -z "$P2P_CHANGE" ]] &>/dev/null; then
    P2PC="${GR:?}"
  fi
fi

printf '%b' "${LOG_DATE:?} Status() Addnode.Script Stopping adding nodes! ${GR:?}-$FAILED${N0:?} P2P ${P2P:?} ${GR:?}<${N0:?} ${P2PC:?}${P2P_CHANGE:?}${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

screen -X -S add_peers quit &>/dev/null
LC_ALL=de_US.utf8 screen -list >"${LOG_DIR:?}"/node_data/wallet/data/screens 2>&1
exit
EOF

### coingecko price, volume ####################################################

cat >"${LOG_DIR:?}"/add_cg <<'EOF'
#!/bin/bash

# By Rainman
# V20221103
# 0.0.3.3

source /usr/local/bin/include/pinode/pinode.conf
source /usr/local/bin/include/pinode/color

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Fetching CoinGecko API data!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# remove requests
truncate -s 0 "${LOG_DIR:?}"/node_data/requests.cg

for (( ; ; )); do # loop until success

  clear
  torify curl -o "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko -X 'GET' 'https://api.coingecko.com/api/v3/coins/'${COING_API:?}'/market_chart?vs_currency='${EXCHA_API:?}'&days='$days'' -H 'accept: application/json' &>/dev/null

  sleep 2
  echo "fail" >>"${LOG_DIR:?}"/node_data/requests.cg 2>&1

  if egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko &>/dev/null; then
    echo "success" >>"${LOG_DIR:?}"/node_data/requests.cg 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() ${G1:?}Success!${N0:?} Found API Data! After ${CY:?}$(wc -l "${LOG_DIR:?}"/node_data/requests.cg 2>&1 | awk '{ print $1 }' 2>&1)${N0:?} requests\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    killall curl &>/dev/null
    exit
  fi

done
EOF

### coinmarketcap price, volume, rank, watchlist ###############################

cat >"${LOG_DIR:?}"/add_cmc <<'EOF'
#!/bin/bash

# By Rainman
# V20221103
# 0.0.3.4

source /usr/local/bin/include/pinode/pinode.conf
source /usr/local/bin/include/pinode/color

# date for logs
LOG_DATE=$(cat "${LOG_DIR:?}"/node_data/system/date 2>/dev/null)

printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Fetching CoinMarketCap API data!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

# remove requests
truncate -s 0 "${LOG_DIR:?}"/node_data/requests.cmc

for (( ; ; )); do # loop until success

  clear
  URL="https://coinmarketcap.com/currencies/${COINM_API:?}/"
  torify curl -s -L "$URL" 2>&1 | html2text >"${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap 2>&1

  sleep 2
  echo "fail" >>"${LOG_DIR:?}"/node_data/requests.cmc 2>&1

  if grep "freed" "${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap &>/dev/null; then
    echo "success" >>"${LOG_DIR:?}"/node_data/requests.cmc 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() ${G1:?}Success!${N0:?} Found API Data! After ${CY:?}$(wc -l "${LOG_DIR:?}"/node_data/requests.cmc 2>&1 | awk '{ print $1 }' 2>&1)${N0:?} requests\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    killall curl &>/dev/null
    exit
  fi

done
EOF

### personal addnodes ##########################################################

if [ ! -f /home/"$(whoami)"/addnodes ] &>/dev/null; then
  # make sure personal addnodes exist
  touch /home/"$(whoami)"/addnodes &>/dev/null
fi

# use personal addnodes if any data
if [[ "$(wc -l /home/"$(whoami)"/addnodes 2>&1 | awk '{ print $1 }' 2>&1)" -gt "0" ]] &>/dev/null; then

  # get ipv4 address from addnodes, disregard 127.
  egrep -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)" /home/"$(whoami)"/addnodes 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/addnodes.ipv4 2>&1

  # get ipv6 address from addnodes
  egrep -o "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))" /home/"$(whoami)"/addnodes 2>&1 | sed -r '/^.{,9}$/d' | sort -n >"${LOG_DIR:?}"/addnodes.ipv6 2>&1

  # get domain address from addnodes
  grep -oiE '([a-zA-Z0-9][a-zA-Z0-9-]{1,61}\.){1,}(\.?[a-zA-Z]{2,}){1,}' /home/"$(whoami)"/addnodes 2>&1 | sort -n 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/addnodes.dns 2>&1

  # get onion address from addnodes
  egrep -o ".*.onion" /home/"$(whoami)"/addnodes 2>&1 | awk '!a[$0]++' >"${LOG_DIR:?}"/addnodes.onion 2>&1

  # add extras, disregard invalid pattern address (cidr - classless inter-domain routing)
  grepcidr -f "${LOG_DIR:?}"/addnodes.ipv4 "${LOG_DIR:?}"/addnodes.ipv4 >"${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>"${LOG_DIR:?}"/node_data/wallet/peers/peers.cidr
  grepcidr -f "${LOG_DIR:?}"/addnodes.ipv6 "${LOG_DIR:?}"/addnodes.ipv6 >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>"${LOG_DIR:?}"/node_data/wallet/peers/peers.cidr

  # add extras domain names
  cat "${LOG_DIR:?}"/addnodes.dns >"${LOG_DIR:?}"/node_data/wallet/peers/peers.x.tmp 2>/dev/null
  cat "${LOG_DIR:?}"/addnodes.onion >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.x.tmp 2>/dev/null
  cat "${LOG_DIR:?}"/node_data/wallet/peers/peers.x.tmp 2>&1 | awk '!a[$0]++' 2>&1 | sort -n >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>/dev/null

  printf '%b' "${LOG_DATE:?} Status() Addnode.Script Adding extra nodes\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_IPv4 $(wc -l "${LOG_DIR:?}"/addnodes.ipv4 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_IPv6 $(wc -l "${LOG_DIR:?}"/addnodes.ipv6 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_Tor+ $(wc -l "${LOG_DIR:?}"/addnodes.onion 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script |_DNS+ $(wc -l "${LOG_DIR:?}"/addnodes.dns 2>&1 | awk '{ print $1 }' 2>&1)\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  printf '%b' "${LOG_DATE:?} Status() Addnode.Script | ${G1:?}$(echo "$(wc -l "${LOG_DIR:?}"/addnodes.ipv4 2>&1 | awk '{ print $1 }' 2>&1)+$(wc -l "${LOG_DIR:?}"/addnodes.ipv6 2>&1 | awk '{ print $1 }' 2>&1)+$(wc -l "${LOG_DIR:?}"/addnodes.dns 2>&1 | awk '{ print $1 }' 2>&1)" 2>&1 | bc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1) Total ${CY:?}>>${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1

  # truncate/remove files, now old
  truncate -s 0 /home/"$(whoami)"/addnodes &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.onion &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.ipv4 &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.ipv6 &>/dev/null
  rm "${LOG_DIR:?}"/addnodes.dns &>/dev/null

  # add extras from personal addnodes
  cat "${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>/dev/null | egrep -v "127.|::1|::128" >>"${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp 2>/dev/null
  # remove duplicates, sort
  cat "${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp 2>/dev/null | awk '!a[$0]++' 2>&1 | sort -n >"${LOG_DIR:?}"/node_data/wallet/peers/peers.clean 2>&1
  mv "${LOG_DIR:?}"/node_data/wallet/peers/peers.clean "${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp &>/dev/null

  printf '%b' "${LOG_DATE:?} Status() Addnode.Script Adding personal +$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/peers.x 2>&1 | awk '{ print $1 }' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  # remove file, now old
  rm "${LOG_DIR:?}"/node_data/wallet/peers/peers.x* &>/dev/null

  cp "${LOG_DIR:?}"/node_data/wallet/peers/peers.tmp "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>&1
  # make sure addnodes is clean of successfully peers, as above as below
  grep -vf "${LOG_DIR:?}"/node_data/wallet/peers/success "${LOG_DIR:?}"/node_data/wallet/peers/add_peers >"${LOG_DIR:?}"/node_data/wallet/peers/add_peers.tmp 2>&1
  mv "${LOG_DIR:?}"/node_data/wallet/peers/add_peers.tmp "${LOG_DIR:?}"/node_data/wallet/peers/add_peers 2>/dev/null

  # create screen session
  screen -dmS add_peers_extra &>/dev/null
  # 60s 90s 120s 240s 300s 600s, 900s, 1800s = 30 minutes
  timeout 900 screen -S add_peers_extra -X -p 0 stuff $'bash '"${LOG_DIR:?}"'/add_peers\n'
fi

### calculate average price and volume #########################################

# add direct price, volume (coingecko), disregard zeros, empty lines (no data)
cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | awk '{ printf "%.4f\n", $1 }' >>"${LOG_DIR:?}"/node_data/wallet/data/price.avg
cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | awk '{ printf "%.2f\n", $1 }' >>"${LOG_DIR:?}"/node_data/wallet/data/volume.avg

# add direct price, volume (coinmarketcap), disregard zeros, empty lines (no data)
cat "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | awk '{ printf "%.4f\n", $1 }' >>"${LOG_DIR:?}"/node_data/wallet/data/price.avg
cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | awk '{ printf "%.2f\n", $1 }' >>"${LOG_DIR:?}"/node_data/wallet/data/volume.avg

# create average ticker price and volume, disregard zeros, empty lines (no data)
cat "${LOG_DIR:?}"/node_data/wallet/data/price* 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | xargs 2>&1 | awk '{ printf "%.8f\n", $1 }' >>"${LOG_DIR:?}"/node_data/wallet/data/price.avg
cat "${LOG_DIR:?}"/node_data/wallet/data/volume* 2>/dev/null | sed '/^$/d' 2>&1 | awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' 2>&1 | xargs 2>&1 | awk '{ printf "%.8f\n", $1 }' >>"${LOG_DIR:?}"/node_data/wallet/data/volume.avg

# count price and volume lines
TICKER_COUNT=$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/price.avg 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
VOLUME_COUNT=$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/volume.avg 2>&1 | awk '{ print $1 }' 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

# calculate average price and volume
echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/price.avg 2>&1)/${TICKER_COUNT:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/price 2>&1
echo "$(awk '{ SUM += $1} END { print SUM }' "${LOG_DIR:?}"/node_data/wallet/data/volume.avg 2>&1)/${VOLUME_COUNT:?}" 2>&1 | bc -l 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/volume 2>&1

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/price.avg 2>&1 | awk '{ print $1 }' 2>&1)" -gt "360" ]] &>/dev/null; then
  echo "$(tail -90 "${LOG_DIR:?}"/node_data/wallet/data/price.avg 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/price.avg 2>&1
fi

if [[ "$(wc -l "${LOG_DIR:?}"/node_data/wallet/data/volume.avg 2>&1 | awk '{ print $1 }' 2>&1)" -gt "360" ]] &>/dev/null; then
  echo "$(tail -90 "${LOG_DIR:?}"/node_data/wallet/data/volume.avg 2>&1)" >"${LOG_DIR:?}"/node_data/wallet/data/volume.avg 2>&1
fi

### backup values coingecko ####################################################

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/price.cg ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/price.cg ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/price.cg "${DATA_DIR:?}"/price.cg &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/price.cg ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/price.cg "${LOG_DIR:?}"/node_data/wallet/data/price.cg &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} Price! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/volume.cg ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/volume.cg ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cg "${DATA_DIR:?}"/volume.cg &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/volume.cg ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/volume.cg "${LOG_DIR:?}"/node_data/wallet/data/volume.cg &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} Volume! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# run data with intervals, every n minutes, update api, arp and ticker
if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/price.cg ]] &>/dev/null; then

    # make sure backup is updated
    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/price.cg 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_PRICE_CG=$(egrep "[0-9]+" "${DATA_DIR:?}"/price.cg 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/price.cg "${DATA_DIR:?}"/price.cg &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}$OLD_PRICE_CG${N0:?} Price! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/volume.cg ]] &>/dev/null; then

    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/volume.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_VOLUME_CG=$(egrep "[0-9]+" "${DATA_DIR:?}"/volume.cg 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cg "${DATA_DIR:?}"/volume.cg &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_VOLUME_CG:?}${N0:?} Volume! (CG)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

fi

### backup values coinmarketcap ################################################

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/rank.cmc ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc "${DATA_DIR:?}"/rank.cmc &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/rank.cmc ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/rank.cmc "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)${N0:?} Rank! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/price.cmc ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/price.cmc ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/price.cmc "${DATA_DIR:?}"/price.cmc &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/price.cmc ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/price.cmc "${LOG_DIR:?}"/node_data/wallet/data/price.cmc &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} Price! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/volume.cmc ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc "${DATA_DIR:?}"/volume.cmc &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/volume.cmc ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/volume.cmc "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} Volume! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

if [ -f "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc ] &>/dev/null; then
  if [[ ! -f "${DATA_DIR:?}"/watchers.cmc ]] &>/dev/null; then
    # create backup if missing
    cp "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc "${DATA_DIR:?}"/watchers.cmc &>/dev/null
  fi

else # restore it

  if [[ -f "${DATA_DIR:?}"/watchers.cmc ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/watchers.cmc "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc &>/dev/null
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Restored API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)${N0:?} Watchlist! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

# run data with intervals, every n minutes, update api, arp and ticker
if [[ "$(echo "${LOG_CHECK:?}" 2>&1 | egrep "[0-9]+:30:[0-9]+|[0-9]+:00:[0-9]+" 2>&1)" ]] &>/dev/null; then

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/price.cmc ]] &>/dev/null; then

    # make sure backup is updated
    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/price.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_PRICE_CMC=$(egrep "[0-9]+" "${DATA_DIR:?}"/price.cmc 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/price.cmc "${DATA_DIR:?}"/price.cmc &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>&1 | awk '{ printf "%.4f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_PRICE_CMC:?}${N0:?} Price! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc ]] &>/dev/null; then

    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/rank.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_RANK_CMC=$(egrep "[0-9]+" "${DATA_DIR:?}"/rank.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc "${DATA_DIR:?}"/rank.cmc &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_RANK_CMC:?}${N0:?} Rank! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc ]] &>/dev/null; then

    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/volume.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_VOLUME_CMC=$(egrep "[0-9]+" "${DATA_DIR:?}"/volume.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc "${DATA_DIR:?}"/volume.cmc &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_VOLUME_CMC:?}${N0:?} Volume! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi

  # no update if empty
  if [[ -s "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc ]] &>/dev/null; then

    if [[ ! "$(cat "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc 2>/dev/null | tr -d '.' 2>&1)" -eq "$(cat "${DATA_DIR:?}"/watchers.cmc 2>/dev/null | tr -d '.' 2>&1)" ]] &>/dev/null; then
      OLD_WATCHERS_CMC=$(egrep "[0-9]+" "${DATA_DIR:?}"/watchers.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
      cp "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc "${DATA_DIR:?}"/watchers.cmc &>/dev/null
      printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Updating backup API ${G1:?}$(egrep "[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)${N0:?} ${CY:?}->${N0:?} ${GR:?}${OLD_WATCHERS_CMC:?}${N0:?} Watchers! (CMC)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    fi
  fi
fi

### coinmarketcap data #########################################################

# if success, create files, reset requests.cmc file
if grep "success" "${LOG_DIR:?}"/node_data/requests.cmc &>/dev/null; then

  # get token price
  egrep " Price   .[0-9]+.[0-9]+" "${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap 2>&1 | awk '{ print $3 }' 2>&1 | tr -d '$' 2>&1 | tail -1 2>&1 | awk '{ printf "%.4f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>&1
  # get token volume
  grep "Trading Volume24h" "${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap 2>&1 | tail -1 2>&1 | awk '{ print $3 }' 2>&1 | tr -d '$|,' | awk '{ printf "%.2f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>&1
  # get token rank
  grep "Market Rank" "${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap 2>&1 | tail -1 2>&1 | tr -d '#' 2>&1 | awk '{ print $3 }' | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>&1
  # get token watchlist
  grep "watchlists" "${LOG_DIR:?}"/node_data/wallet/data/raw.coinmcap 2>&1 | tr -d ',' 2>&1 | awk '{ print $2 }' | awk '{ printf "%.0f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc 2>&1

  # coinmarketcap api values
  API_PRICE_CMC=$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cmc 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)
  API_VOLUME_CMC=$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cmc 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)
  API_RANK_CMC=$(cat "${LOG_DIR:?}"/node_data/wallet/data/rank.cmc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)
  API_WATCH_CMC=$(cat "${LOG_DIR:?}"/node_data/wallet/data/watchers.cmc 2>/dev/null | awk '{ printf "%.0f\n", $1 }' 2>&1)

  if [[ -z "$API_PRICE_CMC" ]] &>/dev/null; then
    API_PRICE_CMC="0"
  fi
  if [[ -z "$API_VOLUME_CMC" ]] &>/dev/null; then
    API_VOLUME_CMC="0"
  fi
  if [[ -z "$API_RANK_CMC" ]] &>/dev/null; then
    API_RANK_CMC="0"
  fi
  if [[ -z "$API_WATCH_CMC" ]] &>/dev/null; then
    API_WATCH_CMC="0"
  fi

  # greater than n seconds, continue
  if [[ "$(echo "${DAEMON_UPTIME:?}" 2>&1)" -gt "420" ]] &>/dev/null; then
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Found ${G1:?}${API_PRICE_CMC:?}${N0:?} price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Found ${G1:?}${API_VOLUME_CMC:?}${N0:?} volume!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Found ${G1:?}${API_RANK_CMC:?}${N0:?} rank!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() CoinMCap.API() Found ${G1:?}${API_WATCH_CMC:?}${N0:?} watchlist!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
  screen -X -S add_cmc quit &>/dev/null
  killall curl &>/dev/null
  rm "${LOG_DIR:?}"/node_data/requests* &>/dev/null
fi

### coingecko data #############################################################

# if success, create files, reset requests.cg file
if grep "success" "${LOG_DIR:?}"/node_data/requests.cg &>/dev/null; then

  # get token price
  grep -o -P '(?<=,).*(?=]],"m)' "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko | awk '{ printf "%.4f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>&1
  # get token volume
  egrep -o "volumes.*" "${LOG_DIR:?}"/node_data/wallet/data/raw.coingcko 2>&1 | tr -d '"|:' 2>&1 | awk -F, '{ print $2 }' 2>&1 | awk '{ printf "%.8f\n", $1 }' >"${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>&1

  if [[ "$(grep "Cloudflare" /tmp/node_data/wallet/data/raw.coingcko)" ]] &>/dev/null; then
    cp "${DATA_DIR:?}"/price.cg "${LOG_DIR:?}"/node_data/wallet/data/price.cg
    cp "${DATA_DIR:?}"/volume.cg "${LOG_DIR:?}"/node_data/wallet/data/volume.cg
  fi

  # coingecko api values
  API_PRICE_CG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/price.cg 2>/dev/null | awk '{ printf "%.4f\n", $1 }' 2>&1)
  API_VOLUME_CG=$(cat "${LOG_DIR:?}"/node_data/wallet/data/volume.cg 2>/dev/null | awk '{ printf "%.2f\n", $1 }' 2>&1)

  if [[ -z "$API_PRICE_CG" ]] &>/dev/null; then
    API_PRICE_CG="0"
  fi
  if [[ -z "$API_VOLUME_CG" ]] &>/dev/null; then
    API_VOLUME_CG="0"
  fi

  # greater than n seconds, continue
  if [[ "$(echo "${DAEMON_UPTIME:?}" 2>&1)" -gt "420" ]] &>/dev/null; then
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Found ${G1:?}${API_PRICE_CG:?}${N0:?} price!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${LOG_DATE:?} Status() Coingcko.API() Found ${G1:?}${API_VOLUME_CG:?}${N0:?} volume!${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    printf '%b' "${GR:?}${LOG_DATE:?} Status() - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
  screen -X -S add_cg quit &>/dev/null
  killall curl &>/dev/null
  rm "${LOG_DIR:?}"/node_data/requests* &>/dev/null
fi

### restore failed list ########################################################

if [[ "$(LC_ALL=de_US.utf8 date '+%H%M' 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then
  DIS_LOCAL=$(echo "$(cat "${LOG_DIR:?}"/node_data/system/ip_address 2>/dev/null)" 2>&1 | egrep -o "[0-9]+" 2>&1 | head -1 2>&1)
  # keep last n of failed connections
  RANDOM_FAILED=$((((RANDOM % 1440) + 128)))
  echo "$(tail -"${RANDOM_FAILED:?}" "${LOG_DIR:?}"/node_data/wallet/peers/failed 2>&1 | grep -v "${DIS_LOCAL:?}" 2>&1)" 2>&1 | awk '!a[$0]++' >"${DATA_DIR:?}"/failed 2>&1
fi

if [[ ! "$(grep "Never connected()" "${WALLET_LOG_DIR:?}"/debug.log 2>&1)" ]] &>/dev/null; then
  # use old failed list as a continuation to the next day, ruled by -lines above
  if [[ "$(wc -l "${DATA_DIR:?}"/failed 2>&1 | awk '{ print $1 }' 2>&1)" -gt "$(wc -l "${LOG_DIR:?}"/node_data/wallet/peers/failed 2>&1 | awk '{ print $1 }' 2>&1)" ]] &>/dev/null; then
    # add failed peers (failed.tmp) back in to debug.log
    while IFS= read -r ADDS; do
      echo "${LOG_DATE:?} Status() connect to ${ADDS:?} failed -> Never connected()" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
    done <"${DATA_DIR:?}"/failed 2>&1 | awk '!a[$0]++' 2>&1 | sort -n 2>&1
    printf '%b' "${LOG_DATE:?} Status() Clean.Backup() Restoring old failed list, failed.tmp +$(wc -l "${DATA_DIR:?}"/failed 2>&1 | awk '{ print $1 }' 2>&1)${N0:?}\n" >>"${WALLET_LOG_DIR:?}"/debug.log 2>&1
  fi
fi

### clean up ###################################################################

if [[ "$(LC_ALL=de_US.utf8 date '+%H%M' 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then
  truncate -s 0 "${LOG_DIR:?}"/node_data/wallet/data/reward_count &>/dev/null
  truncate -s 0 "${LOG_DIR:?}"/node_data/wallet/data/stake_count &>/dev/null
  truncate -s 0 "${WALLET_LOG_DIR:?}"/debug.log &>/dev/null
  truncate -s 0 "${DATA_DIR:?}"/staking &>/dev/null
  truncate -s 0 "${DATA_DIR:?}"/updates &>/dev/null
  truncate -s 0 "${DATA_DIR:?}"/getwan &>/dev/null
  # remove updated files (temporary)
  rm "${DATA_DIR:?}"/rewards &>/dev/null
  rm /home/"$(whoami)"/stats/total_tx_q.rrd &>/dev/null
fi

### update repository ##########################################################

if [[ "$(LC_ALL=de_US.utf8 date '+%H%M' 2>&1 | grep -Eo "0000" 2>&1)" ]] &>/dev/null; then
  if [[ "$UPDATE_REPO" -eq "1" ]] &>/dev/null; then
    # update repo, if set
    cd /home/"$(whoami)"/pi-node || exit &&
      torify git pull -q && bash include/install 2>&1
  fi
fi

# END
