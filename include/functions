#!/bin/bash

################################################################################

source /etc/pi-node/include/color
source /etc/pi-node/config

################################################################################
# client commands
################################################################################

# getinfo
/usr/local/bin/./freedomcoin-cli getinfo >/tmp/getinfo.tmp 2>/dev/null

# version
if [[ ! -f /tmp/version.tmp ]] &>/dev/null; then
  /usr/local/bin/./freedomcoin-cli -version >/tmp/version.tmp 2>/dev/null
fi

# getbestblockhash
/usr/local/bin/freedomcoin-cli getbestblockhash >/tmp/getbestblockhash.tmp 2>/dev/null

# getmempoolinfo
/usr/local/bin/freedomcoin-cli getmempoolinfo >/tmp/getmempoolinfo.tmp 2>/dev/null

# getblockchaininfo
if [[ ! -f /tmp/getblockchaininfo.tmp ]] &>/dev/null; then
  /usr/local/bin/freedomcoin-cli getblockchaininfo >/tmp/getblockchaininfo.tmp 2>/dev/null
fi

################################################################################
# progress bar
################################################################################

# if not synced
if [[ ! "$(grep -oP 'progress=\K[0-9.]+' "${WALLET_LOG_DIR}"/debug.log | tail -1 | egrep "[0-9]+.[0-9]+")" == "1.000000" ]] &>/dev/null; then
  # function to draw the progress bar
  draw_progress_bar() {
    PROGRESS="$1"
    local PERCENT
    BAR_WIDTH=50
    local FILLED
    local EMPTY

    PERCENT=$(awk "BEGIN {printf \"%.0f\", $PROGRESS * 100}")
    FILLED=$((PERCENT * BAR_WIDTH / 100))
    EMPTY=$((BAR_WIDTH - FILLED))
    # bar
    printf "["
    for ((I = 0; I < FILLED; I++)); do printf "#"; done
    for ((I = 0; I < EMPTY; I++)); do printf "."; done
    printf "] %s%%\n" "$PERCENT"
  }
  # extract the progress value
  PROGRESS="$(grep -oP 'progress=\K[0-9.]+' "${WALLET_LOG_DIR}"/debug.log | tail -1)"
  # draw the progress bar
  WALLET_TXLAST="$(draw_progress_bar "$PROGRESS")"
fi

################################################################################

# if missing
if [[ ! -f /tmp/progress.tmp ]] &>/dev/null; then
  WALLET_SYNC="$(grep -o "progress....." .trumpcoin/debug.log | tail -1)"
  echo "$WALLET_SYNC" >/tmp/progress.tmp
fi

WALLET_SYNC="$(cat /tmp/progress.tmp 2>/dev/null)"
if [[ "$WALLET_SYNC" == "progress=1.00" ]] &>/dev/null; then
  WALLET_SYNC="${G1}OK${N0}"
fi

# if zero
if [[ -z "$WALLET_SYNC" ]] &>/dev/null; then
  WALLET_SYNC="${GR}0%${N0}"
fi

################################################################################

REPO_VERSION="${N0}v$(wc -l /etc/pi-node/*/* 2>/dev/null | grep "total" | egrep -o "[0-9]+" | sed 's/./&./g;s/\.$//')"

################################################################################

DATE="$(date 2>/dev/null)"
SYSTEM_DATE="${GR}$(echo "$DATE" | awk '{ print $1,$2,$3,$6 }')${N0}"
SYSTEM_CLOCK="$(echo "$DATE" | awk '{ print $4 }')"

################################################################################

# default logo color (idle)
CB="${GR}"

################################################################################

WALLET_POS_REWARDS="$(grep "BitcoinMiner : proof-of-stake block was signed" "${WALLET_LOG_DIR:?}"/debug.log 2>&1 | awk '!a[$0]++' 2>&1 | wc -l)"

# if any rewards
if [[ "$WALLET_POS_REWARDS" -gt "0" ]] &>/dev/null; then
  CB="${G1}"
fi

################################################################################

WALLET_MOVEMENT="$(grep -c "AddToWallet" "${WALLET_LOG_DIR:?}"/debug.log)"

# if any movements
if [[ "$WALLET_MOVEMENT" -gt "0" ]] &>/dev/null; then
  CB="${Y1}"
fi

################################################################################

MASTER_STATUS=""

# if zero
if [[ -z "$MASTER_STATUS" ]] &>/dev/null; then
  MASTER_STATUS="${GR}M${N0}"
fi

################################################################################

THEME_STATUS=""

# if zero
if [[ -z "$THEME_STATUS" ]] &>/dev/null; then
  THEME_STATUS="${GR}D${N0}"
fi

################################################################################

POS_STATUS="$(grep -c "Staking Not Active" /tmp/getinfo.tmp)"

# if zero
if [[ "$POS_STATUS" == "0" || -z "$POS_STATUS" ]] &>/dev/null; then
  POS_STATUS="${G1}S${N0}"
fi

# if active
if [[ "$POS_STATUS" == "1" ]] &>/dev/null; then
  POS_STATUS="${GR}S${N0}"
fi

################################################################################

TOR_STATUS="$(grep "proxy" /tmp/getinfo.tmp | awk '{ print $2 }' | tr -d '",' | egrep -c "[0-9]+|[A-Z]+|[a-z]")"

# if zero
if [[ "$TOR_STATUS" == "0" || -z "$TOR_STATUS" ]] &>/dev/null; then
  TOR_STATUS="${GR}S${N0}"
fi

# if active
if [[ "$TOR_STATUS" == "1" ]] &>/dev/null; then
  TOR_STATUS="${P1}P${N0}"
fi

################################################################################

LAN_STATUS="${CY}$(ifconfig | head -1 | awk '{ print $1 }' | tr -d ':')${N0}"

# if zero
if [[ -z "$LAN_STATUS" ]] &>/dev/null; then
  LAN_STATUS="${GR}null${N0}"
fi

################################################################################

SYSTEM_LOAD="$(cat /proc/loadavg 2>/dev/null | awk '{ print $1,$2,$3 }')"

################################################################################

# read raw temp in millidegrees
CPU_CTEMP_RAW=$(cat /sys/devices/virtual/thermal/thermal_zone0/temp)
# integer celsius
CPU_CTEMP_C=$((CPU_CTEMP_RAW / 1000))
# integer fahrenheit (using integer math)
CPU_FTEMP=$(((CPU_CTEMP_C * 9 / 5) + 32))
# with symbol
CPU_CTEMP_C="${CPU_CTEMP_C}°C"
CPU_FTEMP="${CPU_FTEMP}°F"

################################################################################

TOTAL_MEM="${G0}$(echo "$(echo "$(grep "MemTotal" /proc/meminfo | awk '{ print $2 }')+"$(grep "SwapTotal" /proc/meminfo | awk '{ print $2 }') | bc -l 2>/dev/null)/1024" | bc 2>/dev/null)${N0}"
FREE_MEM="${G1}$(echo "$(grep "MemFree" /proc/meminfo | awk '{ print $2 }')/1024" | bc 2>/dev/null)${N0}"

################################################################################

TOTAL_HDD="${G0}$(df -h --total | tail -1 | xargs | tr -d '-' | awk '{ print $2 }')${N0}"
USED_HDD="${G1}$(df -h --total | tail -1 | xargs | tr -d '-' | awk '{ print $3 }')${N0}"
USED_HDD_P="$(df -h --total | tail -1 | xargs | tr -d '-' | awk '{ print $5 }' | tr -d 'G')"

################################################################################

SYSTEM_USER="$(whoami)"

################################################################################

IP_ADDRESS="${N0}$(ifconfig | grep "inet" | egrep -v "prefix|127" | awk '{ print $2 }')${N0}"

################################################################################

# get all RX byte counts from ifconfig
DOWNLOAD_TOTAL=$(ifconfig | grep "RX packets" | awk '{ print $5 }' | paste -sd+ - | bc 2>/dev/null)
# convert RX bytes to MB and GB
DOWNLOAD_TOTAL_MB=$(echo "scale=2; $DOWNLOAD_TOTAL / (1024 * 1024)" | bc)
DOWNLOAD_TOTAL_GB=$(echo "scale=2; $DOWNLOAD_TOTAL / (1024 * 1024 * 1024)" | bc)

# which unit to display
if (($(echo "$TOTAL_GB >= 1" | bc -l))); then
  DOWNLOAD="$DOWNLOAD_TOTAL_MB MB"
else
  DOWNLOAD="$DOWNLOAD_TOTAL_GB GB"
fi

################################################################################

# get all TX byte counts from ifconfig
UPLOAD_TOTAL_BYTES=$(ifconfig | grep "TX packets" | awk '{ print $5 }' | paste -sd+ - | bc 2>/dev/null)
# convert RX bytes to MB and GB
UPLOAD_TOTAL_MB=$(echo "scale=2; $UPLOAD_TOTAL_BYTES / (1024 * 1024)" | bc 2>/dev/null)
UPLOAD_TOTAL_GB=$(echo "scale=2; $UPLOAD_TOTAL_BYTES / (1024 * 1024 * 1024)" | bc 2>/dev/null)

# which unit to display
if (($(echo "$TOTAL_GB >= 1" | bc -l 2>/dev/null))); then
  UPLOAD="$UPLOAD_TOTAL_MB MB"
else
  UPLOAD="$UPLOAD_TOTAL_GB GB"
fi

################################################################################

WALLET_DAEMON="$(echo "$WALLET_DAEMON" | awk -F/ '{ print $NF }')"

################################################################################

WALLET_VERSION="$(tail -1 /tmp/version.tmp 2>/dev/null | awk '{ print $NF }')"

################################################################################

WALLET_CHAIN="$(grep -w "chain" /tmp/getblockchaininfo.tmp | awk '{ print $NF }' | tr -d ',"')"

# if main
if [[ "$WALLET_CHAIN" == "main" ]] &>/dev/null; then
  WALLET_CHAIN="${G1}mainnet${N0}"
fi

# if test
if [[ "$WALLET_CHAIN" == "test" ]] &>/dev/null; then
  WALLET_CHAIN="${CY}testnet${N0}"
fi

# if zero
if [[ -z "$WALLET_CHAIN" ]] &>/dev/null; then
  WALLET_CHAIN="${GR}nonet${N0}"
fi

################################################################################

# if missing
if [[ ! -f /tmp/wanip.tmp ]] &>/dev/null; then
  PUBLIC_IP="$(curl -s http://whatismyip.akamai.com/)"
  echo "$PUBLIC_IP" >/tmp/wanip.tmp
fi

# random start number
RANDOM_PUBLIC_IP=$((((RANDOM % 2) + 1)))

# onion ip address
if [[ "$RANDOM_PUBLIC_IP" == "1" ]] &>/dev/null; then
  PUBLIC_IP="$(cat /etc/pi-node/hostname.onion 2>/dev/null)"
  PUBLIC_IP="${P1}${PUBLIC_IP:0:9}...onion${N0:?}"
fi
# wan ip address
if [[ "$RANDOM_PUBLIC_IP" == "2" ]] &>/dev/null; then
  PUBLIC_IP="${CY}$(cat /tmp/wanip.tmp 2>/dev/null)${N0}"
fi
# if zero
if [[ -z "$PUBLIC_IP" ]] &>/dev/null; then
  PUBLIC_IP="${GR}0.0.0.0${N0}"
fi

################################################################################

WALLET_PEERS_TOTAL="${G1}$(grep "connections" /tmp/getinfo.tmp | awk '{ print $NF }' | tr -d ',')${N0}"

# if zero
if [[ -z "$WALLET_PEERS_TOTAL" ]] &>/dev/null; then
  WALLET_PEERS_TOTAL="0"
fi

################################################################################

WALLET_PEERS_LATEST=""

# if zero
if [[ -z "$WALLET_PEERS_LATEST" ]] &>/dev/null; then
  WALLET_PEERS_LATEST="${GR}0${N0}"
fi

################################################################################

WALLET_PEERS_OTHER=""

# if zero
if [[ -z "$WALLET_PEERS_OTHER" ]] &>/dev/null; then
  WALLET_PEERS_OTHER="${GR}0${N0}"
fi

################################################################################

WALLET_BALANCES="$(grep "balance" /tmp/getinfo.tmp | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_BALANCES" ]] &>/dev/null; then
  WALLET_BALANCES="${GR}0${N0}"
fi

################################################################################

WALLET_POS_REWARDS=""

# if zero
if [[ -z "$WALLET_POS_REWARDS" ]] &>/dev/null; then
  WALLET_POS_REWARDS="Stakes 0"
fi

################################################################################

WALLET_INPUTS_NODES=""

# if zero
if [[ -z "$WALLET_INPUTS_NODES" ]] &>/dev/null; then
  WALLET_INPUTS_NODES="Inputs 0"
fi

################################################################################

WALLET_TXCOUNT=""

# if zero
if [[ -z "$WALLET_TXCOUNT" ]] &>/dev/null; then
  WALLET_TXCOUNT="0"
fi

################################################################################

WALLET_MEMPOOL="$(grep "size" /tmp/getmempoolinfo | awk '{ print $2 }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_MEMPOOL" ]] &>/dev/null; then
  WALLET_MEMPOOL="${GR}0${N0}"
fi

################################################################################

WALLET_HEADS="$(grep "blocks" /tmp/getinfo.tmp | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_HEADS" ]] &>/dev/null; then
  WALLET_HEADS="0"
fi

################################################################################

# random start number
RANDOM_QUOTES=$((((RANDOM % 10) + 1)))
# quotes - art of the deal
if [ "$RANDOM_QUOTES" -eq "1" ] &>/dev/null; then
  TIMELINE="${GR}Think big${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "2" ] &>/dev/null; then
  TIMELINE="${GR}Maximize your options${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "3" ] &>/dev/null; then
  TIMELINE="${GR}Know your market${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "4" ] &>/dev/null; then
  TIMELINE="${GR}Use your leverage${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "5" ] &>/dev/null; then
  TIMELINE="${GR}Enhance your location${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "6" ] &>/dev/null; then
  TIMELINE="${GR}Get the word out${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "7" ] &>/dev/null; then
  TIMELINE="${GR}Fight back${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "8" ] &>/dev/null; then
  TIMELINE="${GR}Deliver the goods${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "9" ] &>/dev/null; then
  TIMELINE="${GR}Contain the costs${N0:?}"
elif [ "$RANDOM_QUOTES" -eq "10" ] &>/dev/null; then
  TIMELINE="${GR}Have fun${N0:?}"
fi

# if zero
if [[ -z "$TIMELINE" ]] &>/dev/null; then
  TIMELINE="Always something.."
fi

################################################################################

TX=""

# if zero
if [[ -z "$TX" ]] &>/dev/null; then
  TX="${GR}"
fi

################################################################################

WALLET_TXLAST="${GR}$(tail -1 /tmp/getbestblockhash.tmp 2>/dev/null)${N0}"

# if zero
if [[ -z "$WALLET_TXLAST" ]] &>/dev/null; then
  WALLET_TXLAST="null"
fi

################################################################################

LAST_LOG="$(tail -1 "$DATA_DIR"/debug.log)"

# if zero
if [[ -z "$LAST_LOG" ]] &>/dev/null; then
  LAST_LOG="null"
fi

# if more than n megabytes
if [[ "$(ls -lSh .trumpcoin/debug.log 2>/dev/null | awk '{ print $5 }' | tr -d 'M')" -gt "10" ]] &>/dev/null; then
  # trim debug.log
  echo "$(tail -1001 "$WALLET_LOG_DIR"/debug.log 2>/dev/null)" >"$WALLET_LOG_DIR"/debug.log
fi

################################################################################

TIME="60" # loop every n second

# shellcheck disable=SC2034  # Unused variables left for readability

# after the fact (script), remove leading zero
TIME_SECONDS=$(LC_ALL=de_US.utf8 date +"%S" | sed 's/^0*//g; s/\.0*/./g' 2>/dev/null)
if [ -z "$TIME_SECONDS" ] &>/dev/null; then
  # too many zeros, create fiction
  TIME_SECONDS="1"
fi
if [[ "$TIME_SECONDS" -gt "30" ]] &>/dev/null; then
  # wait extra n seconds
  TIME_FIX=$(echo "${TIME:?}-${TIME_SECONDS:?}" | bc -l 2>/dev/null)
  TIME=$(echo "${TIME:?}+${TIME_FIX:?}" | bc -l 2>/dev/null)
else
  # wait less n seconds
  TIME=$(echo "${TIME:?}-${TIME_SECONDS:?}" | bc -l 2>/dev/null)
fi

# END
